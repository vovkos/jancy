.. include:: def.rst
.. index:: pair: class; sys.Timer
.. _doxid-type_sys_timer:

class sys.Timer
===============

.. toctree::
	:hidden:

Overview
~~~~~~~~

This class provides facilities to manage both peridodic(repetitive)
and non-periodic(single-shot) timers. :ref:`More...<details-type_sys_timer>`


.. ref-code-block:: jancy
	:class: doxyrest-overview-code-block

	import "sys_Timer.jnc"
	
	class Timer {
		// construction
	
		:target:`construct<doxid-function_sys_timer_construct>`();
		:target:`destruct<doxid-function_sys_timer_destruct>`();

		// methods
	
		bool errorcode :ref:`start<doxid-function_sys_timer_start>`(
			void function* func(),
			:ref:`uint64_t<doxid-typedef_uint64_t>` dueTime,
			:ref:`uint_t<doxid-typedef_uint_t>` interval
		);
	
		void :ref:`stop<doxid-function_sys_timer_stop>`();
	
		bool errorcode :ref:`startDueTimer<doxid-function_sys_timer_startduetimer>`(
			void function* func(),
			:ref:`uint64_t<doxid-typedef_uint64_t>` dueTime
		);
	
		bool errorcode :ref:`startPeriodicTimer<doxid-function_sys_timer_startperiodictimer>`(
			void function* func(),
			:ref:`uint_t<doxid-typedef_uint_t>` interval
		);
	
		bool errorcode :ref:`startSingleShotTimer<doxid-function_sys_timer_startsingleshottimer>`(
			void function* func(),
			:ref:`uint_t<doxid-typedef_uint_t>` delay
		);

		// aliases
	
		alias :ref:`dispose<doxid-alias_sys_timer_dispose>` = stop;
	};
.. _details-type_sys_timer:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class provides facilities to manage both peridodic(repetitive)
and non-periodic(single-shot) timers.

Each instance of ``sys.Timer`` manages a single timer(either periodic, or
single-shot). You start the timer with ``start``, ``startDueTimer``,
``startSingleShotTimer``, ``startPeriodicTimer`` methods. When the timer is
due, it will call the function you have supplied as an argument to one of
aforementioned methods.

To stop the timer, invoke ``stop`` method. For local timers it is
recommended to use *disposable* pattern [#f1]_.

Code sample::

	import "sys_Timer.jnc"

	onTimer(int param) {
		// ...
	}

	int main() {
		// ...

		disposable sys.Timer timer;
		timer.startPeriodic(onTimer ~(1, 2), 1000);

		// ...
	} // <-- timer.stop will be called



.. rubric:: See also:

`sys.getTimestamp`

Methods
-------

.. index:: pair: function; start
.. _doxid-function_sys_timer_start:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	bool errorcode start(
		void function* func(),
		:ref:`uint64_t<doxid-typedef_uint64_t>` dueTime,
		:ref:`uint_t<doxid-typedef_uint_t>` interval
	)

Starts a new peridodic or non-periodic timer.

The function accepts three arguments. The first one, ``timerFunc``
specifies the function pointer to the timer function to be called when
the timer is due. The second one, ``dueTime``, specifies the *timestamp*
of the moment when the timer function should be *first* called. The last
one, ``period``, specifies the period in milliseconds for a periodic
timer, or ``0`` if this is a single-shot timer.

Returns ``true`` on success. If the timer could not be started, error
supplied by operating system is set and then the function returns
``false`` [#f2]_.

If the timer has been already started, ``start`` method stops the
previous timer first.

.. index:: pair: function; stop
.. _doxid-function_sys_timer_stop:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	void stop()

Stops a previously started timer, does nothing if the timer is not
started. This function always succeeds.

For local timers it is recommended to use *disposable* pattern [#f1]_.

.. index:: pair: function; startDueTimer
.. _doxid-function_sys_timer_startduetimer:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	bool errorcode startDueTimer(
		void function* func(),
		:ref:`uint64_t<doxid-typedef_uint64_t>` dueTime
	)

Starts a non-periodic due timer, i.e. you specify the *timestamp* of the
moment when your function should be called.

Technically calling startDueTimer is equivalent to calling ``start``
with the last ``interval`` argument set to ``0``.

.. index:: pair: function; startPeriodicTimer
.. _doxid-function_sys_timer_startperiodictimer:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	bool errorcode startPeriodicTimer(
		void function* func(),
		:ref:`uint_t<doxid-typedef_uint_t>` interval
	)

Starts a periodic timer, i.e. the timer will invoke your function each
``interval`` milliseconds.

This is probably the most common type of timer. Technically calling
startDueTimer is equivalent to calling ``start`` with the ``dueTime``
argument calculated as ``sys.getTimestamp() + interval``.

.. index:: pair: function; startSingleShotTimer
.. _doxid-function_sys_timer_startsingleshottimer:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	bool errorcode startSingleShotTimer(
		void function* func(),
		:ref:`uint_t<doxid-typedef_uint_t>` delay
	)

Starts a single-shot non-periodic timer, i.e. you specify the delay in
milliseconds after passing of which your function will be invoked.

Technically calling startDueTimer is equivalent to calling ``start``
with the ``dueTime`` argument calculated as
``sys.getTimestamp() + interval`` and ``interval`` set to ``0``.

Aliases
-------

.. index:: pair: alias; dispose
.. _doxid-alias_sys_timer_dispose:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	alias dispose = stop

Effectively makes ``sys.Timer`` a *disposable* class [#f1]_.


---------------------

.. rubric:: Footnotes

.. [#f1]

	|footnote-disposable|

.. [#f2]

	|footnote-errorcode|

