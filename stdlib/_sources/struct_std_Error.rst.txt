.. include:: def.rst
.. index:: pair: struct; std.Error
.. _doxid-type_std_error:

struct std.Error
================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This struct is used as a header to an error-describing buffer. :ref:`More...<details-type_std_error>`


.. ref-code-block:: jancy
	:class: doxyrest-overview-code-block

	
	struct Error {
		// fields
	
		:ref:`uint32_t<doxid-typedef_uint32_t>` :ref:`m_size<doxid-field_std_error_m_size>`;
		:ref:`std.Guid<doxid-type_std_guid>` :ref:`m_guid<doxid-field_std_error_m_guid>`;
		:ref:`uint32_t<doxid-typedef_uint32_t>` :ref:`m_code<doxid-field_std_error_m_code>`;

		// properties
	
		:ref:`string_t<doxid-typedef_string_t>` const property :ref:`m_description<doxid-property_std_error_m_description>`;
	};
.. _details-type_std_error:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This struct is used as a header to an error-describing buffer.

Often times error is completely described by ``std.Error`` struct -- for
example, ``errno``, ``NTSTATUS`` or ``WinError``. However, you can store as
much information as necessary to fully describe your error. If extra bytes
of information are required, they should follow the ``std.Error`` header.

Fields
------

.. index:: pair: variable; m_size
.. _doxid-field_std_error_m_size:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`uint32_t<doxid-typedef_uint32_t>` m_size

The full size of error-describing buffer. Should always be
``>= sizeof(std.Error)``.

.. index:: pair: variable; m_guid
.. _doxid-field_std_error_m_guid:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`std.Guid<doxid-type_std_guid>` m_guid

The ``GUID`` of the error. It tells Jancy runtime how to interpret
``m_code`` and the extra bytes of data following ``std.Error`` header.

.. index:: pair: variable; m_code
.. _doxid-field_std_error_m_code:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`uint32_t<doxid-typedef_uint32_t>` m_code

The numerical code of the error. The actual meaning of this code depends
on ``m_guid`` field. It may be ``errno``, or ``NTSTATUS``, or some
user-defined code.

Properties
----------

.. index:: pair: property; m_description
.. _doxid-property_std_error_m_description:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`string_t<doxid-typedef_string_t>` const property m_description

Creates and returns human-readable description of the error.

Jancy also supports a special formatter ``$!`` which if used inside
formatting literal expands into description of the last error:

.. ref-code-block::

	printf($"cannot open file: $!\n");

The code above is equivalent to:

.. ref-code-block::

	string_t s = `std.getLastError` ().m_description;
	printf($"cannot open file: $s\n");

