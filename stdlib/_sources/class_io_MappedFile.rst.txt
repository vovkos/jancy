.. include:: def.rst
.. index:: pair: class; io.MappedFile
.. _doxid-type_io_mappedfile:

class io.MappedFile
===================

.. toctree::
	:hidden:

Overview
~~~~~~~~

This class provides high level mapped access to the contents of
regular disk files. :ref:`More...<details-type_io_mappedfile>`


.. ref-code-block:: jancy
	:class: doxyrest-overview-code-block

	import "io_base.jncx"
	import "io_MappedFile.jnc"
	
	class MappedFile {
		// fields
	
		bool readonly :ref:`m_isOpen<doxid-field_io_mappedfile_m_isopen>`;

		// properties
	
		:ref:`size_t<doxid-typedef_size_t>` autoget property :ref:`m_dynamicViewLimit<doxid-property_io_mappedfile_m_dynamicviewlimit>`;
		:ref:`uint64_t<doxid-typedef_uint64_t>` const property :ref:`m_size<doxid-property_io_mappedfile_m_size>`;

		// construction
	
		:target:`construct<doxid-function_io_mappedfile_construct>`();
		:target:`destruct<doxid-function_io_mappedfile_destruct>`();

		// methods
	
		bool errorcode :ref:`open<doxid-function_io_mappedfile_open>`(
			:ref:`string_t<doxid-typedef_string_t>` name,
			:ref:`io.FileOpenFlags<doxid-type_io_fileopenflags>` flags = 0
		);
	
		void :ref:`close<doxid-function_io_mappedfile_close>`();
		bool errorcode :target:`setSize<doxid-function_io_mappedfile_setsize>`(:ref:`uint64_t<doxid-typedef_uint64_t>` size);
	
		void* errorcode :ref:`view<doxid-function_io_mappedfile_view>`(
			:ref:`uint64_t<doxid-typedef_uint64_t>` offset,
			:ref:`size_t<doxid-typedef_size_t>` size,
			bool isPermanent = false
		);
	
		void :target:`unmapAllViews<doxid-function_io_mappedfile_unmapallviews>`();

		// aliases
	
		alias :ref:`dispose<doxid-alias_io_mappedfile_dispose>` = close;
	};
.. _details-type_io_mappedfile:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class provides high level mapped access to the contents of
regular disk files.

From the programmer's point of view, ``io.MappedFile`` exposes the most
natural interface imaginable. You just tell: I want to access a region of
the file at *this* offset, and of *this* length. And you get a pointer to
this region(or ``null`` if this could not be done). That's it! Actual
mapping operations, aligning offsets and maintaining a database of
previously mapped views is happening behind the stage.

Views provided by ``io.MappedFile`` can be *permanent* or *dynamic*.
A pointer to a permanent view, as the name suggests, remains valid *all the
time* while the file is open. Pointers to *dynamic* views, on the other
hand, do expire. You can only access ``m_dynamicViewLimit`` views at the
same time. Expiration queue is organized in FIFO(first-in-first-out)
manner, but it is readjusted each time user requests access to the region
with ``view`` method(last accessed view is moved to the tail of the
expiration queue).

.. rubric:: Sample code:

.. ref-code-block::

	struct Hdr {
		uint32_t m_signature;
		uint32_t m_version;
		uint32_t m_sectionCount;
		// ...
	}

	struct SectionDesc {
		uint64_t m_offset;
		uint64_t m_size;
	}

	void foo(string_t fileName) {
		disposable io.MappedFile file;
		file.open(fileName, `io.FileOpenFlags.ReadOnly`);

		// permanent view of header
		Hdr const* hdr = file.view(0, sizeof(Hdr), true);

		size_t offset = sizeof(Hdr);
		for (
			size_t i = 0;
			i < hdr.m_sectionCount;
			i++, offset += sizeof(SectionDesc)
		) {
			SectionDesc const* sectionDesc = file.view(
				offset,
				sizeof(SectionDesc)
			);

			void const* section = file.view(
				sectionDesc.m_offset,
				sectionDesc.m_size
			);
			// ...
		}

	catch:
		// handle error
	}



.. rubric:: See also:

`io.File`

Fields
------

.. index:: pair: variable; m_isOpen
.. _doxid-field_io_mappedfile_m_isopen:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	bool readonly m_isOpen

Holds the open status for the mapped file, i.e. ``true`` if opened;
``false`` otherwise.

Properties
----------

.. index:: pair: property; m_dynamicViewLimit
.. _doxid-property_io_mappedfile_m_dynamicviewlimit:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-typedef_size_t>` autoget property m_dynamicViewLimit

Holds the maximum amount of *dynamic* views maintained in
``io.MappedFile`` internal database. Once dynamic view limit is
exhausted, the dynamic view which has not been accessed *the longest*,
is unmapped and released.

The required amount of dynamic view limit, of course, depends on the
particular algorithm used to access regions of the file -- i.e. how many
regions you need to access simultaneously.

.. index:: pair: property; m_size
.. _doxid-property_io_mappedfile_m_size:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`uint64_t<doxid-typedef_uint64_t>` const property m_size

This property is used for getting and setting file size.

Reading from this property returns current size of the file; writing to
it sets new size. If setting new size fails, IO error supplied by
operating system is set; then dynamic exception is thrown.

Methods
-------

.. index:: pair: function; open
.. _doxid-function_io_mappedfile_open:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	bool errorcode open(
		:ref:`string_t<doxid-typedef_string_t>` name,
		:ref:`io.FileOpenFlags<doxid-type_io_fileopenflags>` flags = 0
	)

Opens or creates a file, but no mappings are created.

The function accepts two arguments. The first one, ``name`` specifies
the name of the file/device. The second one, ``flags``, can be used to
specify open options. Check `io.FileOpenFlags` for the complete list of
options.

If file could not be opened, IO error supplied by operating system is
set and then the function returns ``false`` [#f1]_.

.. index:: pair: function; close
.. _doxid-function_io_mappedfile_close:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	void close()

Closes a previously opened file, does nothing if the file is not opened.
This function always succeeds.

Sometimes it may be convenient to use *disposable* pattern to ensure
timely invokation of ``close`` [#f2]_.

.. index:: pair: function; view
.. _doxid-function_io_mappedfile_view:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	void* errorcode view(
		:ref:`uint64_t<doxid-typedef_uint64_t>` offset,
		:ref:`size_t<doxid-typedef_size_t>` size,
		bool isPermanent = false
	)

Provides access to the region of the file at ``offset`` and ``size``
bytes long. The final, third argument is used to specify whether the
requested view should be *permanent* or *dynamic*.

Returns a pointer to the requested region, or ``null`` if mapping
operation failed [#f1]_.

Aliases
-------

.. index:: pair: alias; dispose
.. _doxid-alias_io_mappedfile_dispose:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	alias dispose = close

Effectively makes ``io.MappedFile`` a *disposable* class [#f2]_.


---------------------

.. rubric:: Footnotes

.. [#f1]

	|footnote-errorcode|

.. [#f2]

	|footnote-disposable|

