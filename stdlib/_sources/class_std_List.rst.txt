.. include:: def.rst
.. index:: pair: class; std.List
.. _doxid-type_std_list:

class std.List
==============

.. toctree::
	:hidden:

Overview
~~~~~~~~

This class provides a doubly linked list container for ``variant_t``
values. :ref:`More...<details-type_std_list>`


.. ref-code-block:: jancy
	:class: doxyrest-overview-code-block

	import "std_List.jnc"
	
	class List {
		// fields
	
		:ref:`std.ListEntry<doxid-type_std_listentry>`* readonly :ref:`m_head<doxid-field_std_list_m_head>`;
		:ref:`std.ListEntry<doxid-type_std_listentry>`* readonly :ref:`m_tail<doxid-field_std_list_m_tail>`;
		:ref:`size_t<doxid-typedef_size_t>` readonly :ref:`m_count<doxid-field_std_list_m_count>`;

		// methods
	
		void :ref:`clear<doxid-function_std_list_clear>`();
		void :ref:`takeOver<doxid-function_std_list_takeover>`(std.List* list);
		:ref:`std.ListEntry<doxid-type_std_listentry>`* errorcode :ref:`add<doxid-function_std_list_add>`(:ref:`variant_t<doxid-typedef_variant_t>` data);
		:ref:`std.ListEntry<doxid-type_std_listentry>`* errorcode :ref:`insertHead<doxid-function_std_list_inserthead>`(:ref:`variant_t<doxid-typedef_variant_t>` data);
		:ref:`std.ListEntry<doxid-type_std_listentry>`* errorcode :ref:`insertTail<doxid-function_std_list_inserttail>`(:ref:`variant_t<doxid-typedef_variant_t>` data);
	
		:ref:`std.ListEntry<doxid-type_std_listentry>`* errorcode :ref:`insertBefore<doxid-function_std_list_insertbefore>`(
			:ref:`variant_t<doxid-typedef_variant_t>` item,
			:ref:`std.ListEntry<doxid-type_std_listentry>`* before
		);
	
		:ref:`std.ListEntry<doxid-type_std_listentry>`* errorcode :ref:`insertAfter<doxid-function_std_list_insertafter>`(
			:ref:`variant_t<doxid-typedef_variant_t>` item,
			:ref:`std.ListEntry<doxid-type_std_listentry>`* before
		);
	
		void :ref:`moveToHead<doxid-function_std_list_movetohead>`(:ref:`std.ListEntry<doxid-type_std_listentry>`* entry);
		void :ref:`moveToTail<doxid-function_std_list_movetotail>`(:ref:`std.ListEntry<doxid-type_std_listentry>`* entry);
	
		void :ref:`moveBefore<doxid-function_std_list_movebefore>`(
			:ref:`std.ListEntry<doxid-type_std_listentry>`* entry,
			:ref:`std.ListEntry<doxid-type_std_listentry>`* before
		);
	
		void :ref:`moveAfter<doxid-function_std_list_moveafter>`(
			:ref:`std.ListEntry<doxid-type_std_listentry>`* entry,
			:ref:`std.ListEntry<doxid-type_std_listentry>`* before
		);
	
		:ref:`variant_t<doxid-typedef_variant_t>` :ref:`removeHead<doxid-function_std_list_removehead>`();
		:ref:`variant_t<doxid-typedef_variant_t>` :ref:`removeTail<doxid-function_std_list_removetail>`();
		:ref:`variant_t<doxid-typedef_variant_t>` :ref:`remove<doxid-function_std_list_remove>`(:ref:`std.ListEntry<doxid-type_std_listentry>`* entry);
	};
.. _details-type_std_list:

Detailed Documentation
~~~~~~~~~~~~~~~~~~~~~~

This class provides a doubly linked list container for ``variant_t``
values.

A typical sequence of steps when working with a doubly linked list usually
looks like this:

* Add items using *insert* methods: ``insertHead``, ``insertTail``,
  ``insertBefore``, ``insertAfter``;
* Remove items using *remove* methods: ``removeHead``, ``removeTail``,
  ``removeBefore``, ``removeAfter``, ``remove``;
* Iterate over items by starting with ``m_head`` or ``m_tail`` and then move
  to the next element by inspecting `std.ListEntry.m_next` or
  `std.ListEntry.m_prev`.

.. rubric:: Sample code:

.. ref-code-block::

	std.List list;

	// add items...

	int a[] = { 10, 20, 30, 40, 50, }

	for (size_t i = 0; i < countof(a); i++)
		list.insertTail(a[i]);

	// iterate over list...

	std.ListEntry* e = list.m_head;
	for (; e; e = e.m_next) {
		// access e.m_data...
	}



.. rubric:: See also:

`std.ListEntry`

Fields
------

.. index:: pair: variable; m_head
.. _doxid-field_std_list_m_head:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>`* readonly m_head

Holds a pointer to the *list head* (the first element of the list) or
``null`` if the list is empty.

.. index:: pair: variable; m_tail
.. _doxid-field_std_list_m_tail:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>`* readonly m_tail

Holds a pointer to the *list tail* (the last element of the list) or
``null`` if the list is empty.

.. index:: pair: variable; m_count
.. _doxid-field_std_list_m_count:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`size_t<doxid-typedef_size_t>` readonly m_count

Holds number of elements on the list.

Methods
-------

.. index:: pair: function; clear
.. _doxid-function_std_list_clear:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	void clear()

Removes all elements from the lists.

.. index:: pair: function; takeOver
.. _doxid-function_std_list_takeover:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	void takeOver(std.List* list)

Moves all the elements from the source list ``list`` to this list.

After the take-over, ``list`` will be empty and this list will contain
the same elements as ``list`` originally did.

This operation is performed in constant time no matter the size of the
source list -- so it's always more efficient than clearing the list
first and then adding all the items from the source list in a loop.

.. index:: pair: function; add
.. _doxid-function_std_list_add:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>`* errorcode add(:ref:`variant_t<doxid-typedef_variant_t>` data)

Adds item ``data``  to the list.

Returns a pointer to the new `std.ListEntry`.

Equivalent to ``insertTail``.

.. index:: pair: function; insertHead
.. _doxid-function_std_list_inserthead:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>`* errorcode insertHead(:ref:`variant_t<doxid-typedef_variant_t>` data)

Inserts item ``data`` to the head of the list.

Returns a pointer to the new `std.ListEntry`.

.. index:: pair: function; insertTail
.. _doxid-function_std_list_inserttail:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>`* errorcode insertTail(:ref:`variant_t<doxid-typedef_variant_t>` data)

Inserts item ``data`` to the tail of the list.

Returns a pointer to the new `std.ListEntry`.

.. index:: pair: function; insertBefore
.. _doxid-function_std_list_insertbefore:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>`* errorcode insertBefore(
		:ref:`variant_t<doxid-typedef_variant_t>` item,
		:ref:`std.ListEntry<doxid-type_std_listentry>`* before
	)

Inserts item ``data`` before the item entry pointed to by ``entry``
argument.

If ``entry == null`` then this method is equivalent to ``insertTail``.

Returns a pointer to the new `std.ListEntry`.

.. index:: pair: function; insertAfter
.. _doxid-function_std_list_insertafter:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`std.ListEntry<doxid-type_std_listentry>`* errorcode insertAfter(
		:ref:`variant_t<doxid-typedef_variant_t>` item,
		:ref:`std.ListEntry<doxid-type_std_listentry>`* before
	)

Inserts item ``data`` after the item entry pointed to by ``entry``
argument.

If ``entry == null`` then this method is equivalent to ``insertHead``.

Returns a pointer to the new `std.ListEntry`.

.. index:: pair: function; moveToHead
.. _doxid-function_std_list_movetohead:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	void moveToHead(:ref:`std.ListEntry<doxid-type_std_listentry>`* entry)

Moves item entry pointed to by ``entry`` to the head of the list.

After this call ``m_head`` will be pointing to ``entry``.

.. index:: pair: function; moveToTail
.. _doxid-function_std_list_movetotail:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	void moveToTail(:ref:`std.ListEntry<doxid-type_std_listentry>`* entry)

Moves item entry pointed to by  ``entry`` to the tail of the list.

After this call ``m_tail`` will be pointing to ``entry``.

.. index:: pair: function; moveBefore
.. _doxid-function_std_list_movebefore:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	void moveBefore(
		:ref:`std.ListEntry<doxid-type_std_listentry>`* entry,
		:ref:`std.ListEntry<doxid-type_std_listentry>`* before
	)

Moves item entry pointed to by ``entry`` before item entry pointed to
by  ``before``.

If ``entry == null`` then this method is equivalent to ``moveToTail``.

.. index:: pair: function; moveAfter
.. _doxid-function_std_list_moveafter:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	void moveAfter(
		:ref:`std.ListEntry<doxid-type_std_listentry>`* entry,
		:ref:`std.ListEntry<doxid-type_std_listentry>`* before
	)

Moves item entry pointed to by  ``entry`` after item entry pointed to by
``after``.

If ``after == null`` then this method is equivalent to ``moveToHead``.

.. index:: pair: function; removeHead
.. _doxid-function_std_list_removehead:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`variant_t<doxid-typedef_variant_t>` removeHead()

Removes head item entry.

Returns the value of `std.ListEntry.m_data` field of the removed list
head.

If list is empty at the moment of removal does nothing and returns
``null``.

.. index:: pair: function; removeTail
.. _doxid-function_std_list_removetail:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`variant_t<doxid-typedef_variant_t>` removeTail()

Removes tail item entry.

Returns the value of `std.ListEntry.m_data` field of the removed list
tail.

If list is empty at the moment of removal does nothing and returns
``null``.

.. index:: pair: function; remove
.. _doxid-function_std_list_remove:

.. ref-code-block:: jancy
	:class: doxyrest-title-code-block

	:ref:`variant_t<doxid-typedef_variant_t>` remove(:ref:`std.ListEntry<doxid-type_std_listentry>`* entry)

Removes item entry pointed to by ``entry``.

Returns the value of ``entry.m_data`` field.

