import "io_usb.jncx"
import "io_UsbEnumerator.jnc"

void printUsbEndpointDescriptor(io.UsbEndpointDescriptor const* endpointDescriptor) {
	printf("      Endpoint:   0x%02x\n", endpointDescriptor.m_endpointId);
	printf("      Direction:  %s\n", (endpointDescriptor.m_endpointId & 0x80) ? "IN" : "OUT");
	printf("      Type:       %s\n", typeof(io.UsbTransferType).getValueString(endpointDescriptor.m_transferType));
	printf("      Max packet: %d\n", endpointDescriptor.m_maxPacketSize);
}

void printUsbIfaceDescriptor(io.UsbInterfaceDescriptor const* ifaceDescriptor) {
	printf("    Interface:   %d\n", ifaceDescriptor.m_interfaceId);
	printf("    Alt setting: %d\n", ifaceDescriptor.m_altSettingId);
	printf("    Class:       %02x - %s\n", ifaceDescriptor.m_class, typeof(io.UsbClass).getValueString(ifaceDescriptor.m_class));
	printf("    Subclass:    %02x\n", ifaceDescriptor.m_subClass);
	printf("    Protocol:    %d\n", ifaceDescriptor.m_protocol);
	printf("    Endpoints:   %d\n", ifaceDescriptor.m_endpointCount);

	for (size_t i = 0; i < ifaceDescriptor.m_endpointCount; i++) {
		printf("\n");
		printUsbEndpointDescriptor(&ifaceDescriptor.m_endpointDescriptorTable[i]);
	}
}

void printUsbConfigurationDescriptor(io.UsbConfigurationDescriptor const* configDescriptor) {
	printf("  Configuration: %d\n", configDescriptor.m_configurationId);
	printf("  Max power:     %d x(2|8) mA\n", configDescriptor.m_maxPower);
	printf("  Interfaces:    %d\n", configDescriptor.m_interfaceCount);

	for (size_t i = 0; i < configDescriptor.m_interfaceCount; i++) {
		io.UsbInterfaceDescriptor const* ifaceDescriptor = &configDescriptor.m_interfaceDescriptorTable[i];
		for (; ifaceDescriptor; ifaceDescriptor = ifaceDescriptor.m_nextAltSettingInterfaceDescriptor) {
			printf("\n");
			printUsbIfaceDescriptor(ifaceDescriptor);
		}
	}
}

void printUsbDevice(io.UsbDeviceEntry const* deviceEntry) {
	printf(
		"Vendor:   %04x - %s/%s\n", 
		deviceEntry.m_vendorId, 
		deviceEntry.m_manufacturer, 
		deviceEntry.m_manufacturerDescriptor
	);

	printf(
		"Product:  %04x - %s/%s\n",
		deviceEntry.m_productId,
		deviceEntry.m_description,
		deviceEntry.m_productDescriptor
	);

	printf("Serial:   %s\n", deviceEntry.m_serialNumberDescriptor);
	printf("Class:    %02x - %s\n", deviceEntry.m_class, typeof(io.UsbClass).getValueString(deviceEntry.m_class));
	printf("Subclass: %02x\n", deviceEntry.m_subClass);
	printf("Bus:      %d\n", deviceEntry.m_device.m_bus);
	printf("Address:  %d\n", deviceEntry.m_address);
	printf("Port:     %d\n", deviceEntry.m_port);
	printf("Speed:    %s\n", typeof(io.UsbSpeed).getValueString(deviceEntry.m_speed));

	io.UsbDeviceDescriptor const* deviceDescriptor = deviceEntry.m_device.m_deviceDescriptor;
	printf("Configs:  %d\n", deviceDescriptor.m_configurationCount);

	for (size_t i = 0; i < deviceDescriptor.m_configurationCount; i++) {
		printf("\n");
		printUsbConfigurationDescriptor(&deviceDescriptor.m_configurationDescriptorTable[i]);
	}
}

int main() {
	printf("Enumerating USB devices...\n");

	io.UsbDeviceEntry const* deviceEntry = io.enumerateUsbDevices(io.UsbEnumFlags.All);
	for (; deviceEntry; deviceEntry = deviceEntry.m_next) {
		printUsbDevice(deviceEntry);
		printf("\n");
	}

	return 0;
}
