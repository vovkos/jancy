int main() {
	printf("compiling\n");

	jnc.Regex regex;
	regex.createSwitch();
	regex.compileSwitchCase(r"[0-9]+");
	regex.compileSwitchCase(r".");
	regex.finalizeSwitch();

	printf("matching\n");

	jnc.RegexExecResult result;
	jnc.RegexState state(jnc.RegexExecFlags.AnchorDataBegin | jnc.RegexExecFlags.Stream, 1000);

	result = try regex.exec(state, "\x2e123456\x2e");
	printf("regex result: %d, match offset: %d, match length: %d, match: %s\n", result, state.m_match.m_offset, state.m_match.m_length, state.m_match.m_text);
	assert(result == jnc.RegexExecResult.Match && state.m_matchSwitchCaseId == 1 && state.m_match.m_length == 1);

	result = try regex.exec(state, "123456");
	printf("regex result: %d\n", result);
	assert(result == jnc.RegexExecResult.Continue);

	result = try regex.exec(state, "\x2e");
	printf("regex result: %d, match offset: %d, match length: %d\n", result, state.m_match.m_offset, state.m_match.m_length);
	assert(result == jnc.RegexExecResult.MatchOffsetsOnly && state.m_matchSwitchCaseId == 0 && state.m_match.m_length == 6);

	result = try regex.exec(state, "123456");
	result = try regex.eof(state);
	printf("regex result: %d, match offset: %d, match length: %d, match: %s\n", result, state.m_match.m_offset, state.m_match.m_length, state.m_match.m_text);
	assert(result == jnc.RegexExecResult.Match && state.m_matchSwitchCaseId == 0 && state.m_match.m_length == 6);

	return 0;

catch:
	printf($"error: $!\n");
	return -1;
}
