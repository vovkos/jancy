import "io_base.jncx"
import "io_Socket.jnc"

void foo(io.Protocol proto, io.SocketAddress const* a) {
	printf("foo: address: %s\n", a.getString ());
	std.setErrno(5);
	throw;
}


void openSocket() {
	io.SocketAddress address;

nestedscope:

	new int;

//	address = *(io.SocketAddress const*) m_adapterCombo.m_currentData;
	address.m_ip4.m_family = io.AddressFamily.Ip4;
	address.m_ip4.m_port = 10; // (uint16_t) atoi (portString); // same for IPv4/IPv6
	address.m_ip4.m_address.m_i32 = 0x7f000001;

	printf("openSocket - pre foo: address: %s\n", address.getString ());

	foo(io.Protocol.Udp, &address);

/*	m_socket.open(io.Protocol.Udp, &address);

/*	printf("openSocket - 5\n");

	address = m_socket.m_address;

	printf("openSocket - 6\n");

	writeLog(UdpRecordCode.Open, &address, sizeof(address));

	printf("openSocket - 7\n");

	m_state = State.Opened;
	waitSocketEvents(); */

catch:
	std.Error const* error = std.getLastError();
	printf("openSocket - catch: address: %s, error: %s\n", address.getString (), error.m_description);
}

void foo() {
	int x = 10;

	{
		new int;
		int* a;

		{
			int* b;
		}
	}
}

int main() {
	openSocket();
	foo();

	for (int i = 0; i < 10; i++)
		$"i = $i";

	return 0;
}
