//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "sys_Thread.jnc"

//..............................................................................

class Foo {
	intptr_t m_tid;
	intptr_t m_oid;

	construct(
		intptr_t tid,
		intptr_t oid
	) {
		m_tid = tid;
		m_oid = oid;
		printf("Foo.construct(this = %x) { m_tid =  %d; m_oid = %d; } \n", this, m_tid, m_oid);
	}

	destruct() {
		printf("Foo.destruct (this = %x) { m_tid =  %d; m_oid = %d; } \n", this, m_tid, m_oid);
	}
}

void threadProc() {
	intptr_t tid = sys.getCurrentThreadId();

	printf("+threadProc %d\n", tid);

	for (intptr_t i = 0; i < 100; i++) {
		new Foo(tid, i);
	}

	printf("-threadProc %d\n", tid);
}

int main() {
	printf("main ()\n");

	sys.Thread* threadTable[10];
	for (size_t i = 0; i < countof(threadTable); i++) {
		threadTable[i] = new sys.Thread;
		threadTable[i].start(threadProc);
	}

	printf("waiting for threads...\n");

	for (size_t i = 0; i < countof(threadTable); i++)
		threadTable[i].waitAndClose();

	printf("exiting main...\n");
	return 0;
}

//..............................................................................
