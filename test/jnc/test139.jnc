// testing the new `pragma` directive

//..............................................................................

pragma(Alignment, 1)

struct Alignment1
{
	char m_c;
	int m_i;
	short m_s;
	long m_l;
}

pragma(Alignment, default)

struct Alignment8
{
	char m_c;
	int m_i;
	short m_s;
	long m_l;
}

//..............................................................................

pragma(ExposedEnums, true)

enum Enum1
{
	Enum1_Value1,
}

pragma(ExposedEnums, default)

enum Enum2
{
	Value2,
}

//..............................................................................

pragma(ThinPointers, true)

char* g_p1;
void function* g_p2();

pragma(ThinPointers, default)

char* g_p3;
void function* g_p4();

//..............................................................................

int main()
{
	printf("sizeof(Alignment1) %d\n", sizeof(Alignment1));
	printf("sizeof(Alignment8) %d\n", sizeof(Alignment8));

	assert(sizeof(Alignment1) == 15);
	assert(sizeof(Alignment8) == 24);

	Enum1 a = Enum1_Value1;
	Enum2 b = Enum2.Value2;
	// Enum2 c = Value2; // <-- error

	printf("sizeof(g_p1) %d\n", sizeof(g_p1));
	printf("sizeof(g_p2) %d\n", sizeof(g_p2));
	printf("sizeof(g_p3) %d\n", sizeof(g_p3));
	printf("sizeof(g_p4) %d\n", sizeof(g_p4));

	assert(sizeof(g_p1) == sizeof(intptr));
	assert(sizeof(g_p2) == sizeof(intptr));
	assert(sizeof(g_p3) == sizeof(intptr) * 2);
	assert(sizeof(g_p4) == sizeof(intptr) * 2);

	return 0;
}

//..............................................................................
