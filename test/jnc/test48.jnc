//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

char const* g_data;
size_t g_dataOffset;

bool errorcode scanCommand(
	jnc.RegexState* state,
	char const* p,
	size_t length = -1
) {
	if (length == -1)
		length = strlen(p);

	char const* end = p + length;

	do {
		reswitch (state, p, end - p) {
		case "<[^>]+>":
			size_t length = state.m_currentOffset - g_dataOffset;

			char const* chunk = strdup(g_data, length);

			printf("%s\n", chunk);
			printf("inband '%s'\n", state.m_match.m_text);

			g_data += length;
			g_dataOffset += length;
			break;

		case ".":
			// ignore
			break;
		}

		p += state.m_consumedLength;
	} while (p < end || state.m_replayLength)

	return true;
}

int main() {
	printf("main ()\n");

	jnc.RegexState state(jnc.RegexStateFlags.Lexer | jnc.RegexStateFlags.Incremental);

	try {
		g_data = "abc <ab";
		g_dataOffset = 0;
		scanCommand(state, g_data, strlen(g_data));

		size_t length = state.m_currentOffset - g_dataOffset;
		char const* chunk = strdup(g_data, length);
		printf("%s", chunk);
		g_dataOffset += length;

		g_data = "out> <gr> rr";
		scanCommand(state, g_data, strlen(g_data));

		length = state.m_currentOffset - g_dataOffset;
		chunk = strdup(g_data, length);
		printf("%s", chunk);
		g_dataOffset += length;

		g_data = "ab <versi";
		scanCommand(state, g_data, strlen(g_data));

		length = state.m_currentOffset - g_dataOffset;
		chunk = strdup(g_data, length);
		printf("%s", chunk);
		g_dataOffset += length;

		g_data = "on> aboutb";
		scanCommand(state, g_data, strlen(g_data));

		length = state.m_currentOffset - g_dataOffset;
		chunk = strdup(g_data, length);
		printf("%s", chunk);
		g_dataOffset += length;

	catch:
		printf("recognition error\n");
	}

	printf("\n");
	return 0;
}

//..............................................................................
