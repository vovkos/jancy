//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

bool errorcode scanPacket(
	jnc.RegexState* state,
	char const* p,
	size_t length = -1
) {
	if (length == -1)
		length = strlen(p);

	char const* end = p + length;

	do {
		reswitch (state, p, end - p) {
		case r"open[ \t]*\d*[\r\n]":
			printf("command = open\n%s\n", state.m_match.m_text);
			break;

		case r"close[ \t]*\d*[\r\n]":
			printf("command = close\n%s\n", state.m_match.m_text);
			break;

		case r"connect[ \t]*\d*[\r\n]":
			printf("command = connect\n%s\n", state.m_match.m_text);
			break;

		case r"\s+":
			break;

		default:
			if (!state.m_consumedLength)
				return false;

			assert(state.m_consumedLength == end - p);
		}

		p += state.m_consumedLength;
	} while (p < end || state.m_replayLength);

	return true;
}

int main() {
	printf("main ()\n");

	jnc.RegexState state(jnc.RegexStateFlags.Lexer | jnc.RegexStateFlags.Incremental);

	int l = 0;

	try {
		scanPacket(state, "op");
		scanPacket(state, "en 12\ncon");
		scanPacket(state, "nect5\r cl");
		scanPacket(state, "ose\t7777");

		l = 10;

		printf("the following will fail ('close' has no [\\r\\n]\n");

		scanPacket(state, null);
		assert(false); // shouldn't get here

	catch:
		printf("recognition error\n");
		assert(l == 10);
		return 0;
	}

	printf("*** shouldn't get here\n");
	return -1;
}

//..............................................................................
