//..............................................................................
//
// Modbus TCP log record declarations and representer
//

import "log_Representation.jnc"
import "crc16.jnc"
import "io_Modbus.jnc"

//..............................................................................

void representModbusTcpAdu(
	log.Representation* representation,
	io.ModbusRole role,
	void const* p,
	size_t size,
	uint_t foldFlags
) {
	io.ModbusTcpAduHdr const* aduHdr = (io.ModbusTcpAduHdr const*)p;
	io.ModbusPduHdr const* pduHdr = (io.ModbusPduHdr const*)(aduHdr + 1);

	representation.m_lineAttr.m_backColor = ui.StdColor.PastelGray;
	representation.m_lineAttr.m_iconIdx = role == io.ModbusRole.Master ?
		log.StdLogIcon.TxPacket :
		log.StdLogIcon.RxPacket;

	size_t checksumOffset = size - sizeof(uint16_t);
	uint16_t actualChecksum = *(uint16_t const*)(p + checksumOffset);
	uint16_t expectedChecksum = crc16_ansi(p, checksumOffset, 0xffff);

	if (!(foldFlags & 1)) {
		representation.addHyperText(
			$"[\e^+1\e[34m+\e[m] \e[1mMODBUS-TCP\e[m TID: \e[34m%1\e[m Dev: \e[34m%2\e[m %3" (
			aduHdr.m_transactionId,
			aduHdr.m_deviceAddress,
			getModbusPduDigest(role, pduHdr)
		));
	} else {
		representation.addHyperText(
			"[\e^-1\e[34m-\e[m]\n"
			"\e[1mADU-TCP\e[m\n"
			$"    TID:       \e^!%1,%2\e[34m%3\e[m\n"
			$"    Protocol:  \e^!%4,%5\e[34m%6\e[m\n"
			$"    Length:    \e^!%7,%8\e[34m%9\e[m\n"
			$"    Device:    \e^!%10,%11\e[34m%12\e[m" (
			offsetof(aduHdr.m_transactionId),
			sizeof(aduHdr.m_transactionId),
			aduHdr.m_transactionId,

			offsetof(aduHdr.m_protocol),
			sizeof(aduHdr.m_protocol),
			aduHdr.m_protocol,

			offsetof(aduHdr.m_length),
			sizeof(aduHdr.m_length),
			aduHdr.m_length,

			offsetof(aduHdr.m_deviceAddress),
			sizeof(aduHdr.m_deviceAddress),
			aduHdr.m_deviceAddress
		));

		representModbusPdu(
			representation,
			role,
			pduHdr,
			sizeof(io.ModbusTcpAduHdr),,
			foldFlags
		);

		representation.m_lineAttr.m_backColor = ui.ColorFlags.Undefined;
		representation.m_lineAttr.m_textColor = ui.StdColor.BrightBlack;
		representation.addBin(p, size);

		ui.TextAttr attr;
		attr.m_backColor = ui.ColorFlags.Undefined;
		attr.m_textColor = ui.StdColor.Magenta;

		representation.retroColorize(-size, sizeof(io.ModbusTcpAduHdr), attr);
	}
}

//..............................................................................
