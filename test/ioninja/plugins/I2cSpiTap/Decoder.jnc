//..............................................................................
//
// I2C protocol decoder
//

import "std_Buffer.jnc"

//..............................................................................

class Decoder {
	enum Defaults {
		BufferSize = 1024, // 8 * 1024, // 8K
	}

protected:
	log.Writer* m_logWriter;
	std.Buffer m_buffer;

public:
	construct(log.Writer* logWriter) {
		m_logWriter = logWriter;
		m_buffer.setSize(Defaults.BufferSize);
	}

	abstract reset();

	abstract decode(
		uint64_t timestamp,
		void const thin* p,
		size_t size
	);

protected:
	void writeLogUnexpectedCode(
		uint64_t timestamp,
		uint_t code,
		uint_t state
	);
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void Decoder.writeLogUnexpectedCode(
	uint64_t timestamp,
	uint_t code,
	uint_t state
) {
	struct Params {
		uint_t m_code;
		uint_t m_state;
	}

	Params params;
	params.m_code = code;
	params.m_state = state;

	m_logWriter.write(timestamp, I2cSpiTapLogRecordCode.UnexpectedCode, &params, sizeof(params));
}

//..............................................................................

