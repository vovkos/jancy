//..............................................................................
//
// USB Monitor log epresenter
//

import "log_Representation.jnc"
import "io_usbmon.jncx"
import "io_UsbMonEnumerator.jnc"
import "UsbMonLogRecordCode.jnc"

//..............................................................................

bool representUsbMonLog(
	log.Representation* representation,
	uint64_t recordCode,
	void const* p,
	size_t size,
	uint_t foldFlags
) {
	switch (recordCode) {
	case UsbMonLogRecordCode.CaptureStarted:
		CaptureStartedParams const* params = (CaptureStartedParams const*)p;
		char const* description = (char const*)(params + 1);

		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;

		char const* string;
		char const* captureDevicePrefix = params.m_osKind == sys.OsKind.Windows ?
			"USBPcap" :
			"usbmon";

		if (!(foldFlags & 1))
			string =
				$"[\e^+1\e[34m+\e[m] Capture started on \e[34m%1%2:%(3;03d)"
				$" - \e[34m%4\e[m"(
					captureDevicePrefix,
					params.m_captureDeviceId,
					params.m_address,
					description
				);
		else {
			char const* manufacturer = (char const*)(description + strlen(description) + 1);
			char const* driver = (char const*)(manufacturer + strlen(manufacturer) + 1);

			string =
				$"[\e^-1\e[34m-\e[m] Capture started on \e[34m%1%2:%(3;03d)\n"
				$"    \e[90mDescription:  \e[34m%4\n"
				$"    \e[90mManufacturer: \e[34m%5\n"
				$"    \e[90mDriver:       \e[34m%6\n"
				$"    \e[90mSpeed:        \e[34m%7"(
					captureDevicePrefix,
					params.m_captureDeviceId,
					params.m_address,
					description,
					manufacturer,
					driver,
					typeof(io.UsbSpeed).getValueString(params.m_speed)
				);
		}

		representation.addHyperText(string);
		break;

	case UsbMonLogRecordCode.CaptureStopped:
		representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Disconnect;
		representation.m_lineAttr.m_backColor = log.StdLogColor.Disconnect;
		representation.addHyperText("Capture stopped");
		break;

	case UsbMonLogRecordCode.ControlTransfer:
		io.UsbMonControlSetup const* setup = (io.UsbMonControlSetup const*)p;
		representation.m_lineAttr.m_backColor = ui.StdColor.PastelGray;
		representation.m_lineAttr.m_iconIdx = setup.m_requestType.m_direction ?
			log.StdLogIcon.Rx :
			log.StdLogIcon.Tx;

		char const* recipient = typeof(io.UsbMonControlRecipient).getValueString(setup.m_requestType.m_recipient);
		char const* type = typeof(io.UsbMonControlType).getValueString(setup.m_requestType.m_type);
		char const* direction = typeof(io.UsbMonControlDirection).getValueString(setup.m_requestType.m_direction);
		char const* request = typeof(io.UsbMonControlStdRequest).getValueString(setup.m_request);

		char const* string = !(foldFlags & 1) ?
			$"[\e^+1\e[34m+\e[m] \e[1mCONTROL\e[m "
			$"%1 %2 %3 "
			$"Req: \e[34m%4\e[m "
			$"Val: \e[34m0x%(5;04x)\e[m "
			$"Idx: \e[34m0x%(6;04x)"(
				recipient,
				type,
				direction,
				request,
				setup.m_value,
				setup.m_index
			) :
			$"[\e^-1\e[34m-\e[m] \e[1mCONTROL\e[m\n"
			$"    \e[90mRequest type: \e[34m0x%(1;02x)\n"
			$"    \e[90m  Recipient:  \e[34m%2\n"
			$"    \e[90m  Type:       \e[34m%3\n"
			$"    \e[90m  Direction:  \e[34m%4\n"
			$"    \e[90mRequest:      \e[34m%5\n"
			$"    \e[90mValue:        \e[34m0x%(6;04x)\n"
			$"    \e[90mIndex:        \e[34m0x%(7;04x)\n"
			$"    \e[90mLength:       \e[34m%8"(
				setup.m_requestType.m_value,
				recipient,
				type,
				direction,
				request,
				setup.m_value,
				setup.m_index,
				setup.m_length
			);

		representation.addHyperText(string);
		break;

	case UsbMonLogRecordCode.BulkInterruptTransfer:
		BulkInterruptTransferParams const* params = (BulkInterruptTransferParams const*)p;
		representation.m_lineAttr.m_backColor = ui.StdColor.PastelGray;
		representation.m_lineAttr.m_iconIdx = (params.m_endpoint & 0x80) ?
			log.StdLogIcon.Rx :
			log.StdLogIcon.Tx;

		representation.addHyperText(
			$"%1\e[m \e[34mEP%2"(
				params.m_type == io.UsbMonTransferType.Bulk ? "\e[1;35mBULK" : "\e[1;36mINTERRUPT",
				params.m_endpoint & ~0x80
			)
		);
		break;

	case UsbMonLogRecordCode.IsochronousTransfer:
		IsochronousTransferParams const* params = (IsochronousTransferParams const*)p;

		representation.m_lineAttr.m_backColor = ui.StdColor.PastelGray;
		representation.m_lineAttr.m_iconIdx = (params.m_endpoint & 0x80) ?
			log.StdLogIcon.Rx :
			log.StdLogIcon.Tx;

		representation.addHyperText($"\e[1;33mISOCHRONOUS\e[m \e[34mEP$(params.m_endpoint & ~0x80)");
		break;

	default:
		return false;
	}

	return true;
}

//..............................................................................
