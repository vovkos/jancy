//..............................................................................
//
// Serial Monitor over SSH session
//

import "doc_Session.jnc"
import "iox_SshChannel.jnc"
import "ui_Dialog.jnc"
import "ui_History.jnc"
import "ui_SocketUi.jnc"
import "ui_SshPropertySet.jnc"
import "ui_BufferPropertySet.jnc"
import "ui_StdSessionInfoSet.jnc"
import "log_ThroughputCalc.jnc"
import "log_ChecksumCalc.jnc"
import "SerialMonitor_mi.jnc"
import "std_Buffer.jnc"

using extension ui.ComboBoxHistory;

//..............................................................................

class SshSerialMonSession: doc.Session {
protected:
	alias State = iox.SshChannel.State;

	enum Defaults {
		ServerPort = 22,
	}

	enum ActionId {
		Connect,
		_Count,
	}

	enum IconId {
		Connect,
		Disconnect,
		_Count,
	}

	enum StatusPaneId {
		RemoteAddress,
		State,
		_Count,
	}

protected:
	// SSH channel & MI decoder

	iox.SshChannel m_ssh;
	SerialMonitor_mi m_monitor; // device monitor machine interface proxy

	// toolbar, status bar & menu

	ui.Action* m_actionTable[ActionId._Count];
	ui.Icon* m_iconTable[IconId._Count];
	ui.StatusPane* m_statusPaneTable[StatusPaneId._Count];
	ui.ComboBox* m_addressCombo;
	ui.ComboBox* m_portCombo;
	ui.LoginDlg* m_loginDlg;

	// property grid

	ui.SocketPropertySet m_socketPropertySet;
	ui.SshPropertySet m_sshPropertySet;
	ui.BufferPropertySet m_bufferPropertySet;

	// information grid

	ui.StdSessionInfoSet m_stdSessionInfoSet;
	ui.ThroughputInfoSet m_throughputInfoSet;
	ui.ChecksumInfoSet m_checksumInfoSet;

	// ui reactor

	reactor m_uiReactor;

public:
	construct(doc.PluginHost* pluginHost);

	bool errorcode connect();
	void disconnect();

	override void load(doc.Storage* storage);
	override void save(doc.Storage* storage);
	override void updateProperties();
	override bool errorcode applyProperties();
	override void restoreDefaultProperties();

	override bool errorcode connectSession() {
		return m_sessionConnectionState ? true : connect();
	}

	override void disconnectSession() {
		disconnect();
	}

protected:
	void onConnect() {
		m_ssh.m_state ? disconnect() : try connect();
	}

	void onComboEnter() {
		try connect();
	}

	void onConnected() {
		m_stdSessionInfoSet.startSession(m_pluginHost.m_mainThreadScheduler);
	}

	void onDisconnected() {
		m_stdSessionInfoSet.endSession();
	}

	void onIncomingData(
		void const* p,
		size_t size
	) {
		m_monitor.write(p, size);
	}

	void onLoginDlgCompleted(
		string_t userName,
		ui.AuthenticationMethod authenticationMethod,
		string_t privateKeyFileName
	);

	void createUi();
	iox.SshChannel.ConnectParams const* createConnectParams();
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

SshSerialMonSession.construct(doc.PluginHost* pluginHost) {
	basetype.construct(pluginHost);
	m_monitor.construct(pluginHost.m_log.m_writer);
	m_ssh.construct(pluginHost);

	m_ssh.m_onLoginDlgCompleted += onLoginDlgCompleted;
	m_ssh.m_onConnected += onConnected;
	m_ssh.m_onDisconnected += onDisconnected;
	m_ssh.m_onIncomingData += onIncomingData;

	createUi();

	pluginHost.m_log.addSelectionProcessor(log.ThroughputCalcRangeProcessor.factory~(m_throughputInfoSet));
	pluginHost.m_log.addSelectionProcessor(log.ChecksumCalcRangeProcessor.factory~(m_checksumInfoSet));
}

void SshSerialMonSession.createUi() {
	// toolbar

	m_pluginHost.m_toolBar.addLabel("Address:");
	m_addressCombo = m_pluginHost.m_toolBar.addComboBox(-1);
	m_addressCombo.m_isEditable = true;
	m_addressCombo.m_onReturnPressed += onComboEnter;
	m_addressCombo.m_placeholderText = "Enter a remote IP or hostname...";

	m_pluginHost.m_toolBar.addSpacing();
	m_pluginHost.m_toolBar.addLabel("Port:");
	m_portCombo = m_pluginHost.m_toolBar.addComboBox(-1);
	m_portCombo.m_isEditable = true;
	m_portCombo.m_onReturnPressed += onComboEnter;
	m_portCombo.m_placeholderText = "Enter a serial port name...";

	m_iconTable[IconId.Connect] = new ui.Icon("images/capture.png");
	m_iconTable[IconId.Disconnect] = new ui.Icon("images/pause.png");

	m_actionTable[ActionId.Connect] = createAction("Connect && capture", m_iconTable [IconId.Connect]);
	m_actionTable[ActionId.Connect].m_onTriggered += onConnect;

	// status bar

	m_statusPaneTable[StatusPaneId.RemoteAddress] = m_pluginHost.m_statusBar.addPane(, 100);
	m_statusPaneTable[StatusPaneId.RemoteAddress].m_color = ui.StdColor.Blue;
	m_statusPaneTable[StatusPaneId.State] = m_pluginHost.m_statusBar.addPane(, 80);

	// property grid

	ui.GroupProperty* group = m_pluginHost.m_propertyGrid.createGroupProperty(
		"TCP connection",
		"TCP-specific connection settings"
	);

	m_socketPropertySet.createProperties(m_pluginHost.m_propertyGrid, group);
	m_socketPropertySet.m_defaultRemotePort = Defaults.ServerPort;

	group = m_pluginHost.m_propertyGrid.createGroupProperty(
		"SSH connection",
		"SSH-specific connection settings"
	);

	m_sshPropertySet.createProperties(
		m_pluginHost.m_propertyGrid,
		group,,
		ui.SshPropertySet.PropertyId.UserName |
		ui.SshPropertySet.PropertyId.AuthenticationMethod |
		ui.SshPropertySet.PropertyId.RememberLastPassword
	);

	m_bufferPropertySet.createPropertiesGrouped(
		m_pluginHost.m_propertyGrid,,,
		ui.BufferPropertySet.PropertyId.All & ~ui.BufferPropertySet.PropertyId.ReadParallelism
	);

	// information grid

	ui.InformationGroup* infoGroup = m_pluginHost.m_informationGrid.createGroup("Serial monitor over SSH");

	m_stdSessionInfoSet.create(m_pluginHost.m_txRxStats, m_pluginHost.m_informationGrid, infoGroup);
	m_throughputInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);
	m_checksumInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);

	m_pluginHost.m_propertyGrid.resizeNameColumnToContents();
	m_pluginHost.m_informationGrid.resizeNameColumnToContents();

	m_uiReactor.start();
	m_sshPropertySet.m_uiReactor.start();
}

bool errorcode SshSerialMonSession.connect() {
	disconnect();
	startSession();

	if (!m_portCombo.m_currentText) {
		std.setError("port name not specified");
		m_logWriter.writeLastError(log.StdRecordCode.Error);
		return false;
	}

	m_monitor.reset();
	m_addressCombo.addEditTextToHistory();
	m_portCombo.addEditTextToHistory();
	return m_ssh.connect(m_addressCombo.m_editText, createConnectParams());

}

void SshSerialMonSession.disconnect() {
	if (!m_ssh.m_state)
		return;

	m_ssh.close();
	m_stdSessionInfoSet.endSession();
}

void SshSerialMonSession.load(doc.Storage* storage) {
	m_addressCombo.loadHistory(storage, "addressHistory");
	m_addressCombo.m_editText = storage.readString("address");

	m_portCombo.loadHistory(storage, "portHistory");
	m_portCombo.m_editText = storage.readString("port");

	m_socketPropertySet.load(storage);
	m_sshPropertySet.load(storage);
	m_bufferPropertySet.load(storage);
	m_ssh.applyProperties(m_socketPropertySet, m_sshPropertySet, m_bufferPropertySet);
}

void SshSerialMonSession.save(doc.Storage* storage) {
	m_socketPropertySet.save(storage);
	m_sshPropertySet.save(storage);
	m_bufferPropertySet.save(storage);

	m_addressCombo.saveHistory(storage, "addressHistory");
	storage.writeString("address", m_addressCombo.m_editText);

	m_portCombo.saveHistory(storage, "portHistory");
	storage.writeString("port", m_portCombo.m_editText);
}

void SshSerialMonSession.updateProperties() {
	m_socketPropertySet.m_remoteAddressProp.m_value = m_addressCombo.m_editText;
}

bool errorcode SshSerialMonSession.applyProperties() {
	m_addressCombo.m_editText = m_socketPropertySet.m_remoteAddressProp.m_value;
	m_ssh.applyProperties(m_socketPropertySet, m_sshPropertySet, m_bufferPropertySet);
	return true;
}

void SshSerialMonSession.restoreDefaultProperties() {
	m_socketPropertySet.restoreDefaults();
	m_sshPropertySet.restoreDefaults();
	m_bufferPropertySet.restoreDefaults();
}

iox.SshChannel.ConnectParams const* SshSerialMonSession.createConnectParams() {
	// we only use IOCTL descriptors on POSIX

	string_t portName = m_portCombo.m_editText;
	string_t cmdLine = $"tdevmon --mi --monitor=$portName";

	if (portName.m_length && portName[0] == '/') // POSIX name such as /dev/ttyUSB0
		cmdLine +=
			" "
			$"--ioctl $(psx.TCSETA):$(sizeof(psx.termio)) "
			$"--ioctl $(psx.TCSETAW):$(sizeof(psx.termio)) "
			$"--ioctl $(psx.TCSETAF):$(sizeof(psx.termio)) "
			$"--ioctl $(psx.TCSETS):$(sizeof(psx.termios)) "
			$"--ioctl $(psx.TCSETSW):$(sizeof(psx.termios)) "
			$"--ioctl $(psx.TCSETSF):$(sizeof(psx.termios)) "
			$"--ioctl $(psx.TCSETS2):$(sizeof(psx.termios2)) "
			$"--ioctl $(psx.TCSETSW2):$(sizeof(psx.termios2)) "
			$"--ioctl $(psx.TCSETSF2):$(sizeof(psx.termios2)) "
			$"--ioctl $(psx.TIOCMGET):$(sizeof(uint_t)) "
			$"--ioctl $(psx.TIOCMBIS):$(sizeof(uint_t)) "
			$"--ioctl $(psx.TIOCMBIC):$(sizeof(uint_t))";

	iox.SshChannel.ConnectParams params;
	iox.SshChannel.initConnectParams(&params, m_socketPropertySet, m_sshPropertySet, m_bufferPropertySet);
	params.m_sshParams.m_channelType = "session";
	params.m_sshParams.m_processType = "exec";
	params.m_sshParams.m_processExtra = cmdLine.m_p;
	params.m_sshParams.m_processExtraSize = cmdLine.m_length;
	return params;
}

void SshSerialMonSession.onLoginDlgCompleted(
	string_t userName,
	ui.AuthenticationMethod authenticationMethod,
	string_t privateKeyFileName
) {
	m_sshPropertySet.m_userNameProp.m_value = userName;
	m_sshPropertySet.m_authenticationMethodProp.m_value = authenticationMethod;
	m_sshPropertySet.m_privateKeyFileProp.m_value = privateKeyFileName;
}

reactor SshSerialMonSession.m_uiReactor {
	m_title = $"Mon $(m_addressCombo.m_currentText)";

	m_sessionConnectionState =
		m_ssh.m_state == State.Connected ? SessionConnectionState.Connected :
		m_ssh.m_state == State.Closed ? SessionConnectionState.Disconnected :
		SessionConnectionState.Connecting;

	m_actionTable[ActionId.Connect].m_text = m_ssh.m_state ? "Disconnect" : "Connect && capture";
	m_actionTable[ActionId.Connect].m_icon = m_iconTable[m_ssh.m_state ? IconId.Disconnect : IconId.Connect];
	m_statusPaneTable[StatusPaneId.State].m_text = m_ssh.m_stateStringTable[m_ssh.m_state];
	m_statusPaneTable[StatusPaneId.RemoteAddress].m_text = m_ssh.m_state > State.Resolving ? m_ssh.m_remoteAddress.getString() : "<peer-address>";
	m_statusPaneTable[StatusPaneId.RemoteAddress].m_isVisible = m_ssh.m_state > State.Resolving;
}

//..............................................................................
