import "doc_Storage.jnc"
import "std_HashTable.jnc"

// non-unique key-value store

namespace ui {

//! \addtogroup api-ui
//! @{

//..............................................................................

struct DictionaryEntry {
	DictionaryEntry cmut* m_next;
	string_t m_key;
	string_t m_value;
	bool m_isChecked;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

DictionaryEntry* loadDictionary(
	doc.Storage* storage,
	string_t name,
	size_t* count = null
) {
	DictionaryEntry* dictionary = null;
	DictionaryEntry* prevEntry = null;

	for (size_t i = 0;; i++) {
		string_t key = storage.readString($"%1-key-%2"(name, i));
		if (!key)
			break;

		DictionaryEntry* entry = new DictionaryEntry;
		entry.m_key = key;
		entry.m_value = storage.readString($"%1-value-%2"(name, i));
		entry.m_isChecked = storage.readBool($"%1-checked-%2"(name, i), true);

		if (prevEntry)
			prevEntry.m_next = entry;
		else
			dictionary = entry;

		prevEntry = entry;
	}

	return dictionary;
}

void saveDictionary(
	DictionaryEntry const* dictionary,
	doc.Storage* storage,
	string_t name
) {
	size_t i = 0;
	DictionaryEntry const* entry = dictionary;
	for (; entry; entry = entry.m_next, i++) {
		storage.writeString($"%1-key-%2"(name, i), entry.m_key);
		storage.writeString($"%1-value-%2"(name, i), entry.m_value);
		storage.writeBool($"%1-checked-%2"(name, i), entry.m_isChecked);
	}

	storage.writeString($"%1-key-%2"(name, i), null); // null-terminate
}

DictionaryEntry* insertDictionaryHead(
	DictionaryEntry* dictionary,
	string_t key,
	string_t value,
	bool isChecked = true
) {
	DictionaryEntry entry;
	entry.m_key = key;
	entry.m_value = value;
	entry.m_isChecked = isChecked;
	entry.m_next = dictionary;
	return entry;
}

std.StringHashTable* createDictionaryHashTable(DictionaryEntry const* dictionary) {
	std.StringHashTable hashTable;
	DictionaryEntry const* entry = dictionary;
	for (; entry; entry = entry.m_next)
		if (entry.m_isChecked)
			hashTable[entry.m_key] = entry.m_value;

	return hashTable;
}

DictionaryEntry* findDictionaryEntry(
	DictionaryEntry* dictionary,
	string_t key
) {
	DictionaryEntry* entry = dictionary;
	for (; entry; entry = entry.m_next)
		if (entry.m_key == key)
			return entry;

	return null;
}

//..............................................................................

//! @}

} // namespace ui
