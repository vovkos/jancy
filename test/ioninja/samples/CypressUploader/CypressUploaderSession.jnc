//..............................................................................
//
// Cypress File uploader
//

import "doc_Session.jnc"
import "io_base.jncx"
import "io_usb.jncx"
import "io_UsbDevice.jnc"
import "io_UsbEnumerator.jnc"
import "io_UsbDb.jnc"
import "io_MappedFile.jnc"
import "ui_Dialog.jnc"
import "ui_BufferPropertySet.jnc"
import "ui_StdSessionInfoSet.jnc"
import "log_ThroughputCalc.jnc"
import "log_ChecksumCalc.jnc"
import "parseInteger.jnc"
import "std_Buffer.jnc"
import "sys_Timer.jnc"

//..............................................................................

enum ReqType {
	VendorIn  = 0x80,
	VendorOut = 0x40,
}

enum ReqCode {
	GetFlashStatus = 0xaa,
	ReadFlash      = 0xa9,
	WriteFlash     = 0xa8,
	EraseFlash     = 0xad,

	GetFpgaStatus  = 0xfa,
	DisableFpga    = 0xfd,
	EnableFpga     = 0xfe,
}

//..............................................................................

class CypressUploaderSession: doc.Session {
protected:
	enum Defaults {
		StatusCheckInterval = 1000, // 1sec
		FpgaCheckRetryCount = 3,
		BlockSize           = 64,
		MaxDownloadSize     = 64 * 1024,
		EraseBeforUpload    = true,
		ExtraStatusChecks   = true,
	}

	enum State {
		Closed,
		Opened,
		Downloading,
		FileDlg,
		WaitingReady,
		Uploading,
		EnablingFpga,
	}

	char const* m_statusText[] = {
		"Closed",
		"Opened",
		"Downloading file...",
		"Selecting file...",
		"Waiting for device...",
		"Uploading file...",
		"Enabling FPGA...",
	}

	enum ActionId {
		Refresh,
		Open,
		Download,
		Upload,
		_Count,
	}

	enum IconId {
		Open,
		Close,
		Refresh,
		Download,
		Upload,
		_Count,
	}

	enum StatusPaneId {
		State,
		_Count,
	}

protected:
	// usb

	State bindable m_state;
	io.UsbDevice* m_device;
	uint_t m_syncId;
	sys.Timer m_timer;
	io.MappedFile m_file;
	std.Buffer m_block;
	uint64_t m_offset;
	size_t m_fpgaCheckRetryNum;

	// toolbar, status bar & menu

	ui.Action* m_actionTable[ActionId._Count];
	ui.Icon* m_iconTable[IconId._Count];
	ui.StatusPane* m_statusPaneTable[StatusPaneId._Count];
	ui.ComboBox* m_deviceCombo;

	// dialogs

	ui.FileDlg m_fileDlg;
	ui.ProgressDlg m_progressDlg;

	// property grid

	ui.EnumProperty* m_deviceProp;
	ui.BoolProperty* m_autoDetachKernelDriverProp;
	ui.IntProperty* m_statusCheckIntervalProp;
	ui.IntProperty* m_fpgaCheckRetryCountProp;
	ui.IntProperty* m_blockSizeProp;
	ui.IntProperty* m_maxDownloadSizeProp;
	ui.BoolProperty* m_eraseBeforeUploadProp;
	ui.BoolProperty* m_extraStatusCheckProp;

	// information grid

	ui.StdSessionInfoSet m_stdSessionInfoSet;
	ui.ThroughputInfoSet m_throughputInfoSet;
	ui.ChecksumInfoSet m_checksumInfoSet;

	// ui reactor

	reactor m_uiReactor;

public:
	construct(doc.PluginHost* pluginHost);

	bool openDevice();
	void closeDevice();

	override void load(doc.Storage* storage);
	override void save(doc.Storage* storage);
	override void updateProperties();
	override errorcode bool applyProperties();
	override void restoreDefaultProperties();

protected:
	void onOpenDevice();
	void onDownloadFile();
	void onUploadFile();
	void onFileDlgCompleted(ui.StdDlgButton button);
	void onProgressDlgButtonClicked(ui.StdDlgButton button);
	void onStatusCheckTimer();
	void onFpgaCheckTimer();

	void createUi();
	void enumerateDevices();
	void cancelFileTransfer();
	void setStatusCheckTimer();
	void enableFpga();
	bool errorcode nextBlock();

	bool checkStatus(ReqCode code);

	bool errorcode syncControlTransfer(
		uint_t type,
		uint_t code,
		uint_t value = 0,
		uint_t index = 0,
		void* p = null,
		size_t size = 0
	);

	void onTransferCompleted(
		uint_t syncId,
		uint_t type,
		uint_t code,
		uint_t value,
		uint_t index,
		void const* p,
		size_t size,
		std.Error const* error
	);
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

CypressUploaderSession.construct(doc.PluginHost* pluginHost) {
	basetype.construct(pluginHost);

	createUi();

	m_fileDlg.m_onCompleted += onFileDlgCompleted;
	m_progressDlg.m_onButtonClicked += onProgressDlgButtonClicked;

	pluginHost.m_log.addSelectionProcessor(log.ThroughputCalcRangeProcessor.factory~(m_throughputInfoSet));
	pluginHost.m_log.addSelectionProcessor(log.ChecksumCalcRangeProcessor.factory~(m_checksumInfoSet));
}

void CypressUploaderSession.createUi() {
	// toolbar

	m_iconTable[IconId.Open] = new ui.Icon("images/open.png");
	m_iconTable[IconId.Close] = new ui.Icon("images/close.png");
	m_iconTable[IconId.Refresh] = new ui.Icon("images/refresh.png");
	m_iconTable[IconId.Download] = new ui.Icon("images/receive.png");
	m_iconTable[IconId.Upload] = new ui.Icon("images/transmit.png");

	m_pluginHost.m_toolBar.addLabel("Device:");
	m_deviceCombo = m_pluginHost.m_toolBar.addComboBox(-1);

	m_actionTable[ActionId.Refresh]  = createAction("Re-enumerate devices", m_iconTable [IconId.Refresh]);
	m_actionTable[ActionId.Refresh].m_onTriggered += enumerateDevices;

	m_actionTable[ActionId.Open] = createAction("Open device", m_iconTable [IconId.Open]);
	m_actionTable[ActionId.Open].m_onTriggered += onOpenDevice;

	m_pluginHost.m_menu.addSeparator();
	m_pluginHost.m_toolBar.addSeparator();

	m_actionTable[ActionId.Download] = createAction("Download file", m_iconTable [IconId.Download]);
	m_actionTable[ActionId.Download].m_onTriggered += onDownloadFile;

	m_actionTable[ActionId.Upload] = createAction("Upload file", m_iconTable [IconId.Upload]);
	m_actionTable[ActionId.Upload].m_onTriggered += onUploadFile;

	// status bar

	m_statusPaneTable[StatusPaneId.State] = m_pluginHost.m_statusBar.addPane(, 80);

	// property grid

	ui.GroupProperty* group = m_pluginHost.m_propertyGrid.createGroupProperty(
		"Connection",
		"USB-specific connection settings"
	);

	m_deviceProp = m_pluginHost.m_propertyGrid.createEnumProperty(
		group,,
		"Device",
		"Target USB device",
		null, 0
	);

	m_autoDetachKernelDriverProp = m_pluginHost.m_propertyGrid.createBoolProperty(
		group,,
		"Auto-detach",
		"Auto detach kernel driver (if present)"
	);

	group = m_pluginHost.m_propertyGrid.createGroupProperty(
		"File transfer",
		"File transfer-related settings"
	);

	m_statusCheckIntervalProp = m_pluginHost.m_propertyGrid.createIntProperty(
		group,,
		"Status check interval (ms)",
		"Interval between status requests (in milliseconds)"
	);

	m_fpgaCheckRetryCountProp = m_pluginHost.m_propertyGrid.createIntProperty(
		group,,
		"FPGA check retries",
		"Number of FPGA status check re-tries after upload"
	);

	m_blockSizeProp = m_pluginHost.m_propertyGrid.createIntProperty(
		group,,
		"Block size",
		"Size of transfer block"
	);

	m_maxDownloadSizeProp = m_pluginHost.m_propertyGrid.createIntProperty(
		group,,
		"Max download size",
		"Maximum size of downloaded file"
	);

	m_eraseBeforeUploadProp = m_pluginHost.m_propertyGrid.createBoolProperty(
		group,,
		"Erase before upload",
		"Erase all memory before upload"
	);

	m_extraStatusCheckProp = m_pluginHost.m_propertyGrid.createBoolProperty(
		group,,
		"Extra status checks",
		"Check status before each and every block"
	);

	// information grid

	ui.InformationGroup* infoGroup = m_pluginHost.m_informationGrid.createGroup("USB connection");

	m_stdSessionInfoSet.create(m_pluginHost.m_txRxStats, m_pluginHost.m_informationGrid, infoGroup);
	m_throughputInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);
	m_checksumInfoSet.createInformationValuesGrouped(m_pluginHost.m_informationGrid);

	m_uiReactor.start();

	enumerateDevices();
}

void CypressUploaderSession.onOpenDevice() {
	if (m_state >= State.Opened)
		closeDevice();
	else
		openDevice();
}

void CypressUploaderSession.enumerateDevices() {
	m_deviceCombo.clear();

	io.UsbDevice* const* deviceArray = io.enumerateUsbDevicesNoDesc();
	size_t count = dynamic countof(deviceArray);

	ui.EnumPropertyOption* optionTable = new ui.EnumPropertyOption[count];

	io.UsbDb* usbDb = io.getStdUsbDb();

	for (size_t i = 0; i < count; i++) {
		io.UsbDevice* device = deviceArray[i];
		io.UsbDeviceDescriptor const* deviceDesc = device.m_deviceDescriptor;
		io.UsbVendor const* vendor = usbDb.findVendor(deviceDesc.m_vendorId);
		io.UsbProduct const* product = vendor ? vendor.findProduct(deviceDesc.m_productId) : null;

		char const* text = $"@%(1;03d):%(2;03d) %3 %4" (
			device.m_bus,
			device.m_address,
			vendor ? vendor.m_name : $"VID_$(deviceDesc.m_vendorId; 04x)",
			product ? product.m_name : $"PID_$(deviceDesc.m_productId; 04x)"
		);

		m_deviceCombo.addItem(text, device);

		optionTable[i].m_text = text;
		optionTable[i].m_value = device;
	}

	m_deviceProp.setOptions(optionTable, count);
}

bool CypressUploaderSession.openDevice() {
	if (m_deviceCombo.m_currentIndex == -1)
		return false;

	closeDevice();
	startSession();

	m_device = m_deviceCombo.m_currentData;

	io.UsbDeviceDescriptor const* deviceDesc = m_device.m_deviceDescriptor;

	m_device.open();

	DeviceParams params;
	params.m_bus = m_device.m_bus;
	params.m_address = m_device.m_address;
	params.m_productId = deviceDesc.m_productId;
	params.m_vendorId = deviceDesc.m_vendorId;

	m_logWriter.write(UsbLogRecordCode.DeviceOpened, &params, sizeof(params));
	m_state = State.Opened;
	return true;

catch:
	m_logWriter.writeLastError(UsbLogRecordCode.DeviceOpenError);
	return false;
}

void CypressUploaderSession.closeDevice() {
	if (m_state == State.Closed)
		return;

	m_device.close();
	m_device = null;

	m_logWriter.write(UsbLogRecordCode.DeviceClosed);
	m_state = State.Closed;
	m_syncId++;
}

void CypressUploaderSession.load(doc.Storage* storage) {
	m_deviceCombo.m_currentIndex  = storage.readInt("deviceIdx");
	m_autoDetachKernelDriverProp.m_value = storage.readBool("autoDetachKernelDriver");
	m_statusCheckIntervalProp.m_value = storage.readInt("statusCheckInterval", Defaults.StatusCheckInterval);
	m_fpgaCheckRetryCountProp.m_value = storage.readInt("fpgaCheckRetryCount", Defaults.FpgaCheckRetryCount);
	m_blockSizeProp.m_value = storage.readInt("blockSize", Defaults.BlockSize);
	m_maxDownloadSizeProp.m_value = storage.readInt("maxDownloadSize", Defaults.MaxDownloadSize);
	m_eraseBeforeUploadProp.m_value = storage.readBool("eraseBeforeUpload", Defaults.EraseBeforUpload);
	m_extraStatusCheckProp.m_value = storage.readBool("extraStatusChecks", Defaults.ExtraStatusChecks);
}

void CypressUploaderSession.save(doc.Storage* storage) {
	storage.writeInt("deviceIdx", (int) m_deviceCombo.m_currentIndex);
	storage.writeBool("autoDetachKernelDriver", m_autoDetachKernelDriverProp.m_value);
	storage.writeInt("statusCheckInterval", m_statusCheckIntervalProp.m_value);
	storage.writeInt("fpgaCheckRetryCount", m_fpgaCheckRetryCountProp.m_value);
	storage.writeInt("blockSize", m_blockSizeProp.m_value);
	storage.writeInt("maxDownloadSize", m_maxDownloadSizeProp.m_value);
	storage.writeBool("eraseBeforeUpload", m_eraseBeforeUploadProp.m_value);
	storage.writeBool("extraStatusChecks", m_extraStatusCheckProp.m_value);
}

void CypressUploaderSession.updateProperties() {
	m_deviceProp.m_currentIndex = m_deviceCombo.m_currentIndex;
}

bool errorcode CypressUploaderSession.applyProperties() {
	m_deviceCombo.m_currentIndex = m_deviceProp.m_currentIndex;
	return true;
}

void CypressUploaderSession.restoreDefaultProperties() {
	m_deviceProp.m_currentIndex = 0;
	m_autoDetachKernelDriverProp.m_value = true;
	m_statusCheckIntervalProp.m_value = Defaults.StatusCheckInterval;
	m_fpgaCheckRetryCountProp.m_value = Defaults.FpgaCheckRetryCount;
	m_blockSizeProp.m_value = Defaults.BlockSize;
	m_maxDownloadSizeProp.m_value = Defaults.MaxDownloadSize;
	m_eraseBeforeUploadProp.m_value = Defaults.EraseBeforUpload;
	m_extraStatusCheckProp.m_value = Defaults.ExtraStatusChecks;
}

void CypressUploaderSession.cancelFileTransfer() {
	m_state = State.Opened;
	m_timer.stop();
	m_file.close();
	m_progressDlg.hide();
	m_syncId++;
}

void CypressUploaderSession.setStatusCheckTimer() {
	m_state = State.WaitingReady;

	m_timer.startPeriodicTimer(
		onStatusCheckTimer @ m_pluginHost.m_mainThreadScheduler,
		m_statusCheckIntervalProp.m_value
	);
}

bool CypressUploaderSession.checkStatus(ReqCode code) {
	char status;
	syncControlTransfer(ReqType.VendorIn, code,,, &status, sizeof(status));
	return status == 0;
}

void CypressUploaderSession.onDownloadFile() {
	cancelFileTransfer();

	m_logWriter.write(log.StdRecordCode.PlainText, "Disabling FPGA...");
	syncControlTransfer(ReqType.VendorOut, ReqCode.DisableFpga);

	m_logWriter.write(log.StdRecordCode.PlainText, "Downloading file...");
	m_state = State.Downloading;
	m_offset = 0;
	nextBlock();
}

void CypressUploaderSession.onUploadFile() {
	cancelFileTransfer();

	m_fileDlg.m_kind = ui.FileDlgKind.Open;
	m_fileDlg.m_title = "Upload File to Cypress EZ-USB FX2...";
	m_fileDlg.m_filter = "All files (*.*)";
	m_fileDlg.show();

	m_state = State.FileDlg;
}

void CypressUploaderSession.onFileDlgCompleted(ui.StdDlgButton button) {
	if (button != ui.StdDlgButton.Ok) {
		m_state = State.Opened;
		return;
	}

	m_progressDlg.m_title = m_fileDlg.m_filePath;
	m_progressDlg.m_status = "Initializing...";
	m_progressDlg.m_progress = 0;
	m_progressDlg.m_buttons = ui.StdDlgButtons.Abort;
	m_progressDlg.show();

	m_file.open(
		m_fileDlg.m_filePath,
		io.FileOpenFlags.OpenExisting | io.FileOpenFlags.ReadOnly
	);

	m_logWriter.write(log.StdRecordCode.PlainText, "Disabling FPGA...");
	syncControlTransfer(ReqType.VendorOut, ReqCode.DisableFpga);

	m_logWriter.write(log.StdRecordCode.PlainText, $"Uploading file: $(m_fileDlg.m_filePath) ($(m_file.m_size) bytes)...");
	m_state = State.Uploading;
	m_offset = 0;

	if (m_eraseBeforeUploadProp.m_value) {
		m_logWriter.write(log.StdRecordCode.PlainText, "Erasing flash...");
		syncControlTransfer(ReqType.VendorOut, ReqCode.EraseFlash);
		setStatusCheckTimer();
	} else {
		bool canSendNextBlock =
			!m_extraStatusCheckProp.m_value ||
			checkStatus(ReqCode.GetFlashStatus);

		if (canSendNextBlock)
			nextBlock();
		else
			setStatusCheckTimer();
	}

catch:
	m_progressDlg.m_status = std.getLastError().m_description;
	m_progressDlg.m_buttons = ui.StdDlgButtons.Close;
}

void CypressUploaderSession.onStatusCheckTimer() {
	bool isReady = checkStatus(ReqCode.GetFlashStatus);
	if (!isReady) // not yet
		return;

	m_timer.stop();

	m_logWriter.write(log.StdRecordCode.PlainText, $"Device ready, resuming upload...");
	m_state = State.Uploading;
	nextBlock();

catch:
	cancelFileTransfer();
}

void CypressUploaderSession.onFpgaCheckTimer() {
	bool isReady = checkStatus(ReqCode.GetFpgaStatus);
	if (isReady) {
		m_logWriter.write(log.StdRecordCode.PlainText, $"FPGA is functional");
		cancelFileTransfer();
	}

	m_fpgaCheckRetryNum++;
	if (m_fpgaCheckRetryNum < m_fpgaCheckRetryCountProp.m_value)
		return;

	std.setError("Can't load FPGA");
	m_logWriter.writeLastError(log.StdRecordCode.Error);
	cancelFileTransfer();

catch:
	cancelFileTransfer();
}

void CypressUploaderSession.enableFpga() {
	m_logWriter.write(log.StdRecordCode.PlainText, $"Enabling FPGA...");
	m_state = State.EnablingFpga;
	syncControlTransfer(ReqType.VendorOut, ReqCode.EnableFpga);

	m_fpgaCheckRetryNum = 0;

	m_timer.startPeriodicTimer(
		onFpgaCheckTimer @ m_pluginHost.m_mainThreadScheduler,
		m_statusCheckIntervalProp.m_value
	);
}

bool errorcode CypressUploaderSession.nextBlock() {
	size_t size = m_blockSizeProp.m_value;

	uint_t type;
	uint_t code;
	uint_t value = m_offset;
	uint_t index = m_offset >> 16;

	uint64_t fileSize;

	switch (m_state) {
	case State.Downloading:
		type = ReqType.VendorIn;
		code = ReqCode.ReadFlash;
		fileSize = m_maxDownloadSizeProp.m_value;

		uint64_t leftover = m_offset >= fileSize ? 0 : fileSize - m_offset;
		if (size > leftover)
			size = leftover;

		m_block.setSize(size);
		break;

	case State.Uploading:
		type = ReqType.VendorOut;
		code = ReqCode.WriteFlash;
		fileSize = m_file.m_size;

		uint64_t leftover = m_offset >= fileSize ? 0 : fileSize - m_offset;
		if (size > leftover)
			size = leftover;

		void const* p = m_file.view(m_offset, size);

		m_block.setSize(size);
		memcpy(m_block.m_p, p, size);
		break;

	default:
		assert(false);
	}

	if (!size) {
		m_logWriter.write(log.StdRecordCode.PlainText, $"File transfer completed ($m_offset bytes).");
		m_logWriter.write(log.StdRecordCode.Break); // separate from the next message

		enableFpga();
		return true;
	}

	m_device.controlTransfer(
		type,
		code,
		value,
		index,
		m_block.m_p,
		size,,
		onTransferCompleted~(
			m_syncId,
			type,
			code,
			value,
			index,
			m_block.m_p
		) @ m_pluginHost.m_mainThreadScheduler
	);

	m_progressDlg.m_progress = fileSize ? m_offset * 100 / fileSize : 0;
	return true;

catch:
	m_logWriter.write(log.StdRecordCode.Error, std.getLastError());
	cancelFileTransfer();
	return false;
}

bool errorcode CypressUploaderSession.syncControlTransfer(
	uint_t type,
	uint_t code,
	uint_t value,
	uint_t index,
	void* p,
	size_t size
) {
	ControlTransferParams params;
	params.m_type = type;
	params.m_code = code;
	params.m_value = value;
	params.m_index = index;

	m_logWriter.write(UsbLogRecordCode.ControlTransfer, &params, sizeof(params));

	m_device.controlTransfer(
		type,
		code,
		value,
		index,
		p,
		size
	);

	if (size)
		m_logWriter.write((type & ReqType.VendorIn) ? log.StdRecordCode.Rx : log.StdRecordCode.Tx, p, size);

	return true;

catch:
	m_logWriter.write(log.StdRecordCode.Error, std.getLastError());
	cancelFileTransfer();
	return false;
}

void CypressUploaderSession.onTransferCompleted(
	uint_t syncId,
	uint_t type,
	uint_t code,
	uint_t value,
	uint_t index,
	void const* p,
	size_t size,
	std.Error const* error
) {
	if (syncId != m_syncId)
		return;

	ControlTransferParams params;
	params.m_type = type;
	params.m_code = code;
	params.m_value = value;
	params.m_index = index;

	m_logWriter.write(UsbLogRecordCode.ControlTransfer, &params, sizeof(params));

	if (error) {
		m_logWriter.write(log.StdRecordCode.Error, error);
		cancelFileTransfer();
		return;
	}

	bool isUpload = !(type & 0x80);
	uint64_t logRecordCode = isUpload ? log.StdRecordCode.Tx : log.StdRecordCode.Rx;
	m_logWriter.write(logRecordCode, p, size);

	m_offset += size;

	if (!isUpload) {
		nextBlock();
	} else {
		bool canSendNextBlock = !m_extraStatusCheckProp.m_value || checkStatus(ReqCode.GetFlashStatus);
		if (canSendNextBlock)
			nextBlock();
		else
			setStatusCheckTimer();
	}
}

void CypressUploaderSession.onProgressDlgButtonClicked(ui.StdDlgButton button) {
	switch (button) {
	case ui.StdDlgButton.Cancel:
	case ui.StdDlgButton.Abort:
		cancelFileTransfer();
		break;

	case ui.StdDlgButton.Ok:
	case ui.StdDlgButton.Close:
		m_progressDlg.hide();
		break;
	}
}

reactor CypressUploaderSession.m_uiReactor {
	m_title = $"USB $(m_deviceCombo.m_currentText)";
	m_actionTable[ActionId.Open].m_text = m_state ? "Close Device" : "Open Device";
	m_actionTable[ActionId.Open].m_icon = m_iconTable[m_state ? IconId.Close : IconId.Open];
	m_actionTable[ActionId.Download].m_isEnabled = m_state;
	m_actionTable[ActionId.Upload].m_isEnabled = m_state;
	m_statusPaneTable[StatusPaneId.State].m_text = m_statusText[m_state];
}

//..............................................................................
