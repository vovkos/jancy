//..............................................................................
//
// Monitor log filter
//

import "log_Representation.jnc"

namespace log {

//..............................................................................

void representDeviceOpened(
	log.Representation* representation,
	string_t messageText,
	void const* p,
	size_t size
) {
	uint64_t fileId = *(uint64_t const*)p;
	uint32_t pid = *(uint32_t const*)(p + sizeof(fileId));
	string_t fileName = (char const*)(p + sizeof(fileId) + sizeof(pid));
	string_t processName = fileName.m_p + fileName.m_length + 1;
	bool isUnnamed = !fileName;

	representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Connect;
	representation.m_lineAttr.m_backColor = log.StdLogColor.Connect;

	representation.addHyperText(
		$"%1\n"
		$"\e[90mFile name:\t%2%3\n"
		$"\e[90mFile ID:\t\e[34m0x%llX\n"
		$"\e[90mProcess:\t\e[34m%5\n"
		$"\e[90mPID:\t\e[34m%6"(
		messageText,
		isUnnamed ? "\e[31m" : "\e[34m",
		isUnnamed ? "(unnamed)" : fileName,
		fileId,
		processName,
		pid
	));
}

void representDeviceOpenError(
	log.Representation* representation,
	string_t messageText,
	void const* p,
	size_t size
) {
	uint32_t pid = *(uint32_t const*)p;
	std.Error const* error = (std.Error const*)(p + sizeof(pid));
	string_t fileName = (char const*)(error + 1);
	string_t processName = fileName.m_p + fileName.m_length + 1;
	bool isUnnamed = !fileName;

	representation.m_lineAttr.m_iconIdx = log.StdLogIcon.Error;
	representation.m_lineAttr.m_backColor = log.StdLogColor.Error;

	representation.addHyperText(
		$"%1\n"
		$"\e[90mFile name:\t%2%3\n"
		$"\e[90mProcess:\t\e[34m%4\n"
		$"\e[90mPID:\t\e[34m%5\n"
		$"\e[90mError:\t\e[m%6"(
		messageText,
		isUnnamed ? "\e[90m" : "\e[34m",
		isUnnamed ? "(unnamed)" : fileName,
		processName,
		pid,
		error.m_description
	));
}

//..............................................................................

} // namespace log
