//..............................................................................
//
// USB monitor device lists
//

import "io_usbmon.jncx"
import "io_UsbMonEnumerator.jnc"
import "ui_ComboBox.jnc"
import "ui_PropertyGrid.jnc"
import "std_Array.jnc"

namespace ui {

//! \addtogroup common-ui
//! @{

//..............................................................................

bool isUsbMonDeviceLess(
	io.UsbMonDeviceDesc const* device1,
	io.UsbMonDeviceDesc const* device2
) {
	return
		device1.m_captureDeviceId < device2.m_captureDeviceId ||
		device1.m_captureDeviceId == device2.m_captureDeviceId &&
		device1.m_address < device2.m_address;
}

void refreshUsbMonDeviceListUi(
	ComboBox* deviceCombo,
	EnumProperty* deviceProp
) {
	size_t count;
	io.UsbMonDeviceDesc const* deviceList = io.enumerateUsbMonDevices(
		io.UsbMonDeviceDescMask.AllButHubs,
		&count
	);

	std.Array deviceArray;
	deviceArray.setCount(count);
	io.UsbMonDeviceDesc const* device = deviceList;
	for (size_t i = 0; i < count; i++, device = device.m_next)
		deviceArray[i] = device;

	deviceArray.sort(isUsbMonDeviceLess);

	io.UsbMonDeviceDesc const* prevDevice = deviceCombo.m_currentData;

	EnumPropertyOption* optionTable = new EnumPropertyOption[count];
	deviceCombo.clear();

	char const* captureDevicePrefix = sys.g_systemInfo.m_osKind == sys.OsKind.Windows ?
		"USBPcap" :
		"usbmon";

	for (size_t i = 0; i < count; i++) {
		io.UsbMonDeviceDesc const* device = deviceArray[i];

		char const* text = $"%1%2:%(3;03d) - %4 by %5" (
			captureDevicePrefix,
			device.m_captureDeviceId,
			device.m_address,
			device.m_description,
			device.m_manufacturer
		);

		deviceCombo.addItem(text, device);
		optionTable[i].m_text = text;
		optionTable[i].m_value = device;
	}

	deviceProp.setOptions(optionTable, count);

	if (!prevDevice)
		return;

	size_t i = findUsbMonDeviceComboIndex(
		deviceCombo,
		prevDevice.m_vendorId,
		prevDevice.m_productId,
		prevDevice.m_captureDeviceId,
		prevDevice.m_address
	);

	if (i != -1) {
		deviceCombo.m_currentIndex = i;
		deviceProp.m_currentIndex = i;
	} else {
		deviceCombo.m_currentIndex = 0;
		deviceProp.m_currentIndex = 0;
	}
}

size_t findUsbMonDeviceComboIndex(
	ComboBox* deviceCombo,
	uint_t vid,
	uint_t pid,
	uint_t captureDeviceId = -1,
	uint_t address = -1
) {
	size_t bestIndex = -1;

	size_t itemCount = deviceCombo.m_itemCount;
	for (size_t i = 0; i < itemCount; i++) {
		io.UsbMonDeviceDesc const* device = deviceCombo.m_itemData[i];
		if (device &&
			device.m_vendorId == vid &&
			device.m_productId == pid
		) {
			if ((captureDeviceId == -1 || device.m_captureDeviceId == captureDeviceId) &&
				(address == -1 || device.m_address == address))
				return i; // exact match

			bestIndex = i; // VID/PID match, but different address
		}
	}

	return bestIndex;
}

//..............................................................................

//! @}

} // namespace ui
