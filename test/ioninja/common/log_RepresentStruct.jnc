import "log_Representation.jnc"
import "std_String.jnc"

namespace log {

//..............................................................................

typedef string_t FormatFunc(void const* p);

typedef string_t FormatExFunc(
	void const* p,
	size_t size
);

string_t getDisplayName(jnc.ModuleItemDecl* decl) {
	string_t displayName = decl.findAttributeValue("displayName");
	return displayName ? displayName : decl.m_name;
}

string_t getStructDigest(
	jnc.StructType* type,
	void const* p
) {
	FormatFunc thin* formatDigestFunc = type.findAttributeValue("formatDigestFunc");
	return formatDigestFunc ? formatDigestFunc(p) : null;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void representStruct(
	Representation* representation,
	jnc.StructType* type,
	string_t name = null,
	uint_t binPartRecordCode = 0,
	void const* p0,
	size_t baseOffset = 0,
	uint_t foldFlags = 1,
	uint_t structFoldFlag = 1, // 0 to exclude the folding header
	size_t indentLevel = 0
) {
	std.StringBuilder indent;
	indent.copy(' ', indentLevel * 4);

	if (structFoldFlag) {
		if (!name)
			name = getDisplayName(type);

		if (!(foldFlags & structFoldFlag)) {
			string_t digest = getStructDigest(type, p0);

			representation.addHyperText($"%1[\e^+%2\e[34m+\e[m] \e[1m%3%4%5"(
				indent.m_sz,
				structFoldFlag,
				name,
				digest ? "\e[m " : null,
				digest
			));

			return;
		}

		representation.addHyperText($"%1[\e^-%2\e[34m-\e[m] \e[1m%3"(
			indent.m_sz,
			structFoldFlag,
			name
		));
	}

	indent.append(' ', 4);

	size_t count = type.m_fieldCount;
	for (size_t i = 0; i < count; i++) {
		jnc.Field* field = type.m_fieldArray[i];
		void const* p = p0 + field.m_offset;
		string_t displayName = getDisplayName(field);

		if (field.m_type.m_typeKind == jnc.TypeKind.Struct && !field.findAttribute("stringify")) {
			representation.addHyperText($"%1%2:\t"(indent.m_sz, displayName));

			representStruct(
				representation,
				dynamic (jnc.StructType*)field.m_type,
				displayName,,
				p,
				baseOffset + field.m_offset,
				0,
				0,
				indentLevel + 1
			);

			continue;
		}

		string_t valueString;

		FormatFunc thin* formatFunc = field.findAttributeValue("formatFunc");
		if (formatFunc)
			valueString = formatFunc(p);
		else {
			string_t formatSpec = field.findAttributeValue("formatSpec");
			jnc.Type* displayType = field.findAttributeValue("displayType");

			if (!displayType)
				valueString = field.getValueString(p, formatSpec);
			else if (!(field.m_ptrTypeFlags & (jnc.PtrTypeFlags.BitField | jnc.PtrTypeFlags.BigEndian)))
				valueString = displayType.getValueString(p, formatSpec);
			else {
				jnc.DataPtrType* displayPtrType = (field.m_ptrTypeFlags & jnc.PtrTypeFlags.BitField) ?
					displayType.getDataPtrType(field.m_bitOffset, field.m_bitCount,,, field.m_ptrTypeFlags) :
					displayType.getDataPtrType(,, field.m_ptrTypeFlags);

				valueString = displayPtrType.getTargetValueString(p, formatSpec);
			}
		}

		representation.addHyperText($"%1%2:\t\e^!0x%x,%4,%5\e[34m%6"(
			indent.m_sz,
			displayName,
			binPartRecordCode,
			baseOffset + field.m_offset,
			field.m_type.m_size,
			valueString
		));
	}
}

//..............................................................................

} // namespace log
