//..............................................................................

struct struct32 {
	int32_t m_a;
}

struct struct64 {
	int64_t m_a;
}

struct struct128 {
	int64_t m_a;
	int64_t m_b;
}

namespace c2jnc {

//..............................................................................

int32_t
funcInt32(
	int32_t a1,
	int32_t a2,
	int32_t a3,
	int32_t a4,
	int32_t a5,
	int32_t a6,
	int32_t a7,
	int32_t a8
) {
	assert(a1 == -1);
	assert(a2 == -2);
	assert(a3 == -3);
	assert(a4 == -4);
	assert(a5 == -5);
	assert(a6 == -6);
	assert(a7 == -7);
	assert(a8 == -8);

	return a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8;
}

int64_t
funcInt64(
	int64_t a1,
	int64_t a2,
	int64_t a3,
	int64_t a4,
	int64_t a5,
	int64_t a6,
	int64_t a7,
	int64_t a8
) {
	assert(a1 == -1);
	assert(a2 == -2);
	assert(a3 == -3);
	assert(a4 == -4);
	assert(a5 == -5);
	assert(a6 == -6);
	assert(a7 == -7);
	assert(a8 == -8);

	return a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8;
}

struct32
funcStruct32(
	struct32 s1,
	struct32 s2,
	struct32 s3,
	struct32 s4,
	struct32 s5,
	struct32 s6,
	struct32 s7,
	struct32 s8
) {
	assert(s1.m_a == -1);
	assert(s2.m_a == -2);
	assert(s3.m_a == -3);
	assert(s4.m_a == -4);
	assert(s5.m_a == -5);
	assert(s6.m_a == -6);
	assert(s7.m_a == -7);
	assert(s8.m_a == -8);

	struct32 retval;

	retval.m_a =
		s1.m_a + s2.m_a + s3.m_a + s4.m_a +
		s5.m_a + s6.m_a + s7.m_a + s8.m_a;

	return retval;
}

struct64
funcStruct64(
	struct64 s1,
	struct64 s2,
	struct64 s3,
	struct64 s4,
	struct64 s5,
	struct64 s6,
	struct64 s7,
	struct64 s8
) {
	assert(s1.m_a == -1);
	assert(s2.m_a == -2);
	assert(s3.m_a == -3);
	assert(s4.m_a == -4);
	assert(s5.m_a == -5);
	assert(s6.m_a == -6);
	assert(s7.m_a == -7);
	assert(s8.m_a == -8);

	struct64 retval;

	retval.m_a =
		s1.m_a + s2.m_a + s3.m_a + s4.m_a +
		s5.m_a + s6.m_a + s7.m_a + s8.m_a;

	return retval;
}

struct128
funcStruct128(
	struct128 s1,
	struct128 s2,
	struct128 s3,
	struct128 s4
) {
	assert(s1.m_a == -1);
	assert(s1.m_b == -2);
	assert(s2.m_a == -3);
	assert(s2.m_b == -4);
	assert(s3.m_a == -5);
	assert(s3.m_b == -6);
	assert(s4.m_a == -7);
	assert(s4.m_b == -8);

	struct128 retval;
	retval.m_a = s1.m_a + s2.m_a + s3.m_a + s4.m_a;
	retval.m_b = s1.m_b + s2.m_b + s3.m_b + s4.m_b;
	return retval;
}

variant_t
funcVariant(
	variant_t v1,
	variant_t v2,
	variant_t v3,
	variant_t v4
) {
	assert(v1 == -1);
	assert(v2 == -2);
	assert(v3 == -3);
	assert(v4 == -4);

	return v1 + v2 + v3 + v4;
}

float
funcFloat(
	float x,
	float y
) {
	assert(x > (float) 3.1414 && x < (float) 3.1416);
	assert(y > (float) 2.7181 && y < (float) 2.7183);

	return (x + y) / 2;
}

double
funcDouble(
	double x,
	double y
) {
	assert(x > 3.1414 && x < 3.1416);
	assert(y > 2.7181 && y < 2.7183);

	return (x + y) / 2;
}

//..............................................................................

} // namespace c2jnc

namespace jnc2c {

//..............................................................................

int32_t
funcInt32(
	int32_t a1,
	int32_t a2,
	int32_t a3,
	int32_t a4,
	int32_t a5,
	int32_t a6,
	int32_t a7,
	int32_t a8
);

int64_t
funcInt64(
	int64_t a1,
	int64_t a2,
	int64_t a3,
	int64_t a4,
	int64_t a5,
	int64_t a6,
	int64_t a7,
	int64_t a8
);

struct32
funcStruct32(
	struct32 s1,
	struct32 s2,
	struct32 s3,
	struct32 s4,
	struct32 s5,
	struct32 s6,
	struct32 s7,
	struct32 s8
);

struct64
funcStruct64(
	struct64 s1,
	struct64 s2,
	struct64 s3,
	struct64 s4,
	struct64 s5,
	struct64 s6,
	struct64 s7,
	struct64 s8
);

struct128
funcStruct128(
	struct128 s1,
	struct128 s2,
	struct128 s3,
	struct128 s4
);

variant_t
funcVariant(
	variant_t v1,
	variant_t v2,
	variant_t v3,
	variant_t v4
);

char const*
funcPtr(
	char const* p1,
	char const thin* p2
);

float
funcFloat(
	float x,
	float y
);

double
funcDouble(
	double x,
	double y
);

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void testInt32() {
	int32_t retval = funcInt32(-1, -2, -3, -4, -5, -6, -7, -8);
	assert(retval == -36);
}

void testInt64() {
	int64_t retval = funcInt64(-1, -2, -3, -4, -5, -6, -7, -8);
	assert(retval == -36);
}

void testStruct32() {
	struct32 s1 = { -1 };
	struct32 s2 = { -2 };
	struct32 s3 = { -3 };
	struct32 s4 = { -4 };
	struct32 s5 = { -5 };
	struct32 s6 = { -6 };
	struct32 s7 = { -7 };
	struct32 s8 = { -8 };

	struct32 retval = funcStruct32(s1, s2, s3, s4, s5, s6, s7, s8);
	assert(retval.m_a == -36);
}

void testStruct64() {
	struct64 s1 = { -1 };
	struct64 s2 = { -2 };
	struct64 s3 = { -3 };
	struct64 s4 = { -4 };
	struct64 s5 = { -5 };
	struct64 s6 = { -6 };
	struct64 s7 = { -7 };
	struct64 s8 = { -8 };

	struct64 retval = funcStruct64(s1, s2, s3, s4, s5, s6, s7, s8);
	assert(retval.m_a == -36);
}

void testStruct128() {
	struct128 s1 = { -1, -2 };
	struct128 s2 = { -3, -4 };
	struct128 s3 = { -5, -6 };
	struct128 s4 = { -7, -8 };

	struct128 retval = funcStruct128(s1, s2, s3, s4);
	assert(retval.m_a == -16 && retval.m_b == -20);
}

void testVariant() {
	variant_t v1 = -1;
	variant_t v2 = -2;
	variant_t v3 = -3;
	variant_t v4 = -4;

	variant_t retval = funcVariant(v1, v2, v3, v4);
	assert(retval == -10);
}

void testPtr() {
	char const* retval = funcPtr("abc", "def");
	assert(strcmp(retval, "abc") == 0);
}

void testFloat() {
	float retval = funcFloat((float) 3.1415, (float) 2.7182);
	assert(retval > (float) 2.7182 && retval < (float) 3.1415)
}

void testDouble() {
	double retval = funcDouble(3.1415, 2.7182);
	assert(retval > 2.7182 && retval < 3.1415)
}

//..............................................................................

} // namespace jnc2c
