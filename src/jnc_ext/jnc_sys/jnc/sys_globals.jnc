//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace sys {

//..............................................................................

/**
	\ingroup sys

	Provides access to the system environment variable table.

	Reading from this property results in a call to ``getenv`` standard C
	library function.

	Writing to this property translates to ``setenv`` on Linux/Mac and
	``_putenv`` on Windows.
*/

string_t property g_env(string_t name);

enum CpuKind {
	Ia32,
	Amd64,
	Arm32,
	Arm64,
}

enum OsKind {
	Windows,
	Linux,
	Solaris,
	Bsd,
	Mac,
}

bitflag enum OsFlags {
	Posix,
	Bsd,
	Darwin,
}

enum CppKind {
	Msc,
	Gcc,
	Icc,
	Clang,
}

bitflag enum CppFlags {
	Gcc,
}

struct SystemInfo {
	CpuKind m_cpuKind;
	OsKind m_osKind;
	OsFlags m_osFlags;
	CppKind m_cppKind;
	CppFlags m_cppFlags;
	uint_t m_processorCount;
	size_t m_pageSize;
	size_t m_mappingAlignFactor;

	// extend later as needed
}

SystemInfo const g_systemInfo;

//! \addtogroup sys-thread
//! @{

/**
	Returns the thread identifier (TID) of the current thread.

	Translates to ``GetCurrentThreadId`` on Windows and ``pthread_self`` on
	POSIX.
*/

uintptr_t getCurrentThreadId();

/**
	Returns the process identifier (PID) of the current process.

	Translates to ``GetCurrentProcessId`` on Windows and ``getpid`` on
	POSIX.
*/

uint_t getCurrentProcessId();

string_t errorcode getProcessImageName(uint_t pid);

//! @}

//! \addtogroup sys-time
//! @{

/**
	Suspends the execution of the calling thread until ``timeout`` interval
	elapses. ``timeout`` is expressed in milliseconds.
*/

void sleep(uint32_t timeout);

/**
	Returns current system timestamp. Timestamp is expressed as a 64-bit value
	representing the number of 100-nanosecond intervals since
	January 1, 1601 (UTC).

	This format is the same as used in Windows ``FILETIME`` struct.

	Even though nominally this timestamp is expressed as the number of
	100-nanosecond intervals, a sub-microsecond precision is not guaranteed.
	For a guaranteed sub-microsecond precision, use `sys.getPreciseTimestamp`.

	\sa `sys.getPreciseTimestamp`
*/

uint64_t getTimestamp();

/**
	Returns current system high-precision timestamp. Timestamp is expressed as a
	64-bit value representing the number of 100-nanosecond intervals since
	January 1, 1601 (UTC).

	This format is the same as used in Windows ``FILETIME`` struct.

	This timestamp is guaranteed to have sub-microsecond precision. If you don't
	need sub-microsecond precision, use a slightly faster `sys.getTimestamp`.

	\sa `sys.getTimestamp`
*/

uint64_t getPreciseTimestamp();

/**
	\subgroup

	Returns string representation of the timestamp.

	.. rubric:: Format Specifiers:

	.. csv-table::
		:header: "Specifier", "Output"
		:widths: auto

		"%h", "hour in 24-hour format (00..24)"
		"%H", "hour in 12-hour format (1..12)"
		"%m", "minutes (00..59)"
		"%s", "seconds (00..59)"
		"%l", "milliseconds (0..999)"
		"%c", "microseconds (0..999)"
		"%p", "AM / PM designition lower case (a / p)"
		"%p", "AM / PM designition upper case (A / P)"
		"%y", "year, last 2-digit format (0..99)"
		"%Y", "year, all digits"
		"%D", "day of month, leading zero (01..31)"
		"%d", "day of month, no leading zero (1..31)"
		"%M", "month index, leading zero (01..12)"
		"%o", "month index, no leading zero (1..12)"
		"%n", "month short name (Jan..Dec)"
		"%N", "month full name (January..December)"
		"%w", "week day short name (Sun..Sat)"
		"%W", "week day full name (Sunday..Saturday)"

	.. rubric:: Example:

	.. ref-code-block::

		uint64_t ts = `sys.getTimestamp`();
		print($"time: %1\n"(sys.formatTypestamp(ts, "%h:%m:%s.%l")));

	\sa `sys.getTimestamp`, `sys.getPreciseTimestamp`
*/

string_t formatTimestamp(
	uint64_t timestamp,
	string_t format
);

string_t formatTimestamp(
	uint64_t timestamp,
	int timeZone,
	string_t format
);

//! @}

//..............................................................................

} // namespace sys
