//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace sys {

//! \addtogroup sys-time
//! @{

//..............................................................................

/**
	\import sys_Timer.jnc

	\brief This class provides facilities to manage both peridodic(repetitive)
	and non-periodic(single-shot) timers.

	Each instance of ``sys.Timer`` manages a single timer(either periodic, or
	single-shot). You start the timer with ``start``, ``startDueTimer``,
	``startSingleShotTimer``, ``startPeriodicTimer`` methods. When the timer is
	due, it will call the function you have supplied as an argument to one of
	aforementioned methods.

	To stop the timer, invoke ``stop`` method. For local timers it is
	recommended to use *disposable* pattern [#f1]_.

	Code sample::

		import "sys_Timer.jnc"

		onTimer(int param) {
			// ...
		}

		int main() {
			// ...

			disposable sys.Timer timer;
			timer.startPeriodic(onTimer ~(1, 2), 1000);

			// ...
		} // <-- timer.stop will be called

	\sa `sys.getTimestamp`

	\footnote f1

		|footnote-disposable|

	\footnote f2

		|footnote-errorcode|
*/

opaque class Timer {
	protected function* m_timerFunc();

	construct();
	destruct();

	/**
		Starts a new peridodic or non-periodic timer.

		The function accepts three arguments. The first one, ``timerFunc``
		specifies the function pointer to the timer function to be called when
		the timer is due. The second one, ``dueTime``, specifies the *timestamp*
		of the moment when the timer function should be *first* called. The last
		one, ``period``, specifies the period in milliseconds for a periodic
		timer, or ``0`` if this is a single-shot timer.

		Returns ``true`` on success. If the timer could not be started, error
		supplied by operating system is set and then the function returns
		``false`` [#f2]_.

		If the timer has been already started, ``start`` method stops the
		previous timer first.
	*/

	bool errorcode start(
		function* func(),
		uint64_t dueTime,
		uint_t interval
	);

	/**
		Stops a previously started timer, does nothing if the timer is not
		started. This function always succeeds.

		For local timers it is recommended to use *disposable* pattern [#f1]_.
	*/

	void stop();

	/**
		Effectively makes ``sys.Timer`` a *disposable* class [#f1]_.
	*/

	alias dispose = stop;

	/**
		Starts a non-periodic due timer, i.e. you specify the *timestamp* of the
		moment when your function should be called.

		Technically calling startDueTimer is equivalent to calling ``start``
		with the last ``interval`` argument set to ``0``.
	*/

	bool errorcode startDueTimer(
		function* func(),
		uint64_t dueTime
	) {
		return start(func, dueTime, 0);
	}

	/**
		Starts a periodic timer, i.e. the timer will invoke your function each
		``interval`` milliseconds.

		This is probably the most common type of timer. Technically calling
		startDueTimer is equivalent to calling ``start`` with the ``dueTime``
		argument calculated as ``sys.getTimestamp() + interval``.
	*/

	bool errorcode startPeriodicTimer(
		function* func(),
		uint_t interval
	) {
		uint64_t dueTime = sys.getTimestamp() + interval * 10000;
		return start(func, dueTime, interval);
	}

	/**
		Starts a single-shot non-periodic timer, i.e. you specify the delay in
		milliseconds after passing of which your function will be invoked.

		Technically calling startDueTimer is equivalent to calling ``start``
		with the ``dueTime`` argument calculated as
		``sys.getTimestamp() + interval`` and ``interval`` set to ``0``.
	*/

	bool errorcode startSingleShotTimer(
		function* func(),
		uint_t delay
	) {
		uint64_t dueTime = sys.getTimestamp() + delay * 10000;
		return start(func, dueTime, 0);
	}
}

//..............................................................................

//! @}

} // namespace sys
