//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace sys {

//! \addtogroup sys-sync
//! @{

//..............................................................................

/**
	\import sys_Event.jnc

	\brief This class provides standard means of synchronization between
	threads.

	``sys.Event`` can be in one of the following two states: *idle* or
	*signalled*. One or more threads can wait until the event becomes signalled
	by invoking ``wait`` method. When some other thread signals the event by
	invoking ``signal`` method, the first thread in the queue of waiting threads
	wakes up, ``wait`` call finishes, and the event goes back to *idle* state.

	Code sample::

		import "sys_Event.jnc"

		sys.Event g_event;

		thread1() {
			// ...

			g_event.wait(); // thread sleeps here until event is signalled

			// continue...
		}

		thread2() {
			// ...

			g_event.signal(); // thread1 wakes up and continues;
			                   // g_event goes back to non-signalled state
		}

	\sa `sys.NotificationEvent`, `sys.Lock`, `sys.Thread`
*/

opaque class Event {
	construct();
	destruct();

	/**
		Sets event to *signalled* state. When the first waiting thread in the
		queue wakes up, the event goes back to *idle* state.
	*/

	void signal();

	/**
		Forcefully returns event to *idle* state.
	*/

	void reset();

	/**
		Waits until event goes to *signalled* state. When it happens, ``wait``
		returns ``true`` and the event goes back to *idle* state.

		If ``timeout`` parameter is not ``-1`` then it's a wait with a
		*time limit*. If the event does not get signalled until timeout expires,
		``wait`` return ``false``. Timeout is expressed in *milliseconds*.
	*/

	bool wait(uint_t timeout = -1);
}

//..............................................................................

//! @}

} // namespace sys
