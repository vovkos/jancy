//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_base.jncx"
import "io_StreamEvents.jnc"
import "io_SocketAddress.jnc"

namespace io {

//! \addtogroup io-pcap
//! @{

//..............................................................................

enum PcapLinkType {
	Loopback    = 0,
	Ethernet    = 1,
	TokenRing   = 6,
	Arcnet      = 7,
	Slip        = 8,
	Ppp         = 9,
	Fddi        = 10,
	PppSerial   = 50,
	PppEthernet = 51,
	Ieeee80211  = 105,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_pcap.jncx

	\brief This enumeration contains codes of all possible events that might
	happen on `io.Pcap` object. The set of *active* events is accessible
	via `io.Pcap.m_activeEvents`.

	\sa `io.Pcap`
*/

bitflag enum PcapEvents: ReadOnlyStreamEvents {
	/**
		End-of-file was reached on the Pcap file.
	*/

	Eof = 0x10, // skip WriteBufferEmpty/WriteBufferReady (no write buffer in Pcap)
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_pcap.jncx

	\brief This class provides high-level asynchronous interface for the Pcap
	(Packet Capture) library.

	Pcap library(called WinPcap on Windows) is de-facto the standard tool for
	capturing and injecting low-level network traffic.

	A typical sequence of steps when working with ``io.Pcap`` looks something
	like this:

	* Open a live capture using ``openDevice`` or a capture file(\*.pcap) using
	  ``openFile`` method;
	* Assign IO event handler with ``wait`` method. You would probably also
	  want to *schedule* your event handler to be run in particular
	  environment(e.g., in a specific thread) and partially apply some
	  syncrhonization ID to discard late events;
	* When `io.PcapEvents.IncomingData` event is fired, read packet using
	  ``read`` method;
	* If you opened a live capture, you can also inject packets with ``write``
	  method;
	* Close Pcap object when no longer needed with ``close`` method.

	Code sample:

	.. ref-code-block::

		class MyDialog {
			// ...

			io.Pcap m_pcap;
			uint_t m_syncId;

			void startCapture(
				char const* device,
				char const* filter = null
			);

			void close();
			void waitPcapEvents();

			void onPcapEvent(
				uint_t syncId,
				`io.PcapEvents` triggeredEvents
			);
		}

		MyDialog.startCapture(
			char const* device,
			char const* filter = null
		) {
			bool result = try m_pcap.openDevice(device, filter);
			if (!result) {
				// handle the error...
			}

			waitPcapEvents();
		}

		MyDialog.close() {
			m_serial.close();
			m_syncId++; // events past this point will be discarded as 'late'
		}

		MyDialog.waitPcapEvent() {
			`io.PcapEvents` eventMask =
				`io.PcapEvents.IoError` |
				`io.PcapEvents.IncomingData`;

			m_serial.wait(eventMask, onPcapEvent ~(++m_syncId) @
				g_mainThreadScheduler);
		}

		MyDialog.onPcapEvent(
			uint_t syncId,
			`io.PcapEvents` triggeredEvents
		) {
			if (syncId != m_syncId) // late event
				return;

			if (triggeredEvents & `io.PcapEvents.IoError`) {
				char cont* errorString = m_pcap.m_ioError.m_description;
				// ...
			}

			if (triggeredEvents & `io.PcapEvents.IncomingData`) {
				char buffer[256];
				size_t size = m_pcap.read(buffer, sizeof(buffer));
				// ...
			}

			waitPcapEvents(); // restart wait
		}

	\sa `io.PcapEvents`

	\footnote f1

		|footnote-errorcode|

	\footnote f2

		|footnote-disposable|

	\footnote f3

		For detailed description of the syntax used in Pcap capture filter
		expressions refer to: http://www.tcpdump.org/manpages/pcap-filter.7.html
*/

opaque class Pcap {
	enum Defaults {
		IsPromiscious = false,
		ReadTimeout   = 200,
		SnapshotSize  = 64 * 1024,
	}

	PcapLinkType const property m_linkType;
	bool autoget property m_isPromiscious;
	uint_t autoget property m_readTimeout;
	size_t property m_snapshotSize;
	size_t autoget property m_kernelBufferSize; // 0 -- use platform default
	size_t autoget property m_readBufferSize;

	/**
		Holds currently specified capture filter [#f3]_.
	*/

	char const* readonly m_filter;

	protected uint_t m_unused;

	io.PcapEvents readonly volatile m_activeEvents;
	std.Error const* readonly volatile m_ioError;

	/**
		Holds the open status for the Pcap object, i.e. ``true`` if opened;
		``false`` otherwise.
	*/

	bool readonly m_isOpen;

	construct();
	destruct();

	/**
		Opens a network interface for Pcap capture.

		Returns ``true`` on success. If live capture on specified device could
		not be opened, function sets the error reported by Pcap and returns
		``false`` [#f1]_.
	*/

	bool errorcode openDevice(char const* deviceName);

	/**
		Opens a network interface for Pcap capture.

		The function accepts 3 arguments. The first one, ``deviceName``, is
		used to specify the device to start capture on. To obtain a list of
		available devices, use `io.createPcapDeviceDescList` function.

		The second one, ``filter``, allows you to specify a capture filter
		[#f3]_ which will be applied to incoming packets -- packets which do
		not pass the filter, will never be signalled via
		`io.PcapEvents.IncomingData` event and could not be read by ``read``
		method.

		The third parameter specifies whether to put interface in promiscuous
		mode.

		Returns ``true`` on success. If live capture on specified device could
		not be opened, function sets the error reported by Pcap and returns
		``false`` [#f1]_.
	*/

	bool errorcode openLive(
		char const* deviceName,
		char const* filter = null,
		uint_t snapshotSize = Defaults.SnapshotSize,
		bool isPromiscious = Defaults.IsPromiscious,
		uint_t readTimeout = Defaults.ReadTimeout
	);

	/**
		Opens a previously captured \*.pcap file specified by ``fileName``
		argument.

		The second argument, ``filter``, has the same meaning as in
		``openDevice`` method [#f3]_.

		Returns ``true`` on success. If capture file could not be opened,
		function sets the error reported by Pcap and returns ``false`` [#f1]_.
	*/

	bool errorcode openFile(
		char const* fileName,
		char const* filter = null
	);

	/**
		Closes a previously opened live capture or a capture file, does nothing
		if Pcap is not opened. This function always succeeds.

		Sometimes it may be convenient to use *disposable* pattern to ensure
		timely invokation of ``close`` [#f2]_.
	*/

	void close();

	/**
		Effectively makes ``io.Pcap`` a *disposable* class [#f2]_.
	*/

	alias dispose = close;

	bool errorcode activate(char const* filter = null);

	/**
		Allows you to change current capture filter without restarting the
		capture.

		Returns ``true`` on success. If capture filter could not be changed,
		function sets the error reported by Pcap and returns ``false`` [#f1]_.
	*/

	bool errorcode setFilter(
		char const* filter,
		bool isOptimized = true,
		uint32_t netMask = -1
	);

	/**
		Reads the next packet into the buffer pointed to by ``p`` and ``size``
		bytes long.

		Returns the actual amount of bytes read or ``-1`` if error occurs.

		If read operation is unsuccessful, function sets the error reported by
		Pcap and returns ``-1`` [#f1]_.

		Normally you would call this function from within your event handler for
		``ReadyRead`` event. If this function is called when there are no
		incoming pacets, it blocks until either a packet arrives, or Pcap is
		closed.
	*/

	size_t errorcode read(
		void* p,
		size_t size,
		uint64_t* timestamp = null
	);

	/**
		Attempts to inject ``size`` bytes from the buffer pointed to by ``p`` as
		a packet on a currently opened device.

		Returns the actual amount of bytes written on success. If write
		operation is unsuccessful, function sets the error reported by Pcap and
		returns ``-1`` [#f1]_.
	*/

	size_t errorcode write(
		void const* p,
		size_t size
	);

	intptr errorcode wait(
		PcapEvents eventMask,
		function* handler(PcapEvents triggeredEvents)
	);

	bool errorcode cancelWait(intptr handle);

	PcapEvents blockingWait(
		PcapEvents eventMask,
		uint_t timeout = -1
	);

	async PcapEvents asyncWait(PcapEvents eventMask);
}

//..............................................................................

opaque class PcapFilter {
	bool const property m_isEmpty;

	bool errorcode compile(
		Pcap* pcap,
		char const* filter,
		bool isOptimized = true,
		uint32_t netMask = -1
	);

	bool errorcode compile(
		PcapLinkType linkType,
		size_t snapshotSize,
		char const* filter,
		bool isOptimized = true,
		uint32_t netMask = -1
	);

	bool errorcode compile(
		char const* filter,
		bool isOptimized = true,
		uint32_t netMask = -1
	) {
		return compile(PcapLinkType.Ethernet, Pcap.Defaults.SnapshotSize, filter, isOptimized, netMask);
	}

	bool match(
		void const* p,
		size_t size
	);
}

//..............................................................................

/**
	\import io_pcap.jncx

	\brief This struct holds information about single address of the Pcap
	device.

	A list of network adapter addresses is part of Pcap device description
	stored in `io.PcapDeviceDesc`.

	\sa `io.PcapDeviceDesc`, `io.createPcapDeviceDescList`
*/

struct PcapAddress {
	/**
		Holds a pointer to the next Pcap device or ``null`` if this is the last
		address.
	*/

	PcapAddress const* m_next;

	//! Holds ``IP4`` address of the Pcap device as `io.Address_ip4`.

	Address_ip4 m_address;

	//! Holds ``IP4`` mask of the Pcap device as `io.Address_ip4`.

	Address_ip4 m_mask;

	/**
		Holds ``IP4`` subnet broadcast address of the Pcap device as
		`io.Address_ip4`.
	*/

	Address_ip4 m_broadcast;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_pcap.jncx

	\brief This struct holds information about the device available for Pcap
	live capture.

	A list of Pcap device descriptions is returned by
	`io.createPcapDeviceDescList`.

	\sa `io.createPcapDeviceDescList`
*/

struct PcapDeviceDesc {
	/**
		Holds a pointer to the next Pcap device description or ``null`` if this
		is the last adapter.
	*/

	PcapDeviceDesc const* m_next;

	/**
		Holds the Pcap device name; use this name as ``deviceName`` argument in
		`io.Pcap.openDevice` method.
	*/

	char const* m_name;

	/**
		Holds a human-readable description of Pcap device.
	*/

	char const* m_description;

	/**
		Holds the head of the list of addresses of this Pcap device. Iterate
		through the list by instpecting `io.PcapAddress.m_next` field.
	*/

	PcapAddress m_address;

	/**
		Holds flag options of the Pcap device; currently unused.
	*/

	uint_t m_flags;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	Enumerates all available devices Pcap can start a live capture session on.

	``count`` argument can be used to obtain the total number of devices in the
	resulting list.

	Returns a pointer to the very first `io.PcapDeviceDesc` in the resulting
	list. You can walk through the list by inspecting `io.PcapDeviceDesc.m_next`
	field:

	.. ref-code-block::

		`io.PcapDeviceDesc` const* deviceDesc = io.createPcapDeviceDescList();
		for (; deviceDesc; deviceDesc = deviceDesc.m_next) {
			// add device to the combo box...
		}
*/

PcapDeviceDesc const* createPcapDeviceDescList(size_t* count = null);

//..............................................................................

//! @}

} // namespace io
