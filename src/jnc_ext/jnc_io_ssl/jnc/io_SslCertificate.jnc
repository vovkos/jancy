//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "std_Buffer.jnc"

namespace io {

//! \addtogroup io-ssl
//! @{

//..............................................................................

enum SslNid {
	CommonName             = 13,
	CountryName            = 14,
	LocalityName           = 15,
	StateOrProvinceName    = 16,
	OrganizationName       = 17,
	OrganizationalUnitName = 18,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

string_t getSslNidShortName(SslNid nid);
string_t getSslNidLongName(SslNid nid);

//..............................................................................

enum SslCertFormat {
	Pem,
	Der,
}

//..............................................................................

struct SslCertNameEntry {
	SslNid m_nid;
	string_t m_name;
	string_t m_value;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class SslCertName {
	size_t readonly m_entryCount;
	SslCertNameEntry const* const property m_entryTable(size_t i);
	string_t const property m_oneLine;

	construct();
	destruct();

	SslCertNameEntry const* findEntry(SslNid nid) const;
}

//..............................................................................

opaque class SslCertificate {
	string_t const property m_serialNumber;
	uint64_t const property m_validFromDate;
	uint64_t const property m_validToDate;
	SslCertName const* const property m_subject;
	SslCertName const* const property m_issuer;

	construct();
	destruct();

	bool errorcode encode(
		std.Buffer* buffer,
		SslCertFormat format = SslCertFormat.Pem
	) const;

	string_t errorcode encode() const;

	bool errorcode decode(
		void const* p,
		size_t size,
		SslCertFormat format = SslCertFormat.Pem
	);

	bool errorcode decode(string_t p) {
		return decode(p.m_p, p.m_length, SslCertFormat.Pem);
	}

	bool errorcode load(
		string_t fileName,
		SslCertFormat format = SslCertFormat.Pem
	);

	bool errorcode save(
		string_t fileName,
		SslCertFormat format = SslCertFormat.Pem
	) const;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

string_t errorcode SslCertificate.encode() const {
	std.Buffer buffer;
	encode(buffer, SslCertFormat.Pem);
	size_t length = buffer.m_size;
	buffer.append(0); // ensure zero-termination
	return string_t(buffer.detach(), length);
}

//..............................................................................

//! @}

} // namespace io
