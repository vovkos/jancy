//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_SslCertificate.jnc"
import "io_SslCipher.jnc"

namespace io {

//! \addtogroup io-ssl
//! @{

//..............................................................................

bitflag enum SslStateFlags
{
	Connect         = 0x1000,          // SSL_ST_CONNECT
	Accept          = 0x2000,          // SSL_ST_ACCEPT
	Loop            = 0x01,            // SSL_CB_LOOP
	Exit            = 0x02,            // SSL_CB_EXIT
	Read            = 0x04,            // SSL_CB_READ
	Write           = 0x08,            // SSL_CB_WRITE
	Alert           = 0x4000,          // SSL_CB_ALERT
	ReadAlert       = Alert | Read,    // SSL_CB_READ_ALERT
	WriteAlert      = Alert | Write,   // SSL_CB_WRITE_ALERT
	AcceptLoop      = Accept | Loop,   // SSL_CB_ACCEPT_LOOP
	AcceptExit      = Accept | Exit,   // SSL_CB_ACCEPT_EXIT
	ConnectLoop     = Connect | Loop,  // SSL_CB_CONNECT_LOOP
	ConnectExit     = Connect | Exit,  // SSL_CB_CONNECT_EXIT
	HandshakeStart  = 0x10,            // SSL_CB_HANDSHAKE_START
	HandshakeDone   = 0x20,            // SSL_CB_HANDSHAKE_DONE
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bitflag enum SslVerifyMode
{
	None                        = 0, // SSL_VERIFY_NONE
	VerifyPeerCertificate       = 1, // SSL_VERIFY_PEER
	RequireClientCertificate    = 2, // SSL_VERIFY_FAIL_IF_NO_PEER_CERT
	VerifyClientCertificateOnce = 4, // SSL_VERIFY_CLIENT_ONCE
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// RFC 5114

enum SslStdDh
{
	Dh1024x160,
	Dh2048x224,
	Dh2048x256,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class SslState
{
	size_t const property m_availableCipherCount;
	SslCipher* const property m_availableCipherSet(size_t i);
	SslCipher* const property m_currentCipher;
	size_t const property m_peerCertificateChainLength;
	SslCertificate const* const property m_peerCertificateChain(size_t i);
	SslCertificate const* const property m_peerCertificate;

	SslVerifyMode property m_verifyMode;
	size_t property m_verifyDepth;

	char const* const property m_stateString;
	char const* const property m_stateStringLong;

	event m_onStateChanged(
		SslStateFlags flags,
		int alertInfo
		);

	construct();
	destruct();

	bool errorcode enableCiphers(char const* ciphers);

	bool errorcode setEphemeralDhParams(
		char const* pem,
		size_t length = -1
		);

	bool errorcode loadEphemeralDhParams(char const* fileName);
	bool errorcode setEphemeralDhStdParams(SslStdDh dh = SslStdDh.Dh1024x160);
	bool errorcode setEphemeralEcdhCurve(char const* curveName = "secp112r1");

	bool errorcode loadCertificate(char const* fileName);
	bool errorcode loadPrivateKey(char const* fileName);

	bool errorcode loadVerifyLocations(
		char const* caFileName,
		char const* caDir = null
		);

	bool errorcode shutdown();

protected:
	bool errorcode openSsl(void thin* socket);
}

//..............................................................................

//! @}

} // namespace io
