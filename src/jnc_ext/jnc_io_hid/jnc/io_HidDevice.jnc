//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_base.jncx"
import "io_StreamOptions.jnc"
import "io_StreamEvents.jnc"
import "io_HidEnumerator.jnc"

namespace io {

//! \addtogroup io-hid
//! @{

//..............................................................................

bitflag enum HidDeviceOptions: StreamOptions {
	NonBlocking,
	NoReadThread,
}

typedef StreamEvents HidDeviceEvents;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class HidDevice {
	size_t autoget property m_readBlockSize;
	size_t autoget errorcode property m_readBufferSize;
	uint_t autoget property m_readTimeout;

	HidDeviceOptions autoget errorcode property m_options;
	HidDeviceEvents readonly volatile m_activeEvents;
	std.Error const* readonly volatile m_ioError;
	bool readonly m_isOpen;

	HidDeviceDesc* const property m_deviceDesc;

	construct();
	destruct();

	bool errorcode open(string_t path);

	bool errorcode open(
		uint16_t vid,
		uint16_t pid,
		string_t serialNumber = null
	);

	void close();

	alias dispose = close;

	size_t errorcode getReportDescriptor(
		void* p,
		size_t size
	);

	size_t errorcode getInputReport(
		void* p,
		size_t size
	);

	size_t errorcode getFeatureReport(
		void* p,
		size_t size
	);

	size_t errorcode sendFeatureReport(
		void const* p,
		size_t size
	);

	size_t errorcode read(
		void* p,
		size_t size
	);

	size_t errorcode write(
		void const* p,
		size_t size
	);

	intptr errorcode wait(
		HidDeviceEvents eventMask,
		function* handler(HidDeviceEvents triggeredEvents)
	);

	bool errorcode cancelWait(intptr handle);

	HidDeviceEvents blockingWait(
		HidDeviceEvents eventMask,
		uint_t timeout = -1
	);

	async HidDeviceEvents asyncWait(HidDeviceEvents eventMask);
}

//..............................................................................

//! @}

} // namespace io
