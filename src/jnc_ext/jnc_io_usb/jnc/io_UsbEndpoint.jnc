//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_base.jncx"
import "io_StreamOptions.jnc"
import "io_StreamEvents.jnc"
import "io_UsbInterface.jnc"
import "io_UsbDescriptors.jnc"

namespace io {

//! \addtogroup io-usb
//! @{

//..............................................................................

typedef StreamOptions UsbEndpointOptions;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bitflag enum UsbEndpointEvents: StreamEvents {
	/**
		OUT-endpoint has no active or pending USB transfers. Useful when you
		need to wait for all outbound transfers to complete before closing an
		endpoint.
	*/

	WriteCompleted,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class UsbEndpoint {
	UsbInterface* const m_parentInterface;
	UsbEndpointDescriptor const* const m_endpointDescriptor;

	uint_t autoget property m_transferTimeout; // both read and write
	uint_t autoget property m_readParallelism;
	size_t autoget property m_readBlockSize;
	size_t autoget errorcode property m_readBufferSize;
	size_t autoget errorcode property m_writeBufferSize;

	UsbEndpointOptions autoget property m_options;

	UsbEndpointEvents readonly volatile m_activeEvents;
	std.Error const* readonly volatile m_ioError;

	bool readonly m_isOpen;

	construct();
	destruct();

	void close();
	alias void dispose = close;
	void unsuspend();

	size_t errorcode read(
		void* p,
		size_t size
	);

	size_t errorcode write(
		void const* p,
		size_t size
	);

	intptr errorcode wait(
		UsbEndpointEvents eventMask,
		function* handler(UsbEndpointEvents triggeredEvents)
	);

	bool errorcode cancelWait(intptr handle);

	UsbEndpointEvents blockingWait(
		UsbEndpointEvents eventMask,
		uint_t timeout = -1
	);

	async UsbEndpointEvents asyncWait(UsbEndpointEvents eventMask);
}

//..............................................................................

//! @}

} // namespace io
