//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_base.jncx"
import "io_SocketAddress.jnc"
import "io_SocketOptions.jnc"
import "io_SocketEvents.jnc"

namespace io {

//! \addtogroup io-ssh
//! @{

//..............................................................................

/**
	\import io_ssh.jncx

	\brief This enumeration contains codes of all possible events that might
	happen on `io.SshChannel` object. The set of *active* events is accessible
	via `io.SshChannel.m_activeEvents`.

	\sa `io.SshChannel`
*/

bitflag enum SshEvents: SocketEvents {
	/**
		``SSH`` handshake and protocol information exchange has been completed
		successfully; an authentication request has been set.
	*/

	SshHandshakeCompleted,

	/**
		``SSH`` authentication has failed. You have a chance to re-authenticate:
		ask user for new credentials and then call `io.SshChannel.authenticate`.
	*/

	SshAuthenticateError,

	/**
		``SSH`` authentication has been completed successfully; a request to
		open a channel has been sent.
	*/

	SshAuthenticateCompleted,

	/**
		``SSH`` channel to the server has been opened successfully; a request
		for a specific pseudo-terminal(such as ``xterm``) has been sent.
	*/

	SshChannelOpened,

	/**
		Request to the ``SSH`` server for a specific pseudo-terminal(such as
		``xterm``) has been completed successfully; request to start a remote
		process(such as ``shell``) has been sent.
	*/

	SshPtyRequestCompleted,

	/**
		A remote process(such as ``shell``) has been started; the full ``SSH``
		connect sequence has been completed successfully. ``SSH`` channel is
		ready to use.
	*/

	SshConnectCompleted,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct SshConnectParams {
	SocketAddress m_address;
	string_t m_userName;
	string_t m_privateKeyFileName;
	void const* m_privateKey;
	size_t m_privateKeySize;
	string_t m_password; // or passphrase
	string_t m_channelType;  // session, direct-tcpip, tcpip-forward, etc
	void const* m_channelExtra;
	size_t m_channelExtraSize;
	string_t m_processType;  // shell, exec, subsystem, etc
	void const* m_processExtra;
	size_t m_processExtraSize;
	string_t m_ptyType;      // vanilla, ansi, xterm, vt102, etc
	uint_t m_ptyWidth;
	uint_t m_ptyHeight;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_ssh.jncx

	\brief This class provides high-level asynchronous interface for client-side
	SSH connections.

	Under the hood ``io.SshChannel`` uses libssh2 library.

	A typical sequence of steps when establishing an SSH connection looks like
	this:

	* Call ``open`` method to open underlying socket;
	* Call ``connect`` method to initate connection to ``SSH`` server;
	* Assign IO event handler with ``wait`` method. You would probably also
	  want to *schedule* your event handler to be run in particular
	  environment(e.g., in a specific thread) and partially apply some
	  syncrhonization ID to discard late events;
	* If `io.SshEvents.SshAuthenticateError` event is fired, you can
	  re-authenticate using ``authenticate`` method;
	* Wait until `io.SshEvents.SshConnectCompleted` or `io.SshEvents.IoError`
	  event;
	* When `io.SshEvents.IncomingData` event is fired, read from the file using
	  ``read`` method;
	* Write to the file stream using ``write`` method;
	* Suspend writing if the return value of ``write`` is less than requested;
	* Resume writing on `io.SshEvents.WriteBufferReady` event;
	* Close the SSH channel when no longer needed with ``close`` method.

	.. rubric:: Sample code:

	.. ref-code-block::

		class MyDialog {
			// ...

			io.SshChannel m_ssh;
			uint_t m_syncId;

			construct();

			void open(
				string_t portName,
				uint_t baudRate
			);

			void close();
			void waitSshEvents();

			void onWriteButtonClicked();

			void onSshEvent(
				uint_t syncId,
				`io.SshEvents` triggeredEvents
			);
		}

		MyDialog.connect(
			string_t addrString,
			string_t userName,
			string_t password
		) {
			`io.SocketAddress` sockAddr;
			sockAddr.parse(addrString);

			m_ssh.open();
			m_ssh.connect(sockAddr, userName, password);

			waitSshEvents();

		catch:
			// handle the error...
		}

		MyDialog.close() {
			m_serial.close();
			m_syncId++; // events past this point will be discarded as 'late'
		}

		MyDialog.waitSshEvent() {
			`io.SshEvents` eventMask =
				`io.SshEvents.IoError` |
				`io.SshEvents.SshAuthenticateError` |
				`io.SshEvents.IncomingData`;

			if (!(m_ssh.m_activeEvents & `io.SshEvents.SshConnectCompleted`))
				eventMask |= `io.SshEvents.SshConnectCompleted`;

			m_ssh.wait(eventMask, onPcapEvent ~(++m_syncId) @
				g_mainThreadScheduler);
		}

		MyDialog.onWriteButtonClicked() {
			static char data[] = "a quick brown fox jumps over the lazy dog";
			m_ssh.write(data, sizeof(data));
		}

		MyDialog.onSshEvent(
			uint_t syncId,
			`io.SshEvents` triggeredEvents
		) {
			if (syncId != m_syncId) // late event
				return;

			if (triggeredEvents & `io.SshEvents.IoError`) {
				string_t errorString = m_ssh.m_ioError.m_description;
				// ...
			}

			if (triggeredEvents & `io.SshEvents.SshAuthenticateError`) {
				// show some kind of login dialog ...
				// ...
				// ... then re-authenticate:

				m_ssh.authenticate(userName, password);
			}

			if (triggeredEvents & `io.SshEvents.SshConnectCompleted`) {
				// SSH channel established
			}

			if (triggeredEvents & `io.SshEvents.IncomingData`) {
				char buffer[256];
				size_t size = m_ssh.read(buffer, sizeof(buffer));
				// ...
			}

			waitSshEvents(); // restart wait
		}

	\sa `io.SshEvents`, `io.Socket`, `io.SocketAddress`,
	`io.HostNameResolver`

	\footnote f1

		|footnote-errorcode|

	\footnote f2

		|footnote-disposable|
*/

opaque class SshChannel {
	/**
		This property is used for getting the local address assigned to this
		socket. If the address has not been assigned yet, returns empty address.
	*/

	SocketAddress const property m_address;

	/**
		This property is used for getting the remote address of the peer this
		socket is connected to. If the connection has not been established yet,
		returns empty address.
	*/

	SocketAddress const property m_peerAddress;

	size_t autoget property m_readBlockSize;
	size_t autoget errorcode property m_readBufferSize;
	size_t autoget errorcode property m_writeBufferSize;

	SocketOptions autoget errorcode property m_options;

	io.SshEvents readonly volatile m_activeEvents;
	std.Error const* readonly volatile m_ioError;

	/**
		Holds the open status for the socket, i.e. ``true`` if opened; ``false``
		otherwise.
	*/

	bool readonly m_isOpen;

	construct();
	destruct();


	/**
		Opens a ``TCP`` socket this connection will use for transport.

		Returns ``true`` on success. If a new socket could not be opened, IO
		error supplied by operating system is set and then the function returns
		``false`` [#f1]_.
	*/

	bool errorcode open(AddressFamily family);

	/**
		Opens a ``TCP`` socket this connection will use for transport.

		Returns ``true`` on success. If a new socket could not be opened, IO
		error supplied by operating system is set and then the function returns
		``false`` [#f1]_.
	*/

	bool errorcode open(SocketAddress const* address);

	/**
		Closes ``SSH`` channel and underlying ``TCP`` socket; does nothing if
		connection is not and not being established.

		Sometimes it may be convenient to use *disposable* pattern to ensure
		timely invokation of ``close`` [#f2]_.
	*/

	void close();

	/**
		Effectively makes ``io.SshChannel`` a *disposable* class [#f2]_.
	*/

	alias dispose = close;

	/**
		Initiates a connection request to ``address``.

		The meanings of the arguments for this function are as follows:

		* ``address`` specifes the remote ``SSH`` server to connect to;
		* ``userName`` and ``password`` specify user credential used to login to
		  this SSH server;
		* ``channelType`` specifies the type of the channel to establish
		  (typically, ``session``; can also be ``direct-tcpip``,
		  ``tcpip-forward``, etc);
		* ``processType`` specifies what kind of process to run on the server
		  side of this ``SSH`` channel(typically, ``shell``; can also be
		  ``exec``, ``subsystem`` etc);
		* ``ptyType`` specifies what type of pseudo terminal kind of process to
		  run on the server side of this ``SSH`` channel(typically, ``xterm``;
		  can also be ``ansi``, ``vanilla`` etc);
		* ``ptyWidth`` and ``ptyHeight`` specify the size of the
		  pseudo-terminal;
		* ``isSync`` specifies whether this is a synchronous connect.

		Returns ``true`` on success. If a connection could not be initiated,
		corresponding error is set and then the function returns ``false``
		[#f1]_.
	*/

	bool errorcode connect(
		SocketAddress const* address,
		string_t userName,
		string_t password,
		string_t channelType = "session", // session, direct-tcpip, tcpip-forward, etc
		string_t processType = "shell",   // shell, exec, subsystem, etc
		string_t ptyType = "xterm",       // vanilla, ansi, xterm, vt102, etc
		uint_t ptyWidth = 80,
		uint_t ptyHeight = 24
	);

	bool errorcode connect(SshConnectParams const* params);

	/**
		Sends a request to SSH server to re-authenticate on ``AuthError`` event.

		Returns ``true`` on success. If re-authenticate request could not be
		sent, returns ``false`` [#f1]_.
	*/

	bool errorcode authenticate(
		string_t userName,
		string_t password
	);

	bool errorcode authenticate(
		string_t userName,
		string_t privateKeyFileName,
		string_t passphrase
	);

	bool errorcode authenticate(
		string_t userName,
		void const* privateKey,
		size_t privateKeySize,
		string_t passphrase
	);

	/**
		Sends a request to SSH server to resize pseudo-terminal to ``width`` x
		``height``. If ``isSync`` is ``true`` then this method does not return
		until the remote server completes the request.

		Returns ``true`` on success. If pseudo-terminal could not be resized,
		error returned by the remote server is set and then the function returns
		``false`` [#f1]_.
	*/

	bool errorcode resizePty(
		uint_t width,
		uint_t height
	);

	/**
		Attempts to receive up to ``size`` bytes from the SSH socket into the
		buffer pointed to by ``p``.

		Returns the actual amount of bytes read on success. If read operation
		is unsuccessful, IO error supplied by the operating system is set and
		then the function returns ``-1`` [#f1]_.

		Normally you would call this function from within your event handler
		for ``IncomingData`` event. If this function is called when there is
		no incoming data, it blocks until either the data arrives, or the socket
		is closed.
	*/

	size_t errorcode read(
		void* p,
		size_t size
	);

	/**
		Attempts to send ``size`` bytes from the buffer pointed to by ``p`` over
		the established SSH channel.

		Returns the actual amount of bytes written on success. If write
		operation is unsuccessful, IO error supplied by the operating system is
		set and then the function returns ``-1`` [#f1]_.

		If the return value shows *less* bytes than specified by ``size``
		argument, you should suspend further transmission until the file stream
		is ready to accept more data. When this happens, ``WriteBufferReady``
		event is fired and transmission could be resumed.
	*/

	size_t errorcode write(
		void const* p,
		size_t size
	);

	intptr errorcode wait(
		SshEvents eventMask,
		function* handler(SshEvents triggeredEvents)
	);

	bool errorcode cancelWait(intptr handle);

	SshEvents blockingWait(
		SshEvents eventMask,
		uint_t timeout = -1
	);

	async SshEvents asyncWait(SshEvents eventMask);
}

//..............................................................................

//! @}

} // namespace io
