//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace jnc {

//! \addtogroup rtl-regex
//! @{

//..............................................................................

opaque class RegexMatch {
	size_t readonly m_offset;
	size_t readonly m_endOffset;
	size_t const property m_length;
	char const* const property m_text;

	construct();
	destruct();
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

size_t RegexMatch.m_length.get() const {
	return m_endOffset - m_offset;
}

//..............................................................................

bitflag enum RegexExecFlags {
	Stream,          // feed data chunk-by-chunk, then call jnc.Regex.eof()
	DisableCapture,  // don't capture sub-matches
	AnchorDataBegin, // match must start on the first byte of data
	AnchorDataEnd,   // match must end on the last byte of data
	ExactMatch = AnchorDataBegin | AnchorDataEnd,
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum RegexExecResult {
	Match            = 2,
	MatchOffsetsOnly = 1,
	NoMatch          = 0,
	Continue         = -1, // continue feeding data
	ContinueBackward = -2, // continue feeding backward data
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class RegexState {
	RegexExecFlags const property m_execFlags;
	RegexExecResult const property m_lastExecResult;
	size_t const property m_matchSwitchCaseId;
	size_t const property m_matchEndOffset;
	RegexMatch const* const property m_match;
	size_t const property m_subMatchCount;
	RegexMatch const* const property m_subMatchArray(size_t i);

	construct();

	construct(
		RegexExecFlags execFlags = 0,
		size_t offset = 0
	);

	destruct();

	void initialize(
		RegexExecFlags execFlags = 0,
		size_t offset = 0
	);
}

//..............................................................................

enum RegexCompileFlag {
	CaseInsensitive = 0x01,
	MatchOnly       = 0x02, // don't demux NFA and no search start states
	DisableCapture  = 0x04, // same as ExecFlag_NoCapture
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum RegexKind {
	Undefined,
	Single,
	Switch,
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class Regex {
	RegexKind readonly m_regexKind;

	construct();
	destruct();

	void clear();

	size_t errorcode load(
		void const* p,
		size_t size
	);

	std.Buffer* errorcode save() {
		std.Buffer buffer;
		save(buffer);
		return buffer;
	}

	bool errorcode compile(
		uint_t flags,
		char const* source,
		size_t length = -1
	);

	bool errorcode compile(
		char const* source,
		size_t length = -1
	) {
		return compile(0, source, length);
	}

	void createSwitch();

	size_t errorcode compileSwitchCase(
		uint_t flags,
		char const* source,
		size_t length = -1
	);

	size_t errorcode compileSwitchCase(
		char const* source,
		size_t length = -1
	) {
		return compileSwitchCase(0, source, length);
	}

	void finalizeSwitch(uint_t flags = 0);

	RegexExecResult exec(
		RegexState* state,
		char const* p,
		size_t length = -1
	) const;

	RegexState* exec(
		uint_t flags,
		char const* p,
		size_t length = -1
	) const {
		RegexState state(flags);
		exec(state, p, length);
		return state;
	}

	RegexState* exec(
		char const* p,
		size_t length = -1
	) const {
		return exec(0, p, length);
	}

	RegexExecResult eof(RegexState* state);
}

//..............................................................................

//! @}

} // namespace jnc
