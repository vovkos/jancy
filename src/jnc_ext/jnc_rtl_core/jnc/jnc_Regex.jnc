//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace jnc {

//! \addtogroup rtl-regex
//! @{

//..............................................................................

/**
	\brief This struct holds the information about matched lexeme or sub-lexeme.
*/

struct RegexMatch {
	//! Holds a pointer to the match (guaranteed to be null-terminated).

	char const* m_text;

	//! Holds offset of the match relative the beginning of input stream.

	size_t m_offset;

	//! Holds length of the match.

	size_t m_length;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\brief This enum describes available option flags for `jnc.RegexState`.
*/

bitflag enum RegexStateFlags {
	//! Makes it possible to match input incrementally, i.e. chunk-by-chunk.

	Incremental,

	/**
		When a *final DFA state* is reached, it's condidered a successful match
		even when subsequent characters don't match the regular expression. This
		behavior is typically required in *lexers* -- hence, the name.
	*/

	Lexer,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\brief This class holds the lexeme buffer and the state of DFA constructed
	from an ``reswitch`` statement.

	Jancy ``reswitch`` statements allow for convenient creation of lexers and/or
	scanners.

	The idea is taken from well-known tools like *Lex*, *Flex*, *Ragel* etc.

	1. Define a list of recognized lexemes in the form of regular expressions.
	2. Specify which actions to execute when these lexemes are found in the
	   input stream.
	3. Jancy compiler automatically builds a DFA to recognize your language and
	   perform correspondig actions.

	To *execute* the resulting DFA you need a ``jnc.RegexState`` object -- it
	will hold the state of DFA and buffer matched lexemes. In its simplest form
	recognizer looks like this:

	.. ref-code-block::

		jnc.RegexState state;
		reswitch (state, p, length) {
		case "foo":
			// ...
			break;

		case r"bar\(d+)":
			print($"bar id: $(state.m_subMatchArray [0].m_text)\n");
			break;

		case r"\s+":
			// ignore whitespace
			break;

		// ...
		}

	To employ incremental recognition, you would want to create some kind of a
	*match* function and call it each time the next chunk of data becomes
	available:

	.. ref-code-block::

		bool errorcode match(
			jnc.RegexState* state,
			const char* p,
			size_t length
		) {
			const char* end = p + length;

			// post-condition loop allows passing 'null' as eof
			do {
				reswitch (state, p, end - p) {
				case "foo":
					// ...
					break;

				case r"bar\(d+)":
					print($"bar id: $(state.m_subMatchArray [0].m_text)\n");
					break;

				case r"\s+":
					// ignore whitespace
					break;

				// ...

				default:
					// we can get here for two reasons only:
					//   1) mismatch
					//   2) incremental recognition

					if (!state.m_consumedLength)
						return false;

					assert(
						(state.m_flags & jnc.RegexStateFlags.Incremental) &&
						state.m_consumedLength == end - p);
				}

				p += state.m_consumedLength;
			} while (p < end || state.m_replayLength);

			return true;
		}

	Recognizer must be aware of the fact it is being fed the date chunk-by-chunk
	(and not as the whole). You do so by setting the `jnc.RegexStateFlags.Incremental`
	bit in the `jnc.RegexState.m_flags` field:

	.. ref-code-block::

		jnc.RegexState state(jnc.RegexStateFlags.Incremental);

		// alternatively, assign:
		// state.m_flags |= jnc.RegexStateFlags.Incremental;

	Now, whenever the next portion of data becomes available, simply call:

	.. ref-code-block::

		size_t length = getNextPortionOfData(buffer);

		match(state, buffer, length);

	Pass zero-sized buffer to trigger ``eof`` processing:

	.. ref-code-block::

		match(state, null, 0);

*/

opaque class RegexState {
	/**
		Holds the matching options. Normally, you set it during (or immediately
		after) the construction. But it's freely adjustible at any moment.
	*/

	RegexStateFlags m_flags;

	/**
		Holds the maximum buffer size for lexemes. Set before starting
		recognition.

		What happends when lexeme in the input stream does not fit inside
		the buffer, depends on the whether the captured part of lexeme *already*
		matches some rule. If yes, recognizer will execute corresponding action
		and then reset its state to initial value.

		If captured part of lexeme does not match any rules, ``write`` or
		``recognize`` will return error.
	*/

	size_t autoget property m_matchLengthLimit;

	/**
		Holds the current offset of recognizer.

		Could be adjusted manually. For example, you can adjust
		``m_currentOffset`` before starting recognition; when a lexeme is found,
		``m_lexemeOffset`` will account for the initial offset(offset relative
		the beginning of the stream plus initial offset set before starting
		recognition).
	*/

	size_t autoget property m_currentOffset;

	/**
		Holds the actual length of data consumed during the last invokation of
		the DFA. When non-incremental recognizer discovers a match,
		``m_consumedLength`` will always be the same as ``m_match.m_length``. In
		case of a incremental recognizer, ``m_consumedLength`` may be smaller
		than ``m_match.m_length`` (the match may be spread across multiple
		blocks of input data).
	*/

	size_t readonly m_consumedLength;

	/**
		Holds the length of buffered *replay data*. During incremental
		recognition, replay data will be processed prior to any user-supplied
		data.

		Replays can only happen after a successful match.
	*/

	size_t readonly m_replayLength;

	/**
		\subgroup

		These fields hold information about the matched lexeme and, possibly,
		sub-lexemes(if capturing regular expressions groups were used).

		These fields should only be accessed from within **action** inside
		``automaton`` function.
	*/

	RegexMatch readonly m_match;
	RegexMatch const* readonly m_subMatchArray;
	size_t readonly m_subMatchCount;

public:
	/**
		Constructor of ``jnc.RegexState`` class. Accepts a single optional
		argument ``flags`` which will be used to initialize the
		`jnc.RegexState.m_flags` field.
	*/

	construct(RegexStateFlags flags = 0);

	/**
		Resets state of recognizer including all offsets and captured lexeme
		bytes.
	*/

	void reset();

protected:
	size_t exec(
		void thin* dfa,
		char const* p,
		size_t length
	);
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class RegexDfa {
	construct();
	destruct();

	void clear();

	bool errorcode compile(
		char const* regexString,
		size_t length = -1
	) {
		clear();
		return incrementalCompile(regexString, length) && finalize();
	}

	bool errorcode incrementalCompile(
		char const* regexString,
		size_t length = -1
	);

	bool errorcode finalize();

	size_t errorcode match(
		RegexState* state,
		char const* p,
		size_t length = -1
	) const;
}

//..............................................................................

//! @}

} // namespace jnc
