//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace jnc {

//! \addtogroup rtl-regex
//! @{

//..............................................................................

enum RegexExecResult {
	ErrorInconsistent = -2, // RE2::SM::ErrorInconsistent - reverse scan couldn't find a match (inconsistent data)
	ErrorOutOfMemory  = -1, // RE2::SM::ErrorOutOfMemory  - DFA run out-of-memory
	Mismatch          = 0,  // RE2::SM::Mismatch          - match can't be found
	Continue,               // RE2::SM::Continue,         - match not found yet; continue feeding next chunks of data
	ContinueBackward,       // RE2::SM::ContinueBackward  - match end found; continue feeding previous chunks of data
	Match,                  // RE2::SM::Match,            - match end & start found
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bitflag enum RegexExecFlags {
	AnchorStart        = 0x01, // RE2::SM::kAnchorStart or RE2::ANCHOR_START
	FullMatch          = 0x02, // RE2::SM::kFullMatch   or RE2::ANCHOR_BOTH
	MatchEndOffsetOnly = 0x04, // RE2::SM::kMatchEndOffsetOnly
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum {
	RegexEofChar = 256, // RE2::SM::kByteEndText
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class RegexCapture {
	uint64_t readonly m_offset;
	uint64_t readonly m_endOffset;
	uint64_t const property m_size;
	string_t const property m_text;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class RegexMatch: RegexCapture {
	uint_t readonly m_id;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class RegexState {
	RegexExecFlags const property m_execFlags;
	uint64_t const property m_baseOffset;
	int const property m_baseChar;
	uint64_t const property m_eofOffset;
	int const property m_eofChar;

	RegexMatch const* m_match;

	construct(RegexExecFlags flags = 0) {
		init(anchor, 0, RegexEofChar, -1, RegexEofChar);
	}

	construct(
		RegexExecFlags flags,
		uint64_t baseOffset,
		int baseChar,
		uint64_t eofOffset = -1,
		int eofChar = RegexEofChar
	) {
		init(anchor, baseOffset, baseChar, eofOffset, eofChar);
	}

	void destruct();

	void reset(
		RegexExecFlags flags,
		uint64_t baseOffset,
		int baseChar,
		uint64_t eofOffset,
		int eofChar = RegexEofChar
	);

	void reset(RegexExecFlags flags = 0) {
		reset(flags, 0, RegexEofChar, -1, RegexEofChar);
	}

	void setEof(
		uint64_t offset,
		int eofChar = EofChar
	);

protected:
	void init(
		RegexExecFlags flags,
		uint64_t baseOffset,
		int baseChar,
		uint64_t eofOffset,
		int eofChar = EofChar
	);
}

//..............................................................................

bitflag enum RegexFlags {
	OneLine         = 0x10, // RE2::Options.one_line -> true (otherwise, false)
	Latin1          = 0x20, // RE2::Options.encoding -> EncodingLatin1 (otherwise, UTF8)
	CaseInsensitive = 0x40, // RE2::Options.case_sensitive -> (otherwise, false)
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum RegexKind {
	Undefined, // RE2::SM::kUninitialized
	Single,	   // RE2::SM::kSingleRegexp
	Switch,	   // RE2::SM::kRegexpSwitch
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class Regex {
	RegexKind readonly m_regexKind;
	RegexFlags readonly m_flags;
	string_t const property m_pattern;
	size_t readonly m_captureCount;
	size_t readonly m_switchCaseCount;
	string_t const property m_switchCasePattern(uint_t id);
	size_t const property m_switchCaseCaptureCount(uint_t id);

	construct() {
		init();
	}

	construct(string_t pattern) {
		init();
		compile(pattern);
	}

	construct(
		RegexFlags flags,
		string_t pattern
	) {
		init();
		compile(flags, pattern);
	}

	destruct();

	// compilation

	void clear();

	bool errorcode compile(
		RegexFlags flags,
		string_t source
	);

	bool errorcode compile(string_t source) {
		return compile(0, source);
	}

	void createSwitch(RegexFlags flags = 0);
	uint_t errorcode compileSwitchCase(string_t source);
	bool errorcode finalizeSwitch();

	// serialization

	size_t errorcode load(
		void const* p,
		size_t size
	);

	size_t errorcode save(std.Buffer* buffer);

	std.Buffer* errorcode save() {
		std.Buffer buffer;
		save(buffer);
		return buffer;
	}

	// execution

	RegexExecResult exec(
		RegexState* state,
		string_t chunk
	) const;

	RegexMatch const* exec(string_t text) const {
		return exec(RegexAnchor.None, text);
	}

	RegexMatch const* exec(
		RegexExecFlags flags,
		string_t text
	) const {
		RegexState state(flags);
		execEof(state, text);
		return state.m_match;
	}

	RegexExecResult execEof(
		RegexState* state,
		string_t lastChunk,
		int eofChar = RegexEofChar
	) const;

	RegexExecResult execEof(
		RegexState* state,
		int eofChar = RegexEofChar
	) const {
		return execEof(state, null, eofChar);
	}

	bool errorcode captureSubmatches(
		uint64_t matchOffset,
		string_t matchText,
		RegexCapture* submatchArray,
		size_t count
	) const;

	bool errorcode captureSubmatches(
		RegexCapture const* match,
		RegexCapture* submatchArray,
		size_t count
	) const {
		return captureSubmatches(
			match.m_offset,
			match.m_text,
			submatchArray,
			count
		);
	}

	bool errorcode captureSwitchCaseSubmatches(
		uint_t switchCaseId,
		uint64_t matchOffset,
		string_t matchText,
		RegexCapture* submatchArray,
		size_t count
	) const;

	bool errorcode captureSwitchCaseSubmatches(
		uint_t switchCaseId,
		RegexCapture const* match,
		RegexCapture* submatchArray,
		size_t count
	) const {
		return captureSwitchCaseSubmatches(
			switchCaseId,
			match.m_offset,
			match.m_text,
			submatchArray,
			count
		);
	}

protected:
	void
	init();
}

//..............................................................................

//! @}

} // namespace jnc
