//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace jnc {

//! \addtogroup rtl-core
//! @{

//..............................................................................

void* createDataPtr(
	void thin* p,
	size_t length = -1
);

void const* createDataPtr(
	void const thin* p,
	size_t length = -1
);

/**
	Clears the cache of dynamically calculated offsets inside a
	``dynamic struct``.

	Jancy runtime optimizes access to dynamic structures by caching the
	calucated offsets of dynamic fields. The cache is stored inside a buffer
	itself(as part of jnc.Box, not as part of a dynamic pointer). Therefore,
	it's necessary to drop this cache if you are about to re-use the same buffer
	by re-writing it with another block of memory and analyzing it agani with
	dynamic structures.

	Note that dropping the cache is not required if you just want to analyze the
	same buffer with other ``dynamic struct`` pointers -- the cache is smart
	enough to distinguish between multiple dynamic structure types.

	.. rubric:: Sample code:

	.. ref-code-block::

		dynamic struct HeaderA {
			// ...
		};

		dynamic struct HeaderB {
			// ...
		};

		char buffer[1024];

		file.read(buffer, sizeof(buffer));

		HeaderA const* a = (HeaderA const*) buffer;

		// access the buffer via dynamic struct A...

		file.read(buffer, sizeof(buffer));

		// we need to drop the previous cache -- otherwise,
		// Jancy runtime will re-use pre-calculated offsets.
		// that, obviously, will yield wrong resultts (the data is different)

		jnc.resetDynamicLayout(buffer);

		HeaderA const* a = (HeaderA const*) buffer;

		// access the buffer via dynamic struct A...

		// no need to drop cache before accessing the same
		// buffer with a different dynamic struct pointer

		HeaderB const* b = (HeaderB const*) buffer;

*/

void resetDynamicLayout(void const* p);

//..............................................................................

//! @}

} // namespace jnc {
