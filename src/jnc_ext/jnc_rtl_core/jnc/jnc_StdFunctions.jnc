//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace jnci {

///+++

//..............................................................................

///; static char dynamicSizeOfSrc[] =

size_t dynamicSizeOf(void const* p);

///; static char dynamicCountOfSrc[] =

size_t dynamicCountOf(
	void const* p,
	void thin* type
);

///; static char dynamicTypeSizeOfSrc[] =

size_t dynamicTypeSizeOf(
	void const* p,
	void thin* type
);

///; static char dynamicFieldSizeOfSrc[] =

size_t dynamicFieldSizeOf(
	void const* p,
	void thin* type,
	void thin* field
);

///; static char dynamicFieldCountOfSrc[] =

size_t dynamicFieldCountOf(
	void const* p,
	void thin* type,
	void thin* field
);


///; static char dynamicCastDataPtrSrc[] =

void* dynamicCastDataPtr(
	void const* p,
	void thin* type
);

///; static char dynamicCastClassPtrSrc[] =

class* dynamicCastClassPtr(
	class const* p,
	void thin* type
);

///; static char dynamicCastVariantSrc[] =

bool dynamicCastVariant(
	variant_t v,
	void thin* type,
	void thin* buffer
);

///; static char strengthenClassPtrSrc[] =

class* strengthenClassPtr(class weak* p);

///; static char assertionFailureSrc[] =

void assertionFailure(
	char const thin* fileName,
	int line,
	char const thin* condition,
	char const thin* message
);

///; static char addStaticDestructorSrc[] =

void addStaticDestructor(void thin* dtor);

///; static char addStaticClassDestructorSrc[] =

void addStaticClassDestructor(
	void thin* dtor,
	class* obj
);

///; static char appendFmtLiteralSrc_a[] =

size_t appendFmtLiteral_a(
	FmtLiteral thin* fmtLiteral,
	char const thin* p,
	size_t length
);

///; static char appendFmtLiteralSrc_p[] =

size_t appendFmtLiteral_p(
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	char const* p
);

///; static char appendFmtLiteralSrc_i32[] =

size_t appendFmtLiteral_i32(
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	int32_t value
);

///; static char appendFmtLiteralSrc_ui32[] =

size_t appendFmtLiteral_ui32(
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	uint32_t value
);

///; static char appendFmtLiteralSrc_i64[] =

size_t appendFmtLiteral_i64(
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	int64_t value
);

///; static char appendFmtLiteralSrc_ui64[] =

size_t appendFmtLiteral_ui64(
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	uint64_t value
);

///; static char appendFmtLiteralSrc_f[] =

size_t appendFmtLiteral_f(
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	double value
);

///; static char appendFmtLiteralSrc_v[] =

size_t appendFmtLiteral_v(
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	variant_t value
);

///; static char appendFmtLiteralSrc_s[] =

size_t appendFmtLiteral_s(
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	string_t value
);

///; static char appendFmtLiteralSrc_re[] =

size_t appendFmtLiteral_re(
	FmtLiteral thin* fmtLiteral,
	char const thin* fmtSpecifier,
	jnc.RegexCapture const* capture
);

///; static char tryCheckDataPtrRangeDirectSrc[] =

bool errorcode tryCheckDataPtrRangeDirect(
	void thin const* p,
	void thin const* rangeBegin,
	size_t rangeLength
);

///; static char checkDataPtrRangeDirectSrc[] =

void checkDataPtrRangeDirect(
	void thin const* p,
	void thin const* rangeBegin,
	size_t rangeLength
);

///; static char tryLazyGetDynamicLibFunctionSrc[] =

void thin* errorcode tryLazyGetDynamicLibFunction(
	jnc.DynamicLib* lib,
	size_t index,
	char thin const* name
);

///; static char lazyGetDynamicLibFunctionSrc[] =

void thin* lazyGetDynamicLibFunction(
	jnc.DynamicLib* lib,
	size_t index,
	char thin const* name
);

///; static char getDynamicFieldSrc[] =

void thin* getDynamicField(
	void const* p,
	void thin* type,
	void thin* field
);

///;

//..............................................................................

///---

} // namespace jnci
