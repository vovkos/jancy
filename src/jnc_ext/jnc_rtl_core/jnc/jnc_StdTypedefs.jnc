//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

//! \addtogroup c-typedefs
//! @{

/**
	The internal implementation of the built-in string type. Fields ``m_p`` and
	``m_length`` can be accessed directly. To get the contents of ``m_sz``, cast
	a string to ``char const*``.
*/

struct String {
	char const* readonly m_p;
	protected char const* m_sz;
	size_t readonly m_length;
}

/**
	A built-in string type -- a UTF-8 string slice, not necessarily null-terminated.
	When a null-terminated version of this slice is required, it's automatically
	generated and cached.
*/

typedef String string_t;

/**
	The internal implementation of the built-in variant type.
*/

struct Variant {
protected:
	union {
		char m_data[sizeof(size_t) * 6];
		uint64_t _m_align64;
	}

	size_t _m_padding;
	jnc.Type* m_type;
}

/**
	The built-in variant type. Variables or fields of this type can hold values of
	any other type.
*/

typedef Variant variant_t;

/**
	Signed integer type with size equal to the size of a pointer on the given
	platform. On 32-bit platform ``intptr_t`` is identical to ``int32_t``; on
	64-bit platforns ``intptr_t`` is identical to ``int64_t``.
*/

typedef intptr intptr_t;

/**
	\subgroup

	Unsigned integer type with size equal to the size of a pointer on the given
	platform. On 32-bit platform both ``uintptr_t`` and ``size_t`` are identical
	to ``uint32_t``; on 64-bit platforns they are identical to ``uint64_t``.
*/

typedef unsigned intptr uintptr_t;
typedef unsigned intptr size_t;

/**
	\subgroup

	Signed integer type with width of 8 bits.
*/

typedef char int8_t;
typedef char utf8_t;

/**
	\subgroup

	Unsigned integer type with width of 8 bits.
*/

typedef unsigned char uint8_t;
typedef unsigned char uchar_t;
typedef unsigned char byte_t;

/**
	\subgroup

	Signed integer type with width of 16 bits.
*/

typedef short int16_t;
typedef short utf16_t;

/**
	\subgroup

	Unsigned integer type with width of 16 bits.
*/

typedef unsigned short uint16_t;
typedef unsigned short ushort_t;
typedef unsigned short word_t;

/**
	\subgroup

	Signed integer type with width of 32 bits.
*/

typedef int int32_t;
typedef int utf32_t;

/**
	\subgroup

	Unsigned integer type with width of 32 bits.
*/

typedef unsigned int uint32_t;
typedef unsigned int uint_t;
typedef unsigned int dword_t;

/**
	Signed integer type with width of 64 bits.
*/

typedef long int64_t;

/**
	\subgroup

	Unsigned integer type with width of 64 bits.
*/

typedef unsigned long uint64_t;
typedef unsigned long ulong_t;
typedef unsigned long qword_t;

//! @}

//..............................................................................
