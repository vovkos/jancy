//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_base.jncx"
import "io_ssl.jncx"

import "io_SocketAddress.jnc"
import "io_SocketOptions.jnc"
import "io_SslState.jnc"

namespace io {

//! \addtogroup io-websock
//! @{

//..............................................................................

bitflag enum WebSocketEvents
{
	IoError,
	IncomingMessage,
	ReadBufferFull,
	WriteBufferEmpty,
	WriteBufferReady = WriteBufferEmpty,
	IncomingConnection,
	TcpConnected,
	TcpDisconnected,
	TcpReset,
	SslHandshakeCompleted,
	WebSocketHandshakeCompleted,
}

enum WebSocketMessageType
{
	Undefined,
	Text,
	Binary
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class WebSocket
{
	SocketAddress const property m_address;
	SocketAddress const property m_peerAddress;
	SslState* m_sslState;

	size_t autoget property m_readBlockSize;
	size_t autoget property m_readBufferSize;
	size_t autoget property m_writeBufferSize;
	SocketOptions autoget property m_options;

	io.WebSocketEvents readonly volatile m_activeEvents;
	std.Error const* readonly volatile m_ioError;

	bool readonly m_isOpen;

	construct();
	destruct();

	bool errorcode open(
		AddressFamily family,
		bool isSecure = false
		);

	bool errorcode open(
		SocketAddress const* address,
		bool isSecure = false
		);

	void close();

	alias dispose = close;

	bool errorcode connect(
		SocketAddress const* address,
		char const* resource,
		char const* host
		);

	bool errorcode listen(size_t backlog = 0); // 0 -- default

	WebSocket* errorcode accept(
		SocketAddress* address = null,
		bool isSuspended = false
		);

	void unsuspend();

	size_t errorcode readMessage(
		WebSocketMessageType* type,
		void* p,
		size_t size
		);

	size_t errorcode readMessage(
		void* p,
		size_t size
		)
	{
		return readMessage(null, p, size);
	}

	size_t errorcode writeMessage(
		WebSocketMessageType type,
		void const* p,
		size_t size
		);

	size_t errorcode writeTextMessage(
		char const* p,
		size_t length = -1
		)
	{
		return writeMessage(WebSocketMessageType.Text, p, length != -1 ? length : strlen(p));
	}

	size_t errorcode writeBinaryMessage(
		void const* p,
		size_t size
		)
	{
		return writeMessage(WebSocketMessageType.Binary, p, size);
	}

	intptr errorcode wait(
		WebSocketEvents eventMask,
		function* handler(WebSocketEvents triggeredEvents)
		);

	bool errorcode cancelWait(intptr handle);

	WebSocketEvents blockingWait(
		WebSocketEvents eventMask,
		uint_t timeout = -1
		);

	async WebSocketEvents asyncWait(WebSocketEvents eventMask);
}

//..............................................................................

//! @}

} // namespace io
