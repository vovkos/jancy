//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_base.jncx"
import "io_ssl.jncx"
import "io_SocketAddress.jnc"
import "io_SocketOptions.jnc"
import "io_SocketEvents.jnc"
import "io_SslState.jnc"
import "io_WebSocketHandshake.jnc"

namespace io {

//! \addtogroup io-websock
//! @{

//..............................................................................

bitflag enum WebSocketOptions: SocketOptions
{
	/**
		Make incoming control frames such as ``Close``, ``Ping`` & ``Pong``
		available via `io.WebSocket.read`
	*/

	IncludeControlFrames,

	/**
		Disable automatic transmission of ``Pong`` replies. You would need to
		read incoming control ``Ping`` frame and then manually send a ``Pong``
		using `io.WebSocket.pong`.
	*/

	DisableAutoPong,

	/**
		Disable automatic transmission of ``101 Switching Protocols`` handshake
		response from the server. After accepting a conneciton, you can inspect
		the handshake request via `io.WebSocket.m_handshakeRequest` and then
		issue a handshake response via `io.WebSocket.serverHandshake` (thus
		either accepting or rejecting the incoming WebSocket upgrade request).
	*/

	DisableAutoServerHandshake,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bitflag enum WebSocketEvents: SocketEvents
{
	SslHandshakeCompleted,
	WebSocketHandshakeCompleted,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

enum WebSocketFrameOpcode
{
	Continuation = 0,
	Text         = 1,
	Binary       = 2,
	Close        = 8,
	Ping         = 9,
	Pong         = 10,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class WebSocket
{
	SocketAddress const property m_address;
	SocketAddress const property m_peerAddress;
	SslState* readonly m_sslState; // valid only after secure-open
	WebSocketHandshake const* readonly m_handshakeRequest;
	WebSocketHandshake const* readonly m_handshakeResponse;

	size_t autoget property m_incomingFrameSizeLimit;
	size_t autoget property m_incomingMessageSizeLimit;
	size_t autoget property m_outgoingFragmentationThreshold;

	size_t autoget property m_readBlockSize;
	size_t autoget property m_readBufferSize;
	size_t autoget property m_writeBufferSize;
	WebSocketOptions autoget property m_options;

	io.WebSocketEvents readonly volatile m_activeEvents;
	std.Error const* readonly volatile m_ioError;

	bool readonly m_isOpen;

	construct();
	destruct();

	bool errorcode open(
		AddressFamily family,
		bool isSecure = false
		);

	bool errorcode open(
		SocketAddress const* address,
		bool isSecure = false
		);

	void close();

	alias dispose = close;

	bool errorcode connect(
		SocketAddress const* address,
		char const* resource,
		char const* host,
		WebSocketHandshakeHeaders const* extraHeaders = null
		);

	bool errorcode listen(size_t backlog = 0); // 0 -- default

	WebSocket* errorcode accept(
		SocketAddress* address = null,
		bool isSuspended = false
		);

	void unsuspend();

	bool errorcode serverHandshake(
		uint_t statusCode,
		char const* statusText,
		WebSocketHandshakeHeaders const* extraHeaders = null
		);

	bool errorcode serverHandshake(WebSocketHandshakeHeaders const* extraHeaders = null)
	{
		return handshake(101, "Switching Protocols", extraHeaders);
	}

	size_t errorcode read(
		WebSocketFrameOpcode* opcode,
		void* p,
		size_t size
		);

	size_t errorcode read(
		void* p,
		size_t size
		)
	{
		return readMessage(null, p, size);
	}

	size_t errorcode write(
		WebSocketOpcode opcode,
		void const* p,
		size_t size
		);

	size_t errorcode writeText(
		char const* p,
		size_t length = -1
		)
	{
		return write(WebSocketFrameOpcode.Text, p, length != -1 ? length : strlen(p));
	}

	size_t errorcode writeBinary(
		void const* p,
		size_t size
		)
	{
		return write(WebSocketFrameOpcode.Binary, p, size);
	}

	bool errorcode ping(
		void const* p,
		size_t size
		)
	{
		return write(WebSocketFrameOpcode.Ping, p, size);
	}

	bool errorcode ping()
	{
		return ping(null, 0);
	}

	bool errorcode pong(
		void const* p,
		size_t size
		)
	{
		return write(WebSocketFrameOpcode.Pong, p, size);
	}

	bool errorcode pong()
	{
		return pong(null, 0);
	}

	intptr errorcode wait(
		WebSocketEvents eventMask,
		function* handler(WebSocketEvents triggeredEvents)
		);

	bool errorcode cancelWait(intptr handle);

	WebSocketEvents blockingWait(
		WebSocketEvents eventMask,
		uint_t timeout = -1
		);

	async WebSocketEvents asyncWait(WebSocketEvents eventMask);
}

//..............................................................................

//! @}

} // namespace io
