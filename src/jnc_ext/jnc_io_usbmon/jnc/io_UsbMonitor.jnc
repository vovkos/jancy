//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_base.jncx"
import "io_StreamEvents.jnc"
import "io_StreamOptions.jnc"
import "io_UsbMonTransfer.jnc"

namespace io {

//! \addtogroup io-usbmon
//! @{

//..............................................................................

bitflag enum UsbMonOptions {
	CompletedTransfersOnly = 2,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

typedef ReadOnlyStreamEvents UsbMonEvents;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

opaque class UsbMonitor {
	uint_t autoget errorcode property m_addressFilter;
	uint_t autoget property m_readParallelism;
	size_t autoget errorcode property m_kernelBufferSize; // 0 -- use platform default
	size_t autoget property m_readBlockSize;
	size_t autoget errorcode property m_readBufferSize;

	UsbMonOptions autoget errorcode property m_options;
	UsbMonEvents readonly volatile m_activeEvents;
	std.Error const* readonly volatile m_ioError;
	bool readonly m_isOpen;

	construct();
	destruct();

	bool errorcode open(
		string_t captureDeviceName,
		size_t snapshotLength = 0 // 0 -- use default
	);

	void close();

	size_t errorcode read(
		void* p,
		size_t size
	);

	intptr errorcode wait(
		UsbMonEvents eventMask,
		function* handler(UsbMonEvents triggeredEvents)
	);

	bool errorcode cancelWait(intptr handle);

	UsbMonEvents blockingWait(
		UsbMonEvents eventMask,
		uint_t timeout = -1
	);

	async UsbMonEvents asyncWait(UsbMonEvents eventMask);
}

//..............................................................................

//! @}

} // namespace io
