//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace std {

//! \addtogroup std-string
//! @{

//..............................................................................

//! \import std_String.jnc

class StringBuilder {
	char readonly* readonly m_p;
	size_t readonly m_length;
	size_t readonly m_bufferSize;

	property m_sz {
		char const* get() {
			return m_p ? m_p : "";
		}
	}

	char get(size_t offset) {
		boundsCheck(offset);
		return m_p[offset];
	}

	void set(
		size_t offset,
		char e
	) {
		boundsCheck(offset);
		m_p[offset] = e;
	}

	size_t errorcode operator := (utf32_t c) {
		return copy(c);
	}

	size_t errorcode operator := (char const* p) {
		return copy(p);
	}

	size_t errorcode operator += (utf32_t c) {
		return append(c);
	}

	size_t errorcode operator += (char const* p) {
		return append(p);
	}

	void clear();

	bool errorcode reserve(size_t length);

	size_t errorcode copy(
		utf32_t c,
		size_t count = 1
	);

	size_t errorcode copy(
		char const* p,
		size_t length = -1
	);

	size_t errorcode copy(
		utf16_t const* p,
		size_t length = -1
	);

	size_t errorcode copy(
		utf32_t const* p,
		size_t length = -1
	);

	size_t errorcode append(
		utf32_t c,
		size_t count = 1
	) {
		return insert(-1, c, count);
	}

	size_t errorcode append(
		char const* p,
		size_t length = -1
	) {
		return insert(-1, p, length);
	}

	size_t errorcode append(
		utf16_t const* p,
		size_t length = -1
	) {
		return insert(-1, p, length);
	}

	size_t errorcode append(
		utf32_t const* p,
		size_t length = -1
	) {
		return insert(-1, p, length);
	}

	size_t errorcode insert(
		size_t offset,
		utf32_t c,
		size_t count = 1
	);

	size_t errorcode insert(
		size_t offset,
		char const* p,
		size_t length = -1
	);

	size_t errorcode insert(
		size_t offset,
		utf16_t const* p,
		size_t length = -1
	);

	size_t errorcode insert(
		size_t offset,
		utf32_t const* p,
		size_t length = -1
	);

	size_t remove(
		size_t offset,
		size_t length = 1
	);

	size_t chop(size_t length = 1);

	size_t trimLeft();
	size_t trimRight();
	size_t trim();

	char* errorcode detachString();
	char* errorcode cloneString();

protected:
	void boundsCheck(size_t offset) {
		if (offset >= m_length) {
			std.setError($"attempt to access out-of-bounds offset $offset (length: $m_length)");
			throw;
		}
	}
}

//..............................................................................

//! @}

} // namespace std
