//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "std_Guid.jnc"

namespace std {

//! \addtogroup std-error
//! @{

std.Guid g_errnoGuid = { 0x25a6a7b5, 0xf662, 0x48ae, { 0xbc, 0xb6, 0x9a, 0x5c, 0xb5, 0xce, 0x5b, 0xb9 } }
std.Guid g_winErrorGuid = { 0x54e100e8, 0x2137, 0x40b8, { 0xbc, 0xd8, 0x00, 0xac, 0x1d, 0x0b, 0xaa, 0x16 } }
std.Guid g_ntStatusGuid = { 0x81443347, 0x3bc9, 0x4d5e, { 0x8b, 0x23, 0x32, 0xd7, 0x80, 0xed, 0xb5, 0x2b } }

//..............................................................................

/**
	\brief This struct is used as a header to an error-describing buffer.

	Often times error is completely described by ``std.Error`` struct -- for
	example, ``errno``, ``NTSTATUS`` or ``WinError``. However, you can store as
	much information as necessary to fully describe your error. If extra bytes
	of information are required, they should follow the ``std.Error`` header.
*/

struct Error {
	/**
		The full size of error-describing buffer. Should always be
		``>= sizeof(std.Error)``.
	*/

	uint32_t m_size;

	/**
		The ``GUID`` of the error. It tells Jancy runtime how to interpret
		``m_code`` and the extra bytes of data following ``std.Error`` header.
	*/

	Guid m_guid;

	/**
		The numerical code of the error. The actual meaning of this code depends
		on ``m_guid`` field. It may be ``errno``, or ``NTSTATUS``, or some
		user-defined code.
	*/

	uint32_t m_code;

	/**
		Creates and returns human-readable description of the error.

		Jancy also supports a special formatter ``$!`` which if used inside
		formatting literal expands into description of the last error:

		.. ref-code-block::

			printf($"cannot open file: $!\n");

		The code above is equivalent to:

		.. ref-code-block::

			string_t s = `std.getLastError` ().m_description;
			printf($"cannot open file: $s\n");
	*/

	string_t const property m_description;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	Returns a pointer to the last error set in the context of the current
	thread.

	Currently this function allocates a new error buffer on every call. In the
	future caching will be implemented(if ``AXL`` error has not changed since
	the last invokation of ``getLastError`` then previously allocated error
	buffer could be re-used).
*/

Error const* getLastError();

/**
	Returns a human readable description of the the last error set in the
	context of the current thread.

	Equivalent to:

	.. ref-code-block::

		std.getLastError().`m_description<std.Error.m_description>`
*/

string_t getLastErrorDescription() {
	return getLastError().m_description;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	Sets the last error of the current thread.
*/

void setError(Error const* error);

/**
	Sets ``errno`` error as the last error of the current thread.
*/

void setErrno(int errno);

/**
	Sets string error described by a null-terminated string pointed to by
	``string`` as the last error of the current thread.

	Calling `std.Error.m_description` on a string error will yield a
	null-terminated string identical to ``string``.
*/

void setError(string_t string);

//..............................................................................

//! @}

} // namespace std
