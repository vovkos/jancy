//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "std_MapEntry.jnc"

namespace std {

//! \addtogroup std-container
//! @{

//..............................................................................

enum BinTreeFindRelOp {
	Eq,
	Lt,
	Le,
	Gt,
	Ge,
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

typedef int CmpFunc(
	variant key1,
	variant key2
);

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

//! \import std_RbTree.jnc

opaque class RbTree {
	MapEntry cmut* readonly m_head;
	MapEntry cmut* readonly m_tail;
	size_t readonly m_count;

	construct(CmpFunc thin* cmpFunc = null);

	destruct();

	bool const property m_isEmpty;

	bool m_isEmpty.get() {
		return m_count == 0;
	}

	variant get(variant key) {
		return findValue(key, null);
	}

	void set(
		variant key,
		variant value
	) {
		add(key, value);
	}

	void clear();

	MapEntry* errorcode visit(variant key);
	MapEntry cmut* find(variant key) const;

	MapEntry cmut* find(
		variant key,
		BinTreeFindRelOp relOp
	) const;

	variant findValue(
		variant key,
		variant undefinedValue = null
	) const {
		MapEntry* entry = find(key);
		return entry ? entry.m_value : undefinedValue;
	}

	variant findValue(
		variant key,
		BinTreeFindRelOp relOp,
		variant undefinedValue = null
	) const {
		MapEntry* entry = find(key, relOp);
		return entry ? entry.m_value : undefinedValue;
	}

	MapEntry* errorcode add(
		variant key,
		variant value
	) {
		MapEntry* entry = visit(key);
		entry.m_value = value;
		return entry;
	}

	void remove(MapEntry* entry);

	bool removeKey(variant key) {
		MapEntry* entry = find(key);
		if (!entry)
			return false;

		remove(entry);
		return true;
	}
}

//..............................................................................

//! @}

} // namespace std
