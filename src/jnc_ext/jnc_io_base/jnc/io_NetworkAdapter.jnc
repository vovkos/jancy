//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_SocketAddress.jnc"

namespace io {

//! \addtogroup io-network-adapter
//! @{

//..............................................................................

/**
	\import io_base.jncx
	\import io_NetworkAdapter.jnc

	\brief This enumeration specifies available types of the network adapter.

	When enumerating available network adapter you first call
	`io.enumerateNetworkAdapters`, then iterate through the resulting list
	of `io.NetworkAdapterDesc` structures, each contains its type information
	`io.NetworkAdapterDesc.m_type` field.
*/

enum NetworkAdapterType {
	//! Denotes uninitialized value (or undetected type of the network adapter)

	Unknown = 0,

	//! Software loopback network interface.

	Loopback,

	//! Ethernet network interface.

	Ethernet,

	//! ``IEEE 802.11`` wireless network interface.

	Wireless,

	//! ``PPP`` (point-to-point) network interface.

	Ppp,

	//! Token ring network interface.

	TokenRing,

	//! ``SLIP`` (serial-line-internet-protocol) network interface.

	Slip,

	//! Tunnel type encapsulation network interface.

	Tunnel,

	/**
		Not really a type of interface; rather, this is a convenience constant
		denoting the total count  of adapter types. Should you need a table
		indexed by adapter type, you could write something like::

			string_t getNetworkAdapterTypeString(io.NetworkAdapterType type) {
				static string_t stringTable[io.NetworkAdapterType._Count] = {
					"<unknown>",
					"loopback",
					// ...
				}

				return stringTable[type];
			}
	*/

	_Count,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_base.jncx
	\import io_NetworkAdapter.jnc

	\brief This enumeration specifies flag properties of the network adapter.

	When enumerating available network adapter you first call
	`io.enumerateNetworkAdapters`, then iterate through the resulting list
	of `io.NetworkAdapterDesc` structures, each contains a set of flag
	properties in `io.NetworkAdapterDesc.m_flags` field.

	\sa `io.enumerateNetworkAdapters`, `io.NetworkAdapterDesc`
*/

bitflag enum NetworkAdapterFlags {
	/**
		``DHCP`` (Dynamic Host Configuration Protocol) is enabled on this
		adapter.
	*/

	Dhcp,

	//! ``DDNS`` (Dynamic DNS) is enabled on this adapter.

	Ddns,

	//! This adapter supports broadcast.

	Broadcast,

	//! This adapter supports multicast.

	Multicast,

	//! ``IPv4`` is enabled on this adapter.

	Ip4,

	//! ``IPv6`` is enabled on this adapter.

	Ip6,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_base.jncx
	\import io_NetworkAdapter.jnc

	\brief This struct holds information about single address of the network
	adapter.

	A list of network adapter addresses is part of network adapter description
	stored in `io.NetworkAdapterDesc`.

	\sa `io.NetworkAdapterDesc`, `io.enumerateNetworkAdapters`

*/

struct NetworkAdapterAddress {
	/**
		Holds a pointer to the next newtwork adatper address or ``null`` if this
		is the last address.
	*/

	NetworkAdapterAddress const* m_next;

	/**
		Holds address of the network adapter as `io.SocketAddress`. ``m_port``
		field of the address should obviously be ignored.
	*/

	SocketAddress m_address;

	/**
		The length, in bits, of the prefix or network part of the IP address.
		For a unicast IPv4 address, any value greater than 32 is an illegal
		value. For a unicast IPv6 address, any value greater than 128 is an
		illegal value.
	*/

	size_t m_netMaskBitCount;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_base.jncx
	\import io_NetworkAdapter.jnc

	\brief This struct holds information about the network adapter.

	A list of network adapter descriptions is returned by
	`io.enumerateNetworkAdapters`.

	\sa `io.enumerateNetworkAdapters`
*/

struct NetworkAdapterDesc {
	/**
		Holds a pointer to the next nextwork adapter description or ``null`` if
		this is the last adapter.
	*/

	NetworkAdapterDesc const* m_next;

	/**
		Holds the permanent device name of the network adapter.
	*/

	string_t m_name;

	/**
		Holds a human-readable description of the network adapter.
	*/

	string_t m_description;

	/**
		Holds the type the network adapter. For a complete list of types refer
		to `io.NetworkAdapterType` enumeration.
	*/

	NetworkAdapterType m_type;

	/**
		Holds the flag optins of the network adapter. For a complete list of
		flag options refer to `io.NetworkAdapterFlags` enumeration.
	*/

	NetworkAdapterFlags m_flags;

	/**
		Holds the hardware Media Access Control (MAC) address of the network
		adapter.
	*/

	uint8_t m_macAddress[6];

	/**
		Holds a pointer to the head of the list of addresses assigned to this
		network adapter. Iterate through the list by instpecting
		`io.NetworkAdapterAddress.m_next` field.
	*/

	NetworkAdapterAddress const* m_address;

	/**
		Holds the total number of addresses on the list pointed to by
		``m_addresses`` field.
	*/

	size_t m_addressCount;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	Enumerates all available network adapters on the system.

	``count`` argument can be used to obtain the total number of devices in the
	resulting list.

	Returns a pointer to the very first `io.NetworkAdapterDesc` in the resulting
	list. You can walk through the list by inspecting
	`io.NetworkAdapterDesc.m_next` field:

	.. ref-code-block::

		`io.NetworkAdapterDesc` const* adapterDesc =
			io.enumerateNetworkAdapters();
		for (; adapterDesc; adapterDesc = adapterDesc.m_next) {
			// add adapter to the combo box...
		}
*/

NetworkAdapterDesc const* enumerateNetworkAdapters(
	size_t* adapterCount = null,
	size_t* addressCount = null
);

//..............................................................................

//! @}

} // namespace io
