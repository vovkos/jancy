//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace io {

//! \addtogroup io-socket
//! @{

//..............................................................................

/**
	\import io_base.jncx
	\import io_SocketAddress.jnc

	\brief This enumeration contains possible values for socket address types
	(families).

	``io.AddressFamily`` values map to ``AF_XXX`` platform constants. At the
	moment, only ``IP4`` and ``IP6`` address families are supported.

	\sa `io.SocketAddress`
*/

enum AddressFamily: uint16_t {
	//!	Used to designate an uninitialized value.

	Undefined = 0,

	//!	Specifies ``IP4``-address; maps to ``AF_INET`` platform constant.

	Ip4 = 2,

	//! Specifies ``IP6``-address; maps to ``AF_INET6`` platform constant.

	Ip6,
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_base.jncx
	\import io_SocketAddress.jnc

	\brief This enumeration contains all possible values for network protocols
	that can be used with sockets.

	When opening a socket using `io.Socket.open` method you have to specify the
	protocol to use(all overloads of `io.Socket.open` methods require a
	``protocol`` argument).

	\sa `io.Socket`
*/

enum Protocol {
	//! ``ICMP`` protocol; maps to ``IPPROTO_ICMP`` platform constant.

	Icmp = 1,

	//! ``TCP`` protocol; maps to ``IPPROTO_TCP`` platform constant.

	Tcp  = 6,

	//! ``UDP`` protocol; maps to ``IPPROTO_UDP`` platform constant.

	Udp  = 17,

	//! Raw ``IP`` protocol; maps to ``IPPROTO_RAW`` platform constant.

	Raw  = 255,
}

//..............................................................................

/**
	\import io_base.jncx
	\import io_SocketAddress.jnc

	\brief This union holds information about ``IP4`` address

	On the binary level this union directly maps to ``in_addr``.

	\sa `io.SocketAddress_ip4`

	\footnote f1

		|footnote-errorcode|
*/

union Address_ip4 {
	/**
		Holds 32-bit representation of ``IP4`` address. There is no need to
		change the byte order of the address before assignment -- this field is
		already declared as ``bigendian`` so all the necessary conversions will
		happen automatically.
	*/

	bigendian uint32_t m_i32;

	/**
		Holds four 8-bit bytes of ``IP4`` address.
	*/

	uint8_t m_i8[4];

	/**
		Constructs the address from a string representation in ``string``
		argument.

		Returns ``true`` if address string was parsed successfully. Otherwise,
		sets the description of parsing error and returns ``false`` [#f1]_.
	*/

	bool errorcode parse(char const* string);

	/**
		Creates and returns a string representation of the address.
	*/

	char const* getString() const;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_base.jncx
	\import io_SocketAddress.jnc

	\brief This union holds information about ``IP6`` address

	On the binary level this union directly maps to ``in6_addr``.

	\sa `io.SocketAddress_ip6`

	\footnote f1

		|footnote-errorcode|
*/

union Address_ip6 {
	/**
		Holds eight 16-bit words of ``IP6`` address.
	*/

	bigendian uint16_t m_i16[8];

	/**
		Holds sixteen 8-bit bytes of ``IP6`` address.
	*/

	uint8_t m_i8[16];

	/**
		Constructs the address from a string representation in ``string``
		argument.

		Returns ``true`` if address string was parsed successfully. Otherwise,
		sets the description of parsing error and returns ``false`` [#f1]_.
	*/

	bool errorcode parse(char const* string);

	/**
		Creates and returns a string representation of the address.
	*/

	char const* getString() const;
}

//..............................................................................

pragma(Alignment, 2);

/**
	\import io_base.jncx
	\import io_SocketAddress.jnc

	\brief This struct holds information about ``IP4`` address in the form
	suitable for socket communications.

	On the binary level this structure directly maps to ``sockaddr_in``.

	\sa `io.Address_ip4`, `io.Socket`, `io.HostNameResolver`

	\footnote f1

		|footnote-errorcode|
*/

struct SocketAddress_ip4 {
	/**
		Holds the address family of the socket address; should be set to
		`io.AddressFamily.Ip4`.
	*/

	AddressFamily m_family;

	/**
		Holds the number of ``TCP`` or ``UDP`` port. There is no need to change
		the byte order of the port before assignment -- this field is already
		declared as ``bigendian`` so all the necessary conversions will happen
		automatically.
	*/

	bigendian uint16_t m_port;

	/**
		Holds ``IP4`` address as `io.Address_ip4`.
	*/

	Address_ip4 m_address;

	/**
		Extra padding to ensure binary compatibility wiht ``sockaddr_in``.
	*/

	char _m_padding[8];

	/**
		Checks two ``IP4`` socket addresses for *equality*; returns ``true`` if
		addresses are equal and ``false`` otherwise.
	*/

	bool isEqual(SocketAddress_ip4 const* address) const;

	/**
		Checks two ``IP4`` socket addresses for *matching*. The term matching
		requires some explanation.

		Matching could be described as a non-strict equality check. We may
		decide to only check *port* for equality and ignore the address. To do
		so, set ``m_address`` field of ``filter`` argument to ``0``.

		Or the other way around -- only check *address* and ignore port -- set
		``m_port`` field of ``filter`` argument to ``0``.

		Returns ``true`` if addresses *match* and ``false`` otherwise.
	*/

	bool isMatch(SocketAddress_ip4 const* filterAddress) const;

	/**
		Constructs the address from a string representation in ``string``
		argument.

		Returns ``true`` if address string was parsed successfully. Otherwise,
		sets the description of parsing error and returns ``false`` [#f1]_.
	*/

	bool errorcode parse(char const* string);

	/**
		Creates and returns a string representation of the address.
	*/

	char const* getString() const;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_base.jncx
	\import io_SocketAddress.jnc

	\brief This struct holds information about ``IP6`` address in the form
	suitable for socket communications.

	On the binary level this structure directly maps to ``sockaddr_in6``.

	\sa `io.Socket`, `io.HostNameResolver`

	\footnote f1

		|footnote-errorcode|
*/

struct SocketAddress_ip6 {
	/**
		Holds the address family of the socket address; should be set to
		`io.AddressFamily.Ip6`.
	*/

	AddressFamily m_family;

	/**
		Holds the number of ``TCP`` or ``UDP`` port. There is no need to change
		the byte order of the port before assignment -- this field is already
		declared as ``bigendian`` so all the necessary conversions will happen
		automatically.
	*/

	bigendian uint16_t m_port;

	/**
		Holds ``IP6`` flow information.
	*/

	uint32_t m_flow;

	/**
		Holds ``IP6`` address as `io.Address_ip6`.
	*/

	Address_ip6 m_address;

	/**
		Holds 32-bit ``IP6`` scope identifier.
	*/

	uint32_t m_scope;

	/**
		Checks two ``IP6`` socket addresses for *equality*; returns ``true`` if
		addresses are equal and ``false`` otherwise.
	*/

	bool isEqual(SocketAddress_ip6 const* address) const;

	/**
		Checks two ``IP6`` socket addresses for *matching*. The term *matching*
		requires some explanation.

		Matching could be described as a non-strict equality check. We may
		decide to only check *port* for equality and ignore the address. To do
		so, set ``m_address`` field of ``filter`` argument to ``0``.

		Or the other way around -- only check *address* and ignore port -- set
		``m_port`` field of ``filter`` argument to ``0``.

		Returns ``true`` if addresses *match* and ``false`` otherwise.
	*/

	bool isMatch(SocketAddress_ip6 const* filterAddress) const;

	/**
		Constructs the address from a string representation in ``string``
		argument.

		Returns ``true`` if address string was parsed successfully. Otherwise,
		sets the description of parsing error and returns ``false`` [#f1]_.
	*/

	bool errorcode parse(char const* string);

	/**
		Creates and returns a string representation of the address.
	*/

	char const* getString() const;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_base.jncx
	\import io_SocketAddress.jnc

	\biref This union is a container for both ``IP4`` and ``IP6`` addresses.

	All methods and/or properties of `io.Socket` class which accept or return
	addresses, use ``io.SocketAddress`` arguments.

	\footnote f1

		|footnote-errorcode|
*/

union SocketAddress {
	struct {
		/**
			Holds the address family of the socket address. Depending on the value
			of this field, the actual address is stored in either ``m_ip4`` or in
			``m_ip6`` fields.
		*/

		AddressFamily m_family;

		/**
			Holds the number of ``TCP`` or ``UDP`` port. There is no need to change
			the byte order of the port before assignment -- this field is already
			declared as ``bigendian`` so all the necessary conversions will happen
			automatically.
		*/

		bigendian uint16_t m_port;
	}

	/**
		Holds ``IP4`` socket address as `io.SocketAddress_ip4`.
	*/

	SocketAddress_ip4 m_ip4;

	/**
		Holds ``IP6`` socket address as `io.SocketAddress_ip6`.
	*/

	SocketAddress_ip6 m_ip6;

	/**
		Checks two socket addresses for *equality*; returns ``true`` if
		addresses are equal and ``false`` otherwise.
	*/

	bool isEqual(SocketAddress const* addr) const;

	/**
		Checks two socket addresses for *matching*. See
		`io.SocketAddress_ip4.isMatch` or `io.SocketAddress_ip6.isMatch`
		for definition of the term *match*.

		Returns ``true`` if addresses *match* and ``false`` otherwise.
	*/

	bool isMatch(SocketAddress const* filterAddress) const;

	/**
		Constructs the address from a string representation in ``string``
		argument.

		Returns ``true`` if address string was parsed successfully. Otherwise,
		sets the description of parsing error and returns ``false`` [#f1]_.
	*/

	bool errorcode parse(char const* string);

	/**
		Creates and returns a string representation of the address.
	*/

	char const* getString() const;
}

//..............................................................................

//! @}

} // namespace io
