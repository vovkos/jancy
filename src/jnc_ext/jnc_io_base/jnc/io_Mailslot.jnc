//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_StreamOptions.jnc"
import "io_StreamEvents.jnc"

namespace io {

//! \addtogroup io-file
//! @{

//..............................................................................

typedef ReadOnlyStreamOptions MailslotOptions;
typedef ReadOnlyStreamEvents  MailslotEvents;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\import io_base.jncx
	\import io_Mailslot.jnc

	\brief This class provides high-level asynchronous streaming interface for
	the *server* side of Windows mailslots which are used, for example, in SMB
	(Server Message Blocks) protocol and Windows Computer Browser service.

	For working from the *client* side of a mailslot, please use `io.File` or
	`io.FileStream`.

	A typical sequence of steps when working with a mailslot looks something
	like this:

	* Open a mailslot with ``open`` method;
	* Assign IO event handler with ``wait`` method. You  would probably also
	  want to *schedule* your event handler to be run in particular
	  environment(e.g., in a specific thread) and partially apply some
	  syncrhonization ID to discard late events;
	* When `io.MailslotEvents.IncomingData <io.ReadOnlyStreamEvents.IncomingData>`
	  event is fired, read from the mailslot using ``read`` method;
	* Close the mailslot when no longer needed with ``close`` method.

	.. rubric:: Sample code:

	.. ref-code-block::

		class MyDialog {
			// ...

			io.Mailslot m_mailslot;
			uint_t m_syncId;

			void open(string_t fileName);
			void close();
			void waitMailslotEvents();

			void onMailslotEvent(
				uint_t syncId,
				`io.MailslotEvents` triggeredEvents
			);
		}

		MyDialog.open(string_t fileName) {
			bool result = try m_mailslot.open(fileName);
			if (!result) {
				string_t errorString = std.getLastError().m_description;
				// ...
			}

			waitMailslotEvents();
		}

		MyDialog.close() {
			m_mailslot.close();
			m_syncId++; // events past this point will be discarded as 'late'
		}

		MyDialog.waitMailslotEvent() {
			`io.MailslotEvents` eventMask =
				`io.MailslotEvents.IoError <io.ReadOnlyStreamEvents.IoError>` |
				`io.MailslotEvents.IncomingData <io.ReadOnlyStreamEvents.IoError>`;

			m_mailslot.wait(eventMask, onMailslotEvent ~(++m_syncId) @
				g_mainThreadScheduler);
		}

		MyDialog.onMailslotEvent(
			uint_t syncId,
			`io.FileStreamEvents` triggeredEvents
		) {
			if (syncId != m_syncId) // late event
				return;

			if (triggeredEvents & `io.MailslotEvents.IoError <io.ReadOnlyStreamEvents.IoError>`) {
				string_t errorString = m_mailslot.m_ioError.m_description;
				// ...
			}

			if (triggeredEvents & `io.MailslotEvents.IncomingData <io.ReadOnlyStreamEvents.IoError>`) {
				char buffer[256];
				size_t size = m_mailslot.read(buffer, sizeof(buffer));
				// ...
			}

			waitMailslotEvents(); // restart wait
		}


	\sa `io.MailslotEvents`, `io.File`, `io.FileStream`

	\footnote f1

		|footnote-errorcode|

	\footnote f2

		|footnote-disposable|
*/

opaque class Mailslot {
	uint_t autoget property m_readParallelism;
	size_t autoget property m_readBlockSize;
	size_t autoget property m_readBufferSize;

	MailslotOptions autoget property m_options;

	MailslotEvents readonly volatile m_activeEvents;
	std.Error const* readonly volatile m_ioError;

	/**
		Holds the open status for the mailslot, i.e. ``true`` if opened;
		``false`` otherwise.
	*/

	bool readonly m_isOpen;

	uintptr_t const property m_osHandle;

	construct();
	destruct();

	/**
		Opens or creates a mailslot.

		The function accepts a single argument, ``name``, which is used to
		specify the name of the mailslot.

		Returns ``true`` on success. If the mailslot could not be opened, IO
		error supplied by operating system is set and then the function returns
		``false`` [#f1]_.
	*/

	bool errorcode open(string_t name);

	/**
		Closes a previously opened mailslot, does nothing if the mailslot is not
		opened. This function always succeeds.

		Sometimes it may be convenient to use *disposable* pattern to ensure
		timely invokation of ``close`` [#f2]_.
	*/

	void close();

	/**
		Effectively makes ``io.Mailslot`` a *disposable* class [#f2]_.
	*/

	alias dispose = close;

	/**
		Attempts to read up to ``size`` bytes from the mailslot into the buffer
		pointed to by ``p``.

		Returns the actual amount of bytes read or ``-1`` if error occurs [#f1]_.

		Normally you would call this function from within your event handler for
		``IncomingData`` event. If this function is called when there is no
		incoming data, it blocks until either the data arrives, or the mailslot
		is closed.
	*/

	size_t errorcode read(
		void* p,
		size_t size
	);

	intptr errorcode wait(
		MailslotEvents eventMask,
		function* handler(MailslotEvents triggeredEvents)
	);

	bool errorcode cancelWait(intptr handle);

	MailslotEvents blockingWait(
		MailslotEvents eventMask,
		uint_t timeout = -1
	);

	async MailslotEvents asyncWait(MailslotEvents eventMask);
}

//..............................................................................

//! @}

} // namespace io
