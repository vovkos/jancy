//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

namespace io {

//! \addtogroup io-serial
//! @{


//..............................................................................

/**
	\import io_base.jncx
	\import io_Serial.jnc

	\brief This struct holds information about the serial port device.

	A list of serial port descriptions is returned by
	`io.enumerateSerialPorts`.

	\sa `io.enumerateSerialPorts`
*/

struct SerialPortDesc {
	/**
		Holds a pointer to the next serial port description or ``null`` if this
		is the last adapter.
	*/

	SerialPortDesc const* m_next;

	/**
		Holds the serial port device name; use this name as ``name`` argument in
		`io.Serial.open` method.
	*/

	char const* m_deviceName;

	/**
		Holds a human-readable description of the serial port.
	*/

	char const* m_description;

	/**
		Holds the name of the manufacturer of this serial port.
	*/

	char const* m_manufacturer;

	/**
		Holds hardware ID(s) of this serial port.
	*/

	char const* m_hardwareIds;

	/**
		Holds information about the device driver for this serial port.
	*/

	char const* m_driver;

	/**
		Holds a string identifying the location of this serial port in the system device tree.
	*/

	char const* m_location;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

bitflag enum SerialPortDescFlags {
	Description,
	Manufacturer,
	HardwareIds,
	Driver,
	Location,
	All = Description | Manufacturer | HardwareIds | Driver | Location,
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

/**
	\subgroup

	Enumerates all available serial ports.

	``count`` argument can be used to obtain the total number of devices in the
	resulting list.

	Returns a pointer to the very first `io.SerialPortDesc` in the resulting
	list. You can walk through the list by inspecting `io.SerialPortDesc.m_next`
	field:

	.. ref-code-block::

		`io.SerialPortDesc` const* portDesc = io.enumerateSerialPorts();
		for (; portDesc; portDesc = portDesc.m_next) {
			// add port to the combo box...
		}
*/

SerialPortDesc const* enumerateSerialPorts(
	SerialPortDescFlags flags,
	size_t* count = null
);

SerialPortDesc const* enumerateSerialPorts(size_t* count = null) {
	return enumerateSerialPorts(0, count);
}

//..............................................................................

//! @}

} // namespace io
