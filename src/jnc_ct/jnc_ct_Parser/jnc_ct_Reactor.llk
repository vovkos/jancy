//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

start
reactor_body
	local {
		SwitchStmt $stmt;
	}
	:	'{'
			{
				m_module->m_controlFlowMgr.switchStmt_Create(&$stmt);
				return m_module->m_controlFlowMgr.switchStmt_Condition(&$stmt, m_reactionIdxArgValue, $1.m_pos);
			}
		(reactor_stmt<&$stmt> | ';')*
		'}'
			{
				m_module->m_controlFlowMgr.switchStmt_Follow(&$stmt);
			}
	;

reactor_stmt<SwitchStmt* $stmt>
	enter {
		return m_module->m_controlFlowMgr.switchStmt_Case($stmt, m_reactionIdx, m_currentToken.m_pos, 0);
	}
	leave {
		m_reactionIdx++;
		return m_module->m_controlFlowMgr.breakJump(1);
	}
	:	local_item_declaration
	|	expression_stmt
	|	reactor_onevent_stmt
	;

reactor_onevent_stmt
	local {
		Declarator $declarator;
	}
	leave {
		postDeclarator(&$declarator);
	}
	:	TokenKind_OnEvent
		reactor_event_name
			{
				postDeclaratorName(&$declarator);
			}
		function_suffix<&$declarator>
		declaration_body_pass1
			{
				return reactorOnEventStmt($2.m_valueList, &$declarator, &$4.m_tokenList);
			}
	;

struct {
	sl::BoxList<Value> m_valueList;
}
reactor_event_name
	local {
		sl::BoxList<Token> $tokenList;
	}
	enter {
		ASSERT(m_mode == Mode_Reaction);
		m_mode = Mode_Compile; // don't add implicit bindings to bindable properties inside 'onevent'
 	}
	leave {
		ASSERT(m_mode == Mode_Compile);
		m_mode = Mode_Reaction; // restore
	}
	:	'(' expression_list ')'
			{
				sl::takeOver(&$.m_valueList, &$2.m_valueList)
			}
	|	TokenKind_BindingOf '(' expression ')'
			{
				Value value;
				return
					m_module->m_operatorMgr.getPropertyOnChanged($3.m_value, &value) &&
					$.m_valueList.insertTail(value);
			}
	|	(any // anything until '('
			{
				$tokenList.insertTail($1);
			}
		)+
			{
				Value value;
				return
					m_module->m_operatorMgr.parseExpression($tokenList, &value) &&
					$.m_valueList.insertTail(value);
			}
	;

//..............................................................................

start
reactor_body_0
	:	'{' (reactor_stmt_0 | ';')* '}'
	;

reactor_stmt_0
	leave {
		m_reactionIdx++;
	}
	:	local_item_declaration
	|	TokenKind_OnEvent any+ reactor_compound_stmt_0
	|	any+ ';'
	;

reactor_compound_stmt_0
	:	'{' (reactor_compound_stmt_0 | any)* '}'
	;

//..............................................................................
