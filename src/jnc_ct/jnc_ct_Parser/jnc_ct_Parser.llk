//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "jnc_ct_Decl.llk";
import "jnc_ct_Expr.llk";
import "jnc_ct_Stmt.llk";
import "jnc_ct_Reactor.llk";
import "jnc_ct_DeclarationSpecifier.llk";
import "jnc_ct_Declarator.llk";
import "jnc_ct_NamedTypeSpecifier.llk";

//..............................................................................

HeaderFileBegin
{.
#include "jnc_ct_Lexer.h"
#include "jnc_ct_Module.h"
#include "jnc_ct_Decl.h"
#include "jnc_ct_Pragma.h"

namespace jnc {
namespace ct {
.}

HeaderFileEnd
{.
} // namespace ct
} // namespace jnc
.}

CppFileBegin
{.
namespace jnc {
namespace ct {
.}

CppFileEnd
{.
} // namespace ct
} // namespace jnc
.}

Members
{
public:
	enum Mode
	{
		Mode_Parse,    // parsing declarations (global/namespaces/type members)
		Mode_Compile,  // compiling statements and expressions
		Mode_Reaction, // compiling the 'reaction' method of a reactor (w/ implicit bindings)
	};

	struct CurlyInitializer
	{
		Value m_targetValue;
		Value m_memberValue;
		size_t m_index;
		size_t m_count;

		CurlyInitializer()
		{
			m_index = 0;
			m_count = 0;
		}
	};

	struct FmtSite: sl::ListLink
	{
		size_t m_offset;
		size_t m_index;
		Value m_value;
		sl::String m_fmtSpecifierString;

		FmtSite()
		{
			m_offset = 0;
			m_index = -1;
		}
	};

	struct Literal
	{
		sl::Array<char> m_binData;
		sl::List<FmtSite> m_fmtSiteList;
		size_t m_lastIndex;
		bool m_isZeroTerminated;

		Literal()
		{
			m_lastIndex = 0;
			m_isZeroTerminated = false;
		}
	};

	struct StmtPass1
	{
		sl::BoxList<Token> m_tokenList;
		Token* m_scopeAnchorToken;

		StmtPass1 ()
		{
			m_scopeAnchorToken = NULL;
		}
	};

protected:
	Module* m_module;
	Mode m_mode;
	PragmaSettings m_pragmaSettings;

	StorageKind m_storageKind;
	AccessKind m_accessKind;
	AttributeBlock* m_attributeBlock;

	ModuleItem* m_lastDeclaredItem;
	NamedType* m_lastNamedType;
	QualifiedName m_lastQualifiedName;
	Value m_lastExpressionValue;
	sl::BoxList<Value> m_lastExpressionValueList;
	FunctionType* m_lastPropertyGetterType;
	uint_t m_lastPropertyTypeModifiers;

	sl::Array<TypeSpecifier*> m_typeSpecifierStack;
	Declarator* m_topDeclarator; // orphan declarators affect import type resolution

	size_t m_reactionIdx;

	dox::Parser m_doxyParser;

public:
	// freely adjustible

	DerivableType* m_constructorType;
	Property* m_constructorProperty;
	ReactorClassType* m_reactorType;
	Value m_reactionIdxArgValue;
	Value m_curlyInitializerTargetValue;

public:
	Parser(
		Module* module,
		Mode mode = Mode_Parse
		);

	Declarator*
	getTopDeclarator()
	{
		return m_topDeclarator;
	}

	ModuleItem*
	getLastDeclaredItem()
	{
		return m_lastDeclaredItem;
	}

	NamedType*
	getLastNamedType()
	{
		return m_lastNamedType;
	}

	const QualifiedName&
	getLastQualifiedName()
	{
		return m_lastQualifiedName;
	}

	const Value&
	getLastExpressionValue()
	{
		return m_lastExpressionValue;
	}

	const sl::BoxList<Value>&
	getLastExpressionValueList()
	{
		return m_lastExpressionValueList;
	}

	void
	takeOverLastExpressionValueList(sl::BoxList<Value>* list)
	{
		sl::takeOver(list, &m_lastExpressionValueList);
	}

	size_t
	getReactionCount()
	{
		return m_reactionIdx;
	}

	bool
	tokenizeBody(
		sl::BoxList<Token>* tokenList,
		const lex::LineColOffset& pos,
		const sl::StringRef& body
		);

	bool
	parseBody(
		SymbolKind symbol,
		const lex::LineColOffset& pos,
		const sl::StringRef& source
		);

	bool
	parseTokenList(
		SymbolKind symbol,
		const sl::ConstBoxList<Token>& tokenList
		);

protected:
	RecoverAction
	processError(ErrorKind errorKind)
	{
		return m_module->processCompileError((ModuleCompileErrorKind)errorKind) ?
			RecoverAction_Synchronize :
			RecoverAction_Fail;
	}

	void
	onSynchronized(const Token* token)
	{
		m_module->m_codeAssistMgr.resetArgumentTipStackIf(token->m_pos);
	}

	bool
	parseEofToken(
		const lex::LineColOffset& pos,
		size_t length
		);

	void
	addDoxyComment(const Token& token);

	bool
	pragma(
		const sl::StringRef& name,
		int value
		);

	NamedImportType*
	getNamedImportType(
		const QualifiedName& name,
		const lex::LineCol& pos
		);

	sl::String
	getQualifiedTypeNameString(
		size_t baseTypeIdx,
		const QualifiedName& name
		);

	Type*
	findType(
		size_t baseTypeIdx,
		const QualifiedName& name,
		const lex::LineCol& pos
		);

	Type*
	getType(
		size_t baseTypeIdx,
		const QualifiedName& name,
		const lex::LineCol& pos
		);

	DerivableType*
	findBaseType(size_t baseTypeIdx);

	DerivableType*
	getBaseType(size_t baseTypeIdx);

	bool
	getBaseType(
		size_t baseTypeIdx,
		Value* resultValue
		);

	bool
	setSetAsType(Type* type);

	bool
	setStorageKind(StorageKind storageKind);

	bool
	setAccessKind(AccessKind accessKind);

	void
	postDeclaratorName(Declarator* declarator);

	void
	postDeclarator(Declarator* declarator);

	void
	pushTypeSpecifier(TypeSpecifier* typeSpecifier)
	{
		m_typeSpecifierStack.append(typeSpecifier);
	}

	TypeSpecifier*
	getTypeSpecifier()
	{
		return m_typeSpecifierStack.getBack();
	}

	void
	popTypeSpecifier(TypeSpecifier* typeSpecifier)
	{
		m_typeSpecifierStack.pop();
	}

	bool
	isTypeSpecified();

	bool
	createAttributeBlock(const lex::LineCol& pos);

	bool
	createAttribute(
		const lex::LineCol& pos,
		const sl::StringRef& name,
		sl::BoxList<Token>* initializer
		);

	void
	preDeclaration();

	bool
	bodylessDeclaration();

	bool
	setDeclarationBody(const Token& bodyToken);

	template <typename T>
	bool
	setBody(
		T* item,
		const Token& bodyToken
		)
	{
		if (bodyToken.m_flags & TokenFlag_CodeAssist)
			m_module->m_codeAssistMgr.m_containerItem = item;

		return item->setBody(bodyToken.m_pos, bodyToken.m_data.m_string);
	}

	void
	assignDeclarationAttributes(
		ModuleItem* item,
		ModuleItemDecl* decl,
		const lex::LineCol& pos,
		AttributeBlock* attributeBlock = NULL,
		dox::Block* doxyBlock = NULL
		);

	void
	assignDeclarationAttributes(
		ModuleItem* item,
		ModuleItemDecl* itemDecl,
		Declarator* declarator
		)
	{
		assignDeclarationAttributes(item, itemDecl, declarator->m_pos, declarator->m_attributeBlock, declarator->m_doxyBlock);
	}

	bool
	checkUnusedAttributeBlock();

	GlobalNamespace*
	getGlobalNamespace(
		GlobalNamespace* parentNamespace,
		const sl::StringRef& name,
		const lex::LineCol& pos
		);

	bool
	useNamespace(
		const sl::BoxList<QualifiedName>& nameList,
		NamespaceKind namespaceKind,
		const lex::LineCol& pos
		);

	AttributeBlock*
	popAttributeBlock();

	bool
	declare(Declarator* declarator);

	bool
	declareInReaction(Declarator* declarator);

	GlobalNamespace*
	declareGlobalNamespace(
		const lex::LineCol& pos,
		const QualifiedName& name,
		const Token& bodyToken
		);

	ExtensionNamespace*
	declareExtensionNamespace(
		const lex::LineCol& pos,
		const sl::StringRef& name,
		Type* type,
		const Token& bodyToken
		);

	bool
	declareTypedef(
		Declarator* declarator,
		Type* type
		);

	bool
	declareAlias(
		Declarator* declarator,
		Type* type,
		uint_t ptrTypeFlags
		);

	bool
	declareFunction(
		Declarator* declarator,
		FunctionType* type
		);

	bool
	declareProperty(
		Declarator* declarator,
		PropertyType* type,
		uint_t flags
		);

	bool
	declareData(
		Declarator* declarator,
		Type* type,
		uint_t ptrTypeFlags
		);

	bool
	declareUnnamedStructOrUnion(DerivableType* type);

	bool
	declareReactor(
		Declarator* declarator,
		uint_t ptrTypeFlags
		);

	FunctionArg*
	createFormalArg(
		DeclFunctionSuffix* argSuffix,
		Declarator* declarator
		);

	bool
	addEnumFlag(
		uint_t* flags,
		EnumTypeFlag flag
		);

	EnumType*
	createEnumType(
		const sl::StringRef& name,
		Type* baseType,
		uint_t flags
		);

	EnumConst*
	createEnumConst(
		const sl::StringRef& name,
		const lex::LineCol& pos,
		sl::BoxList<Token>* initializer
		);

	StructType*
	createStructType(
		const sl::StringRef& name,
		sl::BoxList<Type*>* baseTypeList,
		size_t fieldAlignment,
		uint_t flags
		);

	UnionType*
	createUnionType(
		const sl::StringRef& name,
		size_t fieldAlignment,
		uint_t flags
		);

	ClassType*
	createClassType(
		const sl::StringRef& name,
		sl::BoxList<Type*>* baseTypeList,
		size_t fieldAlignment,
		uint_t flags
		);

	DynamicLibClassType*
	createDynamicLibType(const sl::StringRef& name);

	bool
	finalizeDynamicLibType();

	Property*
	createProperty(Declarator* decl);

	PropertyTemplate*
	createPropertyTemplate();

	bool
	finalizeLastProperty(bool hasBody);

	bool
	parseLastPropertyBody(const Token& bodyToken);

	bool
	parseLastPropertyBody(const sl::ConstBoxList<Token>& body);

	bool
	addReactionBinding(const Value& value);

	bool
	resetReactionBindings();

	bool
	reactorOnEventStmt(
		const sl::ConstBoxList<Value>& valueList,
		Declarator* declarator,
		sl::BoxList<Token>* tokenList
		);

	bool
	initializeReaction();

	bool
	finalizeReaction();

	bool
	callBaseTypeMemberConstructor(
		const QualifiedName& name,
		sl::BoxList<Value>* argList
		);

	bool
	callBaseTypeConstructor(
		size_t baseTypeIdx,
		sl::BoxList<Value>* argList
		);

	bool
	callBaseTypeConstructor(
		Type* type,
		sl::BoxList<Value>* argList
		);

	bool
	callBaseTypeConstructorImpl(
		BaseTypeSlot* baseTypeSlot,
		sl::BoxList<Value>* argList
		);

	bool
	callFieldConstructor(
		Field* field,
		sl::BoxList<Value>* argList
		);

	bool
	finalizeBaseTypeMemberConstructBlock();

	bool
	lookupIdentifier(
		const Token& token,
		Value* value
		);

	bool
	prepareCurlyInitializerNamedItem(
		CurlyInitializer* initializer,
		const sl::StringRef& name
		);

	bool
	prepareCurlyInitializerIndexedItem(CurlyInitializer* initializer);

	bool
	skipCurlyInitializerItem(CurlyInitializer* initializer);

	bool
	assignCurlyInitializerItem(
		CurlyInitializer* initializer,
		const Value& value
		);

	bool
	addFmtSite(
		Literal* literal,
		const sl::StringRef& string,
		const Value& value,
		bool isIndex,
		const sl::StringRef& fmtSpecifierString
		);

	void
	addFmtSite(
		Literal* literal,
		const sl::StringRef& string,
		size_t index
		);

	void
	addFmtSite(
		Literal* literal,
		const sl::StringRef& string,
		const sl::StringRef& fmtSpecifierString
		);

	bool
	finalizeLiteral(
		Literal* literal,
		sl::BoxList<Value>* argValueList,
		Value* resultValue
		);

	void
	appendFmtLiteralRawData(
		const Value& fmtLiteralValue,
		const void* p,
		size_t size
		);

	bool
	appendFmtLiteralValue(
		const Value& fmtLiteralValue,
		const Value& rawSrcValue,
		const sl::StringRef& fmtSpecifierString
		);

	bool
	appendFmtLiteralBinValue(
		const Value& fmtLiteralValue,
		const Value& rawSrcValue
		);

	bool
	finalizeReSwitchCaseLiteral(
		sl::StringRef* data,
		const Value& value,
		bool isZeroTerminated
		);

	BasicBlock*
	assertCondition(const sl::BoxList<Token>& tokenList);

	bool
	finalizeAssertStmt(
		const sl::BoxList<Token>& conditionTokenList,
		const Value& messageValue,
		BasicBlock* continueBlock
		);

	static
	void
	addScopeAnchorToken(
		StmtPass1* stmt,
		const Token& token
		);

	void
	generateAutoCompleteIf(
		const Token& token,
		const Value& value
		)
	{
		if (m_module->m_codeAssistMgr.getCodeAssistKind() == CodeAssistKind_AutoComplete &&
			(token.m_flags & TokenFlag_CodeAssist))
			generateAutoComplete(token, value);
	}

	void
	generateAutoComplete(
		const Token& token,
		const Value& value
		);

	void
	generateAutoComplete(
		const Token& token,
		Namespace* nspace,
		uint_t flags = 0
		);

	void
	generateImportAutoCompleteIf(const Token& token)
	{
		if (m_module->m_codeAssistMgr.getCodeAssistKind() == CodeAssistKind_AutoComplete &&
			(token.m_flags & TokenFlag_CodeAssist))
			m_module->m_codeAssistMgr.createImportAutoComplete(token.m_pos.m_offset);
	}

	void
	prepareAutoCompleteFallbackIf(
		const Token& token,
		const QualifiedName& prefix,
		uint_t flags = 0
		)
	{
		if (m_module->m_codeAssistMgr.getCodeAssistKind() == CodeAssistKind_AutoComplete &&
			(token.m_flags & TokenFlag_CodeAssist))
			prepareAutoCompleteFallback(token, prefix, flags);
	}

	void
	prepareAutoCompleteFallback(
		const Token& token,
		const QualifiedName& prefix,
		uint_t flags = 0
		);

	void
	generateMemberInfoIf(
		const Token& token,
		const Value& value,
		const sl::StringRef& name
		)
	{
		if (m_module->m_codeAssistMgr.getCodeAssistKind() == CodeAssistKind_QuickInfoTip &&
			(token.m_flags & TokenFlag_CodeAssist))
			generateMemberInfo(token, value, name);
	}

	void
	generateMemberInfo(
		const Token& token,
		const Value& value,
		const sl::StringRef& name
		);
}

//..............................................................................

lookahead(2, default);

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

start
nullable
compilation_unit
	:	catch(compilation_unit_sync) (import_declaration | global_declaration)*
	;

compilation_unit_sync
	:	TokenKind_Import
	|	global_declaration_sync
	;

//..............................................................................
