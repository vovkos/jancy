//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

struct {
	TypeSpecifier m_typeSpecifier;
}
declaration_specifier_list
	enter {
		pushTypeSpecifier(&$.m_typeSpecifier);
	}
	leave {
		popTypeSpecifier(&$.m_typeSpecifier);
	}
	:	declaration_specifier<&$.m_typeSpecifier>+
	;

declaration_specifier<TypeSpecifier* $typeSpecifier>
	:	storage_specifier
			{
				return setStorageKind($1.m_storageKind);
			}
	|	access_specifier
			{
				return setAccessKind($1.m_accessKind);
			}
	|	type_specifier
			{
				return $typeSpecifier->setType($1.m_type);
			}
	|	type_modifier
			{
				return $typeSpecifier->addTypeModifier($1.m_typeModifier);
			}
	;

declaration_specifier_sync
	:	storage_specifier_sync
	|	access_specifier_sync
	|	type_specifier_sync
	|	type_modifier_sync
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct {
	TypeSpecifier m_typeSpecifier;
}
type_specifier_modifier_list
	enter {
		pushTypeSpecifier(&$.m_typeSpecifier);
	}
	leave {
		popTypeSpecifier(&$.m_typeSpecifier);
	}
	: type_specifier_modifier<&$.m_typeSpecifier>+
	;

type_specifier_modifier<TypeSpecifier* $typeSpecifier>
	:	type_specifier
			{
				return $typeSpecifier->setType($1.m_type);
			}
	|	type_modifier
			{
				return $typeSpecifier->addTypeModifier($1.m_typeModifier);
			}
	;

//..............................................................................

struct {
	StorageKind m_storageKind;
}
storage_specifier
	:	TokenKind_Typedef
			{
				$.m_storageKind = StorageKind_Typedef;
			}
	|	TokenKind_Alias
			{
				$.m_storageKind = StorageKind_Alias;
			}
	|	TokenKind_Static
			{
				$.m_storageKind = StorageKind_Static;
			}
	|	TokenKind_ThreadLocal
			{
				$.m_storageKind = StorageKind_Tls;
			}
	|	TokenKind_Abstract
			{
				$.m_storageKind = StorageKind_Abstract;
			}
	|	TokenKind_Virtual
			{
				$.m_storageKind = StorageKind_Virtual;
			}
	|	TokenKind_Override
			{
				$.m_storageKind = StorageKind_Override;
			}
	|	TokenKind_Mutable
			{
				$.m_storageKind = StorageKind_Mutable;
			}
	|	TokenKind_Disposable
			{
				$.m_storageKind = StorageKind_Disposable;
			}
	|	TokenKind_DynamicField
			{
				$.m_storageKind = StorageKind_DynamicField;
			}
	;

storage_specifier_sync
	:	TokenKind_Typedef
	|	TokenKind_Alias
	|	TokenKind_Static
	|	TokenKind_ThreadLocal
	|	TokenKind_Abstract
	|	TokenKind_Virtual
	|	TokenKind_Override
	|	TokenKind_Mutable
	|	TokenKind_Disposable
	|	TokenKind_DynamicField
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct {
	AccessKind m_accessKind;
}
access_specifier
	:	TokenKind_Public
			{
				$.m_accessKind = AccessKind_Public;
			}
	|	TokenKind_Protected
			{
				$.m_accessKind = AccessKind_Protected;
			}
	;

access_specifier_sync
	:	TokenKind_Public
	|	TokenKind_Protected
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct {
	Type* m_type;
}
type_specifier
	:	TokenKind_Void
			{
				$.m_type = m_module->m_typeMgr.getPrimitiveType(TypeKind_Void);
			}
	|	TokenKind_Class
			{
				$.m_type = m_module->m_typeMgr.getStdType(StdType_AbstractClass);
			}
	|	TokenKind_AnyData
			{
				$.m_type = m_module->m_typeMgr.getStdType(StdType_AbstractData);
			}
	|	TokenKind_Bool
			{
				$.m_type = m_module->m_typeMgr.getPrimitiveType(TypeKind_Bool);
			}
	|	TokenKind_Int
			{
				$.m_type = m_module->m_typeMgr.getPrimitiveType(TypeKind_Int);
			}
	|	TokenKind_IntPtr
			{
				$.m_type = m_module->m_typeMgr.getPrimitiveType(TypeKind_IntPtr);
			}
	|	TokenKind_Char
			{
				$.m_type = m_module->m_typeMgr.getPrimitiveType(TypeKind_Char);
			}
	|	TokenKind_Short
			{
				$.m_type = m_module->m_typeMgr.getPrimitiveType(TypeKind_Short);
			}
	|	TokenKind_Long
			{
				$.m_type = m_module->m_typeMgr.getPrimitiveType(TypeKind_Long);
			}
	|	TokenKind_Float
			{
				$.m_type = m_module->m_typeMgr.getPrimitiveType(TypeKind_Float);
			}
	|	TokenKind_Double
			{
				$.m_type = m_module->m_typeMgr.getPrimitiveType(TypeKind_Double);
			}
	|	property_template_specifier $t
			{
				$.m_type = $t.m_type;
			}
	|	qualified_type_name $t
			{
				$.m_type = $t.m_type;
			}
	;

type_specifier_sync
	:	TokenKind_Void
	|	TokenKind_Class
	|	TokenKind_AnyData
	|	TokenKind_Bool
	|	TokenKind_Int
	|	TokenKind_IntPtr
	|	TokenKind_Char
	|	TokenKind_Short
	|	TokenKind_Long
	|	TokenKind_Float
	|	TokenKind_Double
	;

struct {
	size_t m_baseTypeIdx;
	QualifiedName m_name;
	Token::Pos m_pos;
}
basetype_qualified_name
	enter {
		$.m_pos = m_tokenCursor->m_pos;
	}
	:	TokenKind_BaseType
			{
				$.m_baseTypeIdx = $1.m_data.m_integer - 1;
			}
	|	TokenKind_BaseType '.' qualified_name_impl<&$.m_name>
			{
				$.m_baseTypeIdx = $1.m_data.m_integer - 1;
			}
	|	qualified_name_impl<&$.m_name>
			{
				$.m_baseTypeIdx = -1;
			}
	;

// the main conflict of C-family: expression vs declaration

qualified_type_name_rslv
	enter {
		if (isTypeSpecified())
			return false;
	}
	:	basetype_qualified_name $n
			{
				return
					m_mode == Mode_Parse ||
					findType(
						$n.m_baseTypeIdx,
						$n.m_name,
						$n.m_pos
					) != NULL;
			}
		(('(' | '[' | '=') // declarator suffix detected, e.g.: static foo()
			{
				return false;
			}
		)?
	;

struct {
	Type* m_type;
}
resolver(qualified_type_name_rslv)
qualified_type_name
	:	basetype_qualified_name
			{
				$.m_type = getType(
					$1.m_baseTypeIdx,
					$1.m_name,
					$1.m_pos
				);

				return $.m_type != NULL;
			}
	;

struct {
	PropertyType* m_type;
}
property_template_specifier
	local {
		PropertyTemplate* $propertyTemplate;
	}
	:	TokenKind_Property
			{
				$propertyTemplate = createPropertyTemplate();
				m_module->m_namespaceMgr.openNamespace($propertyTemplate);
			}
		'{' member_block_declaration_list '}'
			{
				m_module->m_namespaceMgr.closeNamespace();
				$.m_type = $propertyTemplate->calcType();
				return $.m_type != NULL;
			}
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct {
	TypeModifier m_typeModifier;
}
type_modifier
	:	TokenKind_Unsigned
			{
				$.m_typeModifier = TypeModifier_Unsigned;
			}
	|	TokenKind_BigEndian
			{
				$.m_typeModifier = TypeModifier_BigEndian;
			}
	|	TokenKind_Const
			{
				$.m_typeModifier = TypeModifier_Const;
			}
	|	TokenKind_ReadOnly
			{
				$.m_typeModifier = TypeModifier_ReadOnly;
			}
	|	TokenKind_CMut
			{
				$.m_typeModifier = TypeModifier_CMut;
			}
	|	TokenKind_Volatile
			{
				$.m_typeModifier = TypeModifier_Volatile;
			}
	|	TokenKind_Weak
			{
				$.m_typeModifier = TypeModifier_Weak;
			}
	|	TokenKind_Thin
			{
				$.m_typeModifier = TypeModifier_Thin;
			}
	|	TokenKind_Safe
			{
				$.m_typeModifier = TypeModifier_Safe;
			}
	|	TokenKind_Unsafe
			{
				$.m_typeModifier = TypeModifier_Unsafe;
			}
	|	TokenKind_Cdecl
			{
				$.m_typeModifier = TypeModifier_Cdecl;
			}
	|	TokenKind_Stdcall
			{
				$.m_typeModifier = TypeModifier_Stdcall;
			}
	|	TokenKind_Thiscall
			{
				$.m_typeModifier = TypeModifier_Thiscall;
			}
	|	TokenKind_Jnccall
			{
				$.m_typeModifier = TypeModifier_Jnccall;
			}
	|	TokenKind_Array
			{
				$.m_typeModifier = TypeModifier_Array;
			}
	|	TokenKind_Function
			{
				$.m_typeModifier = TypeModifier_Function;
			}
	|	TokenKind_Property
			{
				$.m_typeModifier = TypeModifier_Property;
			}
	|	TokenKind_Bindable
			{
				$.m_typeModifier = TypeModifier_Bindable;
			}
	|	TokenKind_AutoGet
			{
				$.m_typeModifier = TypeModifier_AutoGet;
			}
	|	TokenKind_Indexed
			{
				$.m_typeModifier = TypeModifier_Indexed;
			}
	|	TokenKind_Multicast
			{
				$.m_typeModifier = TypeModifier_Multicast;
			}
	|	TokenKind_Event
			{
				$.m_typeModifier = TypeModifier_Event;
			}
	|	TokenKind_Reactor
			{
				$.m_typeModifier = TypeModifier_Reactor;
			}
	|	TokenKind_ErrorCode
			{
				$.m_typeModifier = TypeModifier_ErrorCode;
			}
	|	TokenKind_Async
			{
				$.m_typeModifier = TypeModifier_Async;
			}
	;

type_modifier_sync
	:	TokenKind_Unsigned
	|	TokenKind_BigEndian
	|	TokenKind_Const
	|	TokenKind_ReadOnly
	|	TokenKind_CMut
	|	TokenKind_Volatile
	|	TokenKind_Weak
	|	TokenKind_Thin
	|	TokenKind_Safe
	|	TokenKind_Unsafe
	|	TokenKind_Cdecl
	|	TokenKind_Stdcall
	|	TokenKind_Thiscall
	|	TokenKind_Jnccall
	|	TokenKind_Array
	|	TokenKind_Function
	|	TokenKind_Property
	|	TokenKind_Bindable
	|	TokenKind_AutoGet
	|	TokenKind_Indexed
	|	TokenKind_Multicast
	|	TokenKind_Event
	|	TokenKind_Reactor
	|	TokenKind_ErrorCode
	|	TokenKind_Async
	;

//..............................................................................
