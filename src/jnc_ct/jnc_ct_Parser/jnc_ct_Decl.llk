//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

pragma
doxy_comment
	enter
	{
		addDoxyComment(m_currentToken);
	}
	:	TokenKind_DoxyComment1
	|	TokenKind_DoxyComment2
	|	TokenKind_DoxyComment3
	|	TokenKind_DoxyComment4
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

common_declaration
	:	using_declaration
	|   pragma_declaration
	|	named_type_specifier
	|   attribute_block
	;

common_declaration_sync
	:	TokenKind_Using
	|	TokenKind_Pragma
	|	named_type_specifier_sync
	;

global_declaration
	:	common_declaration
	|	namespace_declaration
	|	extension_declaration
	|	global_item_declaration
	|	';'
	;

global_declaration_sync
	:	common_declaration_sync
	|	item_declaration_sync
	|	TokenKind_Namespace
	|	TokenKind_Extension
	|	';'
	;

member_block_declaration
	:	common_declaration
	|	friend_declaration
	|	access_declaration
	|	member_item_declaration
	|   setas_declaration
	|	';'
	;

member_block_declaration_sync
	:	common_declaration_sync
	|	item_declaration_sync
	|	TokenKind_Friend
	|	TokenKind_Public
	|	TokenKind_Protected
	|	TokenKind_SetAs
	|	';'
	;

local_declaration
	enter
	{
		m_module->m_namespaceMgr.setSourcePos(m_currentToken.m_pos);
	}
	:	common_declaration
	|	statement
	|	local_item_declaration
	|	catch_label
	|	finally_label
	|	nested_scope_label
	;

local_declaration_sync
	:	common_declaration_sync
	|	statement_sync
	|	TokenKind_Catch
	|	TokenKind_Finally
	|	TokenKind_NestedScope
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

start
nullable
global_declaration_list
	:	catch(global_declaration_sync) global_declaration*
	;

start
nullable
member_block_declaration_list
	:	catch(member_block_declaration_sync) member_block_declaration*
	;

start
nullable
local_declaration_list
	:	catch(local_declaration_sync) local_declaration*
	;

//..............................................................................

import_declaration
	:	TokenKind_Import TokenKind_Literal
			{
				generateImportAutoCompleteIf($2);
				return m_module->m_importMgr.addImport($2.m_data.m_string);
			}
	;

namespace_declaration
	:	TokenKind_Namespace qualified_name TokenKind_Body
			{
				return declareGlobalNamespace($2.m_firstTokenPos, $2.m_name, $3) != NULL;
			}
	;

extension_declaration
	:	TokenKind_Extension TokenKind_Identifier ':' type_name TokenKind_Body
			{
				return declareExtensionNamespace($2.m_pos, $2.m_data.m_string, $4.m_type, $5) != NULL;
			}
	;

using_declaration
	:	TokenKind_Using using_namespace_kind qualified_name_list ';'
			{
				return useNamespace($3.m_nameList, $2.m_namespaceKind, $1.m_pos);
			}
	;

struct
{
	NamespaceKind m_namespaceKind;
}
using_namespace_kind
	:	TokenKind_Namespace
			{
				$.m_namespaceKind = NamespaceKind_Global;
			}
	|	TokenKind_Extension
			{
				$.m_namespaceKind = NamespaceKind_Extension;
			}
	;

friend_declaration
	:	TokenKind_Friend qualified_name_list ';'
	;

access_declaration
	:	access_specifier ':'
			{
				m_module->m_namespaceMgr.m_currentAccessKind = $1.m_accessKind;
			}
	;

pragma_declaration
	:	TokenKind_Pragma '(' TokenKind_Identifier $i ',' pragma_value $v ')'
			{
				return pragma($i.m_data.m_string, $v.m_value);
			}
	;

class
{
	int m_value;
}
pragma_value
	enter
	{
		$.m_value = 0;
	}
	:	TokenKind_Integer
			{
				$.m_value = $1.m_data.m_integer;
			}
	|	TokenKind_True
			{
				$.m_value = true;
			}
	|	TokenKind_False
			{
				$.m_value = false;
			}
	|	TokenKind_Default
			{
				$.m_value = -1;
			}
	;

setas_declaration
	:	TokenKind_SetAs '='? setas_value ';'
	|	TokenKind_SetAs '(' setas_value ')'
	;

setas_value
	:	type_name
			{
				return setSetAsType($1.m_type);
			}
	|	TokenKind_Default
			{
				return setSetAsType(NULL);
			}
	;

//..............................................................................

struct
{
	QualifiedName m_name
}
qualified_name
	:	qualified_name_impl<&$.m_name>
	;

qualified_name_impl<QualifiedName* $name>
	:	TokenKind_Identifier
			{
				prepareAutoCompleteFallbackIf($1, *$name);
				$name->addName($1.m_data.m_string);
			}
		(
			'.' $op
				{
					prepareAutoCompleteFallbackIf($op, *$name);
				}
			TokenKind_Identifier $n2
				{
					prepareAutoCompleteFallbackIf($n2, *$name);
					$name->addName($n2.m_data.m_string);
				}
		)*
	;

struct
{
	sl::BoxList<QualifiedName> m_nameList;
}
qualified_name_list
	:	qualified_name
			{
				sl::BoxIterator<QualifiedName> it = $.m_nameList.insertTail();
				sl::takeOver(it.p(), &$1.m_name);
			}
		(',' qualified_name
			{
				sl::BoxIterator<QualifiedName> it = $.m_nameList.insertTail();
				sl::takeOver(it.p(), &$3.m_name);
			}
		)*
	;

start
qualified_name_save_name
	:	qualified_name
			{
				m_lastQualifiedName = $1.m_name;
			}
	;

//..............................................................................

// item declarations

global_item_declaration
	enter
	{
		preDeclaration();
	}
	leave
	{
		checkUnusedAttributeBlock();
	}
	:	normal_item_declaration
	|	special_void_method_declarator
	|	qualified_special_void_method_declaration
	;

member_item_declaration
	enter
	{
		preDeclaration();
	}
	leave
	{
		checkUnusedAttributeBlock();
	}
	:	normal_item_declaration
	|	special_void_method_declarator
	;

local_item_declaration
	enter
	{
		preDeclaration();
	}
	leave
	{
		checkUnusedAttributeBlock();
	}
	:	normal_item_declaration
	;

normal_item_declaration
	:	declaration_specifier_list $s
		declarator_list<&$s.m_typeSpecifier>
	;

// conflict vs type_specifier:TokenKind_Identifier

qualified_special_void_method_declaration_rslv
	:	(TokenKind_Identifier '.')* special_void_method_declarator_sync
	;

resolver(qualified_special_void_method_declaration_rslv, 2) // higher than qualified_type_name_rslv
qualified_special_void_method_declaration
	:	declarator_list<NULL>
	;

item_declaration_sync
	:	declaration_specifier_sync
	|	special_void_method_declarator_sync
	;

//..............................................................................

struct
{
	sl::BoxList<Token> m_tokenList;
}
declaration_body_pass1
	:	compound_stmt_pass1<&$.m_tokenList>
	;

compound_stmt_pass1<sl::BoxList<Token>* $tokenList>
	local
	{
		StmtPass1 $stmt;
	}
	:	'{'
			{
				addScopeAnchorToken(&$stmt, $1);
			}
		statement_pass1 <&$stmt>*
		'}' $r
			{
				$tokenList->insertListTail(&$stmt.m_tokenList);
				$tokenList->insertTail($r);
			}
	;

statement_pass1<StmtPass1* $stmt>
	:	compound_stmt_pass1<&(*$stmt).m_tokenList>
	|	TokenKind_Catch
			{
				$stmt->m_tokenList.insertTail($1);
				$stmt->m_scopeAnchorToken->m_data.m_integer |= ScopeFlag_CatchAhead | ScopeFlag_HasCatch;
			}
	|	TokenKind_Finally
			{
				$stmt->m_tokenList.insertTail($1);
				$stmt->m_scopeAnchorToken->m_data.m_integer |= ScopeFlag_FinallyAhead | ScopeFlag_Finalizable;
			}
	|	TokenKind_NestedScope
			{
				addScopeAnchorToken($stmt, $1);
			}
	|	TokenKind_Case
			{
				addScopeAnchorToken($stmt, $1);
			}
	|	TokenKind_Default
			{
				addScopeAnchorToken($stmt, $1);
			}
	|	any
			{
				$stmt->m_tokenList.insertTail($1);
			}
	;

//..............................................................................

// type names

type_name_impl<
	Type** $type,
	Value* $countValue
	>
	local
	{
		Declarator $declarator;
	}
	:	type_specifier_modifier_list
			{
				$declarator.setTypeSpecifier(&$1.m_typeSpecifier, m_module);
			}
		declarator_prefix<&$declarator>*
		declarator_suffix<&$declarator>*
			{
				Type* type = $declarator.calcType($countValue);
				if (!type)
					return false;

				*$type = type;
			}
	;

struct
{
	Type* m_type;
}
type_name
	: type_name_impl<&$.m_type, NULL>
	;

struct
{
	sl::BoxList<Type*> m_typeList;
}
type_name_list
	:	type_name
			{
				$.m_typeList.insertTail($1.m_type);
			}
		(',' type_name $t2
			{
				$.m_typeList.insertTail($t2.m_type);
			}
		)*
	;

//..............................................................................

// attributes

attribute_block
	:	'['
			{
				return createAttributeBlock($1.m_pos);
			}
		attribute_declarator(',' attribute_declarator)*
		']'
	;

nullable
attribute_declarator
	:	TokenKind_Identifier ('=' expression_pass1 $i)?
			{
				return createAttribute($1.m_pos, $1.m_data.m_string, &$i ? &$i.m_tokenList : NULL);
			}
	|	epsilon
	;

//..............................................................................
