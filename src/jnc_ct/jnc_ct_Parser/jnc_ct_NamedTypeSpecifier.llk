//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// root

struct
{
	NamedType* m_type;
}
named_type_specifier
	leave
	{
		if (m_mode == Mode_Compile)
			return $.m_type->ensureLayout();
	}
	:	enum_specifier
			{
				$.m_type = $1.m_type;
			}
	|	struct_specifier
			{
				$.m_type = $1.m_type;
			}
	|	union_specifier
			{
				$.m_type = $1.m_type;
			}
	|	class_specifier
			{
				$.m_type = $1.m_type;
			}
	|	library_specifier
			{
				$.m_type = $1.m_type;
			}
	;


named_type_specifier_sync
	:	TokenKind_Enum
	|	TokenKind_Struct
	|	TokenKind_Union
	|	TokenKind_Class
	|	TokenKind_DynamicLib
	;

start
named_type_specifier_save_type
	:	named_type_specifier
			{
				m_lastNamedType = $1.m_type;
			}
	;

//..............................................................................

// enum

struct
{
	EnumType* m_type;
	uint_t m_flags;
}
enum_specifier
	enter
	{
		$.m_flags = 0;
	}
	leave
	{
		if ($.m_type->getFlags() & EnumTypeFlag_Exposed)
			return m_module->m_namespaceMgr.getCurrentNamespace()->exposeEnumConsts($.m_type);
	}
	:	enum_modifier<&$.m_flags>*
		TokenKind_Enum
		TokenKind_Identifier $n?
		(':' type_name $t)?
			{
				$.m_type = createEnumType(
					&$n ? $n.m_data.m_string : sl::String(),
					&$t ? $t.m_type : NULL,
					$.m_flags | m_defaultEnumFlags
					);

				if (!$.m_type)
					return false;
			}
		enum_block<$.m_type>
	;

enum_modifier<uint_t* $flags>
	:	TokenKind_Exposed
			{
				return addEnumFlag($flags, EnumTypeFlag_Exposed);
			}
	|	TokenKind_BitFlag
			{
				return addEnumFlag($flags, EnumTypeFlag_BitFlag);
			}
	;

enum_block<EnumType* $type>
	:	(		{
					m_module->m_namespaceMgr.openNamespace($type);
					$type->m_namespaceStatus = NamespaceStatus_Ready;
				}
			'{' enum_const_list '}'
				{
					m_module->m_namespaceMgr.closeNamespace();
				}
		|	TokenKind_Body
				{
					setBody($type, $1);
				}
		)
	;

start
nullable
enum_const_list
	:	enum_const catch(enum_const_sync) (',' enum_const)*
	;

nullable
enum_const
	:	attribute_block?
		TokenKind_Identifier $n ('=' expression_pass1 $i)?
			{
				return createEnumConst($n.m_data.m_string, $n.m_pos, &$i ? &$i.m_tokenList : NULL) != NULL;
			}
	|	epsilon
	;

enum_const_sync
	:	','
	|	'}'
	;

//..............................................................................

// struct

struct
{
	StructType* m_type;
}
struct_specifier
	leave
	{
		if ($.m_type->getName().isEmpty())
			return declareUnnamedStructOrUnion($.m_type);
	}
	:	TokenKind_Dynamic $d?
		TokenKind_Struct
		TokenKind_Identifier $n?
		(':' type_name_list $b)?
			{
				$.m_type = createStructType(
					&$n ? $n.m_data.m_string : sl::String(),
					&$b ? &$b.m_typeList : NULL,
					m_fieldAlignment,
					&$d ? TypeFlag_Dynamic : 0
					);

				if (!$.m_type)
					return false;
			}
		member_block<$.m_type>
	;

//..............................................................................

// union

struct
{
	UnionType* m_type;
}
union_specifier
	leave
	{
		if ($.m_type->getName().isEmpty())
			return declareUnnamedStructOrUnion($.m_type);
	}
	:	TokenKind_Dynamic $d?
		TokenKind_Union
		TokenKind_Identifier $n?
			{
				$.m_type = createUnionType(
					&$n ? $n.m_data.m_string : sl::String(),
					m_fieldAlignment,
					&$d ? TypeFlag_Dynamic : 0
					);

				if (!$.m_type)
					return false;
			}
		member_block<$.m_type>
	;

//..............................................................................

// class

// conflict with type_specifier:TokenKind_Class

class_specifier_rslv
	:	TokenKind_Opaque? TokenKind_Class TokenKind_Identifier
	;

struct
{
	ClassType* m_type;
}
resolver(class_specifier_rslv)
class_specifier
	:	TokenKind_Opaque $o?
		TokenKind_Class
		TokenKind_Identifier $n
		(':' type_name_list $b)?
			{
				$.m_type = createClassType(
					$n.m_data.m_string,
					&$b ? &$b.m_typeList : NULL,
					m_fieldAlignment,
					&$o ? ClassTypeFlag_Opaque : 0
					);

				if (!$.m_type)
					return false;
			}
		member_block<$.m_type>
	;

//..............................................................................

// class

struct
{
	DynamicLibClassType* m_type;
}
library_specifier
	:	TokenKind_DynamicLib TokenKind_Identifier
			{
				$.m_type = createDynamicLibType($2.m_data.m_string);
				if (!$.m_type)
					return false;
			}
		(		{
					m_module->m_namespaceMgr.openNamespace($.m_type->getLibNamespace());
				}
			'{' member_block_declaration_list '}'
				{
					return finalizeDynamicLibType();
				}
		|	TokenKind_Body $b
				{
					return setBody($.m_type->getLibNamespace(), $b);
				}
		)
	;

//..............................................................................

// struct, union, class, property

member_block<NamedType* $type>
	:	(		{
					m_module->m_namespaceMgr.openNamespace($type);
					$type->m_namespaceStatus = NamespaceStatus_Ready;
				}
			'{' member_block_declaration_list '}'
				{
					m_module->m_namespaceMgr.closeNamespace();
				}
		|	TokenKind_Body
				{
					return setBody($type, $1);
				}
		)
	;

//..............................................................................
