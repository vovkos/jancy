//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

start
compound_stmt
	:	'{'
			{
				m_module->m_namespaceMgr.openScope($1.m_pos, $1.m_data.m_integer);
			}
		local_declaration_list
		'}'
			{
				m_module->m_namespaceMgr.closeScope();
			}
	;

start
constructor_compound_stmt
	:	'{'
			{
				m_module->m_namespaceMgr.openScope($1.m_pos, $1.m_data.m_integer);
			}
		btm_construct_stmt*
			{
				return finalizeBaseTypeMemberConstructBlock();
			}
		local_declaration_list
		'}'
			{
				m_module->m_namespaceMgr.closeScope();
			}
	;

btm_construct_stmt
	:	btm_construct_name $n '(' expression_or_empty_list $a ')'
			{
				return callBaseTypeMemberConstructor($n.m_name, &$a.m_valueList);
			}
	|	TokenKind_BaseType $b '.' TokenKind_Construct '(' expression_or_empty_list $a ')'
			{
				return callBaseTypeConstructor($b.m_data.m_integer - 1, &$a.m_valueList);
			}
	|	';'
	;

// conflict with expression:TokenKind_Identifier and type_specifier:TokenKind_Identifier

btm_construct_name_rslv
	:	TokenKind_Identifier '.' (TokenKind_Identifier '.')* TokenKind_Construct
	;

struct {
	QualifiedName m_name;
}
resolver(btm_construct_name_rslv, 2) // higher priority than qualified_type_name_rslv
btm_construct_name
	:	TokenKind_Identifier '.'
			{
				$.m_name.addName($1.m_data.m_string);
			}
		(TokenKind_Identifier $n2 '.'
			{
				$.m_name.addName($n2.m_data.m_string);
			}
		)*
		TokenKind_Construct
	;

statement
	enter {
		m_module->m_namespaceMgr.setSourcePos(m_tokenCursor->m_pos);
	}
	:	compound_stmt
	|	expression_stmt
	|	if_stmt
	|	switch_stmt
	|	regex_switch_stmt
	|	while_stmt
	|	do_stmt
	|	for_stmt
	|	break_stmt
	|	continue_stmt
	|	return_stmt
	|	once_stmt
	|	try_stmt
	|	throw_stmt
	|	unsafe_stmt
	|	assert_stmt
	|	';'
	;

statement_sync
	:	TokenKind_If
	|	TokenKind_Switch
	|	TokenKind_RegexSwitch
	|	TokenKind_While
	|	TokenKind_Do
	|	TokenKind_For
	|	TokenKind_Break
	|	TokenKind_Continue
	|	TokenKind_Return
	|	TokenKind_Once
	|	TokenKind_Try
	|	TokenKind_Throw
	|	TokenKind_Unsafe
	|	TokenKind_Assert
	|	';'
	|	'{'
	;

start
expression_stmt
	:	expression ';'
	;

if_stmt
	local {
		IfStmt $stmt;
	}
	enter {
		m_module->m_controlFlowMgr.ifStmt_Create(&$stmt, popAttributeBlock());
	}
	:	TokenKind_If '(' expression $e ')' $a
			{
				return m_module->m_controlFlowMgr.ifStmt_Condition(&$stmt, $e.m_value, $a.m_pos);
			}
		statement $t
		(
			TokenKind_Else $a2
				{
					m_module->m_controlFlowMgr.ifStmt_Else(&$stmt, $a2.m_pos);
				}
			statement $f
		)?
			{
				m_module->m_controlFlowMgr.ifStmt_Follow(&$stmt);
			}
	;

switch_stmt_sync
	:	local_declaration_sync
	|	TokenKind_Case
	|	TokenKind_Default
	;

switch_stmt
	local {
		SwitchStmt $stmt;
	}
	enter {
		m_module->m_controlFlowMgr.switchStmt_Create(&$stmt);
	}
	:	TokenKind_Switch '(' expression $e ')'
		'{' $l
			{
				return m_module->m_controlFlowMgr.switchStmt_Condition(&$stmt, $e.m_value, $l.m_pos);
			}
		switch_block_stmt_list<&$stmt>
			{
				m_module->m_controlFlowMgr.switchStmt_Follow(&$stmt);
			}
		'}'
	;

nullable
switch_block_stmt_list<SwitchStmt* $stmt>
	:	catch(switch_stmt_sync) switch_block_stmt<$stmt>*
	;

switch_block_stmt<SwitchStmt* $stmt>
	:	TokenKind_Case constant_integer_expr ':'
			{
				return m_module->m_controlFlowMgr.switchStmt_Case($stmt, $2.m_value, $1.m_pos, $1.m_data.m_integer);
			}
	|	TokenKind_Default ':'
			{
				return m_module->m_controlFlowMgr.switchStmt_Default($stmt, $1.m_pos, $1.m_data.m_integer);
			}
	|	local_declaration
	;

// to resolve a conflict between regex switch and switch in the form `switch (expr)`, we check the expression type

regex_switch_stmt_rslv
	:	TokenKind_Switch '(' expression $e ',' $c?
			{
				return &$c || isRegexSwitchExpr($e.m_value);
			}
	;

resolver(regex_switch_stmt_rslv)
regex_switch_stmt
	local {
		RegexSwitchStmt $stmt;
	}
	enter {
		m_module->m_controlFlowMgr.regexSwitchStmt_Create(&$stmt, popAttributeBlock());
	}
	:	(TokenKind_RegexSwitch | TokenKind_Switch) '(' expression $p1 (',' expression $p2)? ')'
		'{' $l
			{
				return m_module->m_controlFlowMgr.regexSwitchStmt_Condition(
					&$stmt,
					$p1.m_value,
					&$p2 ? $p2.m_value : Value(),
					$l.m_pos
				);
			}
		regex_switch_block_stmt_list<&$stmt>
			{
				return m_module->m_controlFlowMgr.regexSwitchStmt_Finalize(&$stmt);
			}
		'}'
	;

nullable
regex_switch_block_stmt_list<RegexSwitchStmt* $stmt>
	:	catch(switch_stmt_sync) regex_switch_block_stmt<$stmt>*
	;

regex_switch_block_stmt<RegexSwitchStmt* $stmt>
	:	TokenKind_Case regex_switch_case_literal ':'
			{
				return m_module->m_controlFlowMgr.regexSwitchStmt_Case($stmt, $2.m_data, $1.m_pos, $1.m_data.m_integer);
			}
	|	TokenKind_Default ':'
			{
				return m_module->m_controlFlowMgr.regexSwitchStmt_Default($stmt, $1.m_pos, $1.m_data.m_integer);
			}
	|	local_declaration
	;


struct {
	sl::StringRef m_data;
}
start
regex_switch_case_literal
	local {
		Value $value;
	}
	:	literal<&$value>
			{
				return finalizeRegexSwitchCaseLiteral(&$.m_data, $value, $1.m_literal.m_isZeroTerminated);
			}
	;

while_stmt
	local {
		WhileStmt $stmt;
	}
	enter {
		m_module->m_controlFlowMgr.whileStmt_Create(&$stmt, popAttributeBlock());
	}
	:	TokenKind_While '(' expression $e ')' $a
			{
				m_module->m_controlFlowMgr.whileStmt_Condition(&$stmt, $e.m_value, $a.m_pos);
			}
		statement
			{
				m_module->m_controlFlowMgr.whileStmt_Follow(&$stmt);
			}
	;

do_stmt
	local {
		DoStmt $stmt;
	}
	enter {
		m_module->m_controlFlowMgr.doStmt_Create(&$stmt);
	}
	:	TokenKind_Do
			{
				m_module->m_controlFlowMgr.doStmt_PreBody(&$stmt, $1.m_pos);
			}
		statement
			{
				m_module->m_controlFlowMgr.doStmt_PostBody(&$stmt);
			}
		TokenKind_While '(' expression $e ')'
			{
				return m_module->m_controlFlowMgr.doStmt_Condition(&$stmt, $e.m_value);
			}
	;

for_stmt
	local {
		ForStmt $stmt;
	}
	enter {
		m_module->m_controlFlowMgr.forStmt_Create(&$stmt, popAttributeBlock());
	}
	:	TokenKind_For '('
			{
				m_module->m_controlFlowMgr.forStmt_PreInit(&$stmt, $1.m_pos);
			}
		(local_item_declaration | expression_or_empty_list ';')
		for_stmt_condition<&$stmt> ';'
		(		{
					m_module->m_controlFlowMgr.forStmt_PreLoop(&$stmt);
				}
			expression_list
				{
					m_module->m_controlFlowMgr.forStmt_PostLoop(&$stmt);
				}
		)? ')'
			{
				m_module->m_controlFlowMgr.forStmt_PreBody(&$stmt);
			}
		statement
			{
				m_module->m_controlFlowMgr.forStmt_PostBody(&$stmt);
			}
	;

nullable
for_stmt_condition<ForStmt* $stmt>
	:		{
				m_module->m_controlFlowMgr.forStmt_PreCondition($stmt);
			}
		expression $e
			{
				return m_module->m_controlFlowMgr.forStmt_PostCondition($stmt, $e.m_value);
			}
	|	epsilon
			{
				m_module->m_controlFlowMgr.forStmt_NoCondition($stmt);
			}
	;


break_stmt
	:	TokenKind_Break ';'
			{
				return m_module->m_controlFlowMgr.breakJump($1.m_data.m_integer);
			}
	;

continue_stmt
	:	TokenKind_Continue ';'
			{
				return m_module->m_controlFlowMgr.continueJump($1.m_data.m_integer);
			}
	;

return_stmt
	:	TokenKind_Return expression $e? ';'
			{
				return m_module->m_controlFlowMgr.ret(&$e ? $e.m_value : Value());
			}
	;

once_stmt
	local {
		OnceStmt $stmt;
	}
	:	storage_specifier? TokenKind_Once
			{
				StorageKind storageKind = &$1 ? $1.m_storageKind : StorageKind_Static;
				return
					m_module->m_controlFlowMgr.onceStmt_Create(&$stmt, $2.m_pos, storageKind) &&
					m_module->m_controlFlowMgr.onceStmt_PreBody(&$stmt, $2.m_pos);
			}
		statement $s
			{
				m_module->m_controlFlowMgr.onceStmt_PostBody(&$stmt);
			}
	;

try_stmt
	:	TokenKind_Try
		'{'
			{
				m_module->m_namespaceMgr.openScope($1.m_pos, ScopeFlag_Try | ScopeFlag_HasCatch | $2.m_data.m_integer);
			}
		local_declaration*
		'}'
			{
				m_module->m_namespaceMgr.closeScope();
			}
	;

throw_stmt
	:	TokenKind_Throw expression $e? ';'
			{
				m_module->m_controlFlowMgr.throwException(&$e ? $e.m_value : Value());
			}
	;

unsafe_stmt
	:	TokenKind_Unsafe
		'{' $l
			{
				m_module->m_operatorMgr.enterUnsafeRgn();
				m_module->m_namespaceMgr.openScope($l.m_pos, $l.m_data.m_integer | ScopeFlag_Unsafe);
			}
		local_declaration*
		'}'
			{
				m_module->m_namespaceMgr.closeScope();
				m_module->m_operatorMgr.leaveUnsafeRgn();
			}
	;

assert_stmt
	local {
		BasicBlock* $continueBlock;
		sl::StringRef $conditionText;
	}
	:	TokenKind_Assert '(' expression_pass1 $c
			{
				$conditionText = Token::getText($c.m_tokenList);
				$continueBlock = assertCondition(&$c.m_tokenList);
				return $continueBlock != NULL;
			}
		(',' expression $m)? ')'
			{
				return finalizeAssertStmt(
					$1.m_pos,
					$conditionText,
					&$m ? $m.m_value : Value(),
					$continueBlock
				);
			}
	;

catch_label
	:	TokenKind_Catch ':'
			{
				return m_module->m_controlFlowMgr.catchLabel($1.m_pos);
			}
	;

finally_label
	:	TokenKind_Finally ':'
			{
				return m_module->m_controlFlowMgr.finallyLabel($1.m_pos);
			}
	;

nested_scope_label
	:	TokenKind_NestedScope ':'
			{
				return m_module->m_namespaceMgr.openScope($1.m_pos, $1.m_data.m_integer | ScopeFlag_Nested) != NULL;
			}
	;

//..............................................................................
