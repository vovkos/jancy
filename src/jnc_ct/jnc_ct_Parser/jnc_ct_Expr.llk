//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

struct
{
	sl::BoxList<Token> m_tokenList;
}
expression_pass1
	:	catch(eof) expression_pass1_item<&$.m_tokenList>+
	;

expression_pass1_item<sl::BoxList<Token>* $tokenList>
	:	'{'
			{
				$tokenList->insertTail($1);
			}
		expression_pass1_item<$tokenList>*
		'}'
			{
				$tokenList->insertTail($3);
			}
	|	'['
			{
				$tokenList->insertTail($1);
			}
		expression_pass1_item<$tokenList>*
		']'
			{
				$tokenList->insertTail($3);
			}
	|	'('
			{
				$tokenList->insertTail($1);
			}
		expression_pass1_item<$tokenList>*
		')'
			{
				$tokenList->insertTail($3);
			}
	|	any
			{
				$tokenList->insertTail($1);
			}
	;

// arg_list & curly_initializer are simplier cause we only need to count one kind of braces

struct
{
	sl::BoxList<Token> m_tokenList;
}
arg_list_pass1
	:	catch(eof) '(' arg_list_pass1_item<&$.m_tokenList>* ')'
	;

arg_list_pass1_item<sl::BoxList<Token>* $tokenList>
	:	'('
			{
				$tokenList->insertTail($1);
			}
		arg_list_pass1_item<$tokenList>*
		')'
			{
				$tokenList->insertTail($3);
			}
	|	any
			{
				$tokenList->insertTail($1);
			}
	;

struct
{
	sl::BoxList<Token> m_tokenList;
}
curly_initializer_pass1
	:	TokenKind_Body
			{
				$.m_tokenList.insertTail($1);
			}
	|	catch(eof) curly_initializer_pass1_impl<&$.m_tokenList>
	;

curly_initializer_pass1_impl<sl::BoxList<Token>* $tokenList>
	:	'{'
			{
				$tokenList->insertTail($1);
			}
		curly_initializer_pass1_item<$tokenList>*
		'}'
			{
				$tokenList->insertTail($3);
			}
	;

curly_initializer_pass1_item<sl::BoxList<Token>* $tokenList>
	:	curly_initializer_pass1_impl<$tokenList>
	|	any
			{
				$tokenList->insertTail($1);
			}
	;

//..............................................................................

start
expression_save_value
	:	expression
			{
				m_lastExpressionValue = $1.m_value;
			}
	;

start
nullable
expression_or_empty_list_save_list
	:	expression_or_empty_list
			{
				sl::takeOver(&m_lastExpressionValueList, &$1.m_valueList);
			}
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct
{
	Value m_value;
}
start
expression
	enter
	{
		m_module->m_namespaceMgr.setSourcePos(m_currentToken.m_pos);
	}
	:	conditional_expr<&$.m_value>
	;

struct
{
	Value m_value;
}
start
expression_0
	enter
	{
		m_module->m_controlFlowMgr.lockEmission();
	}
	leave
	{
		m_module->m_controlFlowMgr.unlockEmission();
	}
	:	conditional_expr<&$.m_value>
	;


struct
{
	Value m_value;
}
nullable
expression_or_empty
	:	conditional_expr<&$.m_value>
	|	epsilon
	;

struct
{
	sl::BoxList<Value> m_valueList;
}
expression_list
	:	expression
			{
				$.m_valueList.insertTail($1.m_value);
			}
		(',' expression $e2
			{
				$.m_valueList.insertTail($e2.m_value);
			}
		)*
	;

// expression_or_empty_list might seem overcomplicated but
// this is done to avoid having a singe ValueKind_Void in case of empty list

struct
{
	sl::BoxList<Value> m_valueList;
}
nullable
expression_or_empty_list
	:	expression
			{
				$.m_valueList.insertTail($1.m_value);
			}
		(
			',' $c
				{
					m_module->m_codeAssistMgr.bumpArgumentTipIdxIf($c.m_pos);
				}
			expression_or_empty $e2
				{
					$.m_valueList.insertTail($e2.m_value);
				}
		)*
	|		{
				$.m_valueList.insertTail(Value());
			}
		(
			',' $c
				{
					m_module->m_codeAssistMgr.bumpArgumentTipIdxIf($c.m_pos);
				}
			expression_or_empty $e2
				{
					$.m_valueList.insertTail($e2.m_value);
				}
		)+
	|	epsilon
	;

struct
{
	Value m_value;
}
start
constant_expr
	:	conditional_expr<&$.m_value>
			{
				if ($.m_value.getValueKind() != ValueKind_Const)
				{
					err::setFormatStringError("not a constant expression");
					return false;
				}
			}
	;

struct
{
	intptr_t m_value;
}
start
constant_integer_expr
	:	expression
			{
				if ($1.m_value.getValueKind() != ValueKind_Const ||
					!($1.m_value.getType()->getTypeKindFlags() & TypeKindFlag_Integer))
				{
					err::setFormatStringError("expression is not integer constant");
					return false;
				}

				bool result = m_module->m_operatorMgr.castOperator(&$1.m_value, TypeKind_Int32);
				if (!result)
					return false;

				$.m_value = $1.m_value.getInt32();
			}
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct
{
	Value m_trueValue;
	Value m_falseValue;
	BasicBlock* m_thenBlock;
	BasicBlock* m_elseBlock;
	BasicBlock* m_phiBlock;
}
conditional_expr<Value* $value>
	:	logical_or_expr<$value>
		(		{
					$.m_thenBlock = m_module->m_controlFlowMgr.createBlock("cond_then");
					$.m_elseBlock = m_module->m_controlFlowMgr.createBlock("cond_else");
					$.m_phiBlock = m_module->m_controlFlowMgr.createBlock("cond_phi");
					return m_module->m_controlFlowMgr.conditionalJump(*$value, $.m_thenBlock, $.m_elseBlock);
				}
			'?'
			conditional_expr<&$.m_trueValue>
				{
					$.m_thenBlock = m_module->m_controlFlowMgr.setCurrentBlock($.m_elseBlock); // might have changed
				}
			':'
			conditional_expr<&$.m_falseValue>
				{
					return m_module->m_operatorMgr.conditionalOperator(
						$.m_trueValue,
						$.m_falseValue,
						$.m_thenBlock,
						$.m_phiBlock,
						$value
						);
				}
		)?
	;

logical_or_expr<Value* $value>
	local
	{
		BasicBlock* $opBlock1;
		BasicBlock* $opBlock2;
		Value $opValue2;
	}
	:	logical_and_expr<$value>
		(
			TokenKind_LogOr
				{
					$opBlock1 = m_module->m_controlFlowMgr.getCurrentBlock();
					$opBlock2 = m_module->m_controlFlowMgr.createBlock("log_or_op2");
					m_module->m_controlFlowMgr.setCurrentBlock($opBlock2); // don't follow yet
					if ($opBlock1->getFlags() & BasicBlockFlag_Reachable) // promote reachability
						$opBlock2->markReachable();
				}
			logical_and_expr<&$opValue2>
				{
					return m_module->m_operatorMgr.logicalOrOperator($opBlock1, $opBlock2, $value, $opValue2);
				}
		)*
	;

logical_and_expr<Value* $value>
	local
	{
		BasicBlock* $opBlock1;
		BasicBlock* $opBlock2;
		Value $opValue2;
	}
	:	inclusive_or_expr<$value>
		(
			TokenKind_LogAnd
				{
					$opBlock1 = m_module->m_controlFlowMgr.getCurrentBlock();
					$opBlock2 = m_module->m_controlFlowMgr.createBlock("log_and_op2");
					m_module->m_controlFlowMgr.setCurrentBlock($opBlock2); // don't follow yet
					if ($opBlock1->getFlags() & BasicBlockFlag_Reachable) // promote reachability
						$opBlock2->markReachable();
				}
			inclusive_or_expr<&$opValue2>
				{
					return m_module->m_operatorMgr.logicalAndOperator($opBlock1, $opBlock2, $value, $opValue2);
				}
		)*
	;

inclusive_or_expr<Value* $value>
	local
	{
		Value $opValue2;
	}
	:	exclusive_or_expr<$value>
		('|' exclusive_or_expr<&$opValue2>
			{
				return m_module->m_operatorMgr.binaryOperator(BinOpKind_BwOr, $value, $opValue2);
			}
		)*
	;

exclusive_or_expr<Value* $value>
	local
	{
		Value $opValue2;
	}
	:	and_expr<$value>
		('^' and_expr<&$opValue2>
			{
				return m_module->m_operatorMgr.binaryOperator(BinOpKind_BwXor, $value, $opValue2);
			}
		)*
	;

and_expr<Value* $value>
	local
	{
		Value $opValue2;
	}
	:	equality_expr<$value>
		('&' equality_expr<&$opValue2>
			{
				return m_module->m_operatorMgr.binaryOperator(BinOpKind_BwAnd, $value, $opValue2);
			}
		)*
	;

equality_expr<Value* $value>
	local
	{
		Value $opValue2;
	}
	:	relational_expr<$value>
		(equality_operator $o relational_expr<&$opValue2>
			{
				return m_module->m_operatorMgr.binaryOperator($o.m_opKind, $value, $opValue2);
			}
		)*
	;

struct
{
	BinOpKind m_opKind;
}
equality_operator
	: TokenKind_Eq
		{
			$.m_opKind = BinOpKind_Eq;
		}
	| TokenKind_Ne
		{
			$.m_opKind = BinOpKind_Ne;
		}
	;

relational_expr<Value* $value>
	local
	{
		Value $opValue2;
	}
	:	shift_expr<$value>
		(relational_operator $o shift_expr<&$opValue2>
			{
				return m_module->m_operatorMgr.binaryOperator($o.m_opKind, $value, $opValue2);
			}
		)*
	;

struct
{
	BinOpKind m_opKind;
}
relational_operator
	:	'<'
			{
				$.m_opKind = BinOpKind_Lt;
			}
	|	'>'
			{
				$.m_opKind = BinOpKind_Gt;
			}
	|	TokenKind_Le
			{
				$.m_opKind = BinOpKind_Le;
			}
	|	TokenKind_Ge
			{
				$.m_opKind = BinOpKind_Ge;
			}
	;

shift_expr<Value* $value>
	local
	{
		Value $opValue2;
	}
	:	additive_expr<$value>
		(shift_operator $o additive_expr<&$opValue2>
			{
				return m_module->m_operatorMgr.binaryOperator($o.m_opKind, $value, $opValue2);
			}
		)*
	;

struct
{
	BinOpKind m_opKind;
}
shift_operator
	:	TokenKind_Shl
			{
				$.m_opKind = BinOpKind_Shl;
			}
	|	TokenKind_Shr
			{
				$.m_opKind = BinOpKind_Shr;
			}
	;

additive_expr<Value* $value>
	local
	{
		Value $opValue2;
	}
	:	multiplicative_expr<$value>
		(additive_operator $o multiplicative_expr<&$opValue2>
			{
				return m_module->m_operatorMgr.binaryOperator($o.m_opKind, $value, $opValue2);
			}
		)*
	;

struct
{
	BinOpKind m_opKind;
}
additive_operator
	:	'+'
			{
				$.m_opKind = BinOpKind_Add;
			}
	|	'-'
			{
				$.m_opKind = BinOpKind_Sub;
			}
	;

multiplicative_expr<Value* $value>
	local
	{
		Value $opValue2;
	}
	:	at_expr<$value>
		(multiplicative_operator $o at_expr<&$opValue2>
			{
				return m_module->m_operatorMgr.binaryOperator($o.m_opKind, $value, $opValue2);
			}
		)*
	;

struct
{
	BinOpKind m_opKind;
}
multiplicative_operator
	:	'*'
			{
				$.m_opKind = BinOpKind_Mul;
			}
	|	'/'
			{
				$.m_opKind = BinOpKind_Div;
			}
	|	'%'
			{
				$.m_opKind = BinOpKind_Mod;
			}
	;

at_expr<Value* $value>
	local
	{
		Value $opValue2;
	}
	:	assignment_expr<$value>
		('@' assignment_expr<&$opValue2>
			{
				return m_module->m_operatorMgr.binaryOperator(BinOpKind_At, $value, $opValue2);
			}
		)*
	;

assignment_expr<Value* $value>
	: unary_expr<$value> assignment_operator_expr<$value>?
	;

assignment_operator_expr<Value* $value>
	local
	{
		Value $opValue2;
	}
	enter
	{
		if (m_mode == Mode_Reaction)  // reset on assignment (actually, not sure if it's the right thing to do)
			return resetReactionBindings();
	}
	:	assignment_operator $o conditional_expr<&$opValue2>
			{
				return m_module->m_operatorMgr.binaryOperator($o.m_opKind, $value, $opValue2);
			}
	|	'='
			{
				m_curlyInitializerTargetValue = *$value;
			}
		curly_initializer
	;

struct
{
	BinOpKind m_opKind;
}
assignment_operator
	:	'='
			{
				$.m_opKind = BinOpKind_Assign;
			}
	|	TokenKind_RefAssign
			{
				$.m_opKind = BinOpKind_RefAssign;
			}
	|	TokenKind_AddAssign
			{
				$.m_opKind = BinOpKind_AddAssign;
			}
	|	TokenKind_SubAssign
			{
				$.m_opKind = BinOpKind_SubAssign;
			}
	|	TokenKind_MulAssign
			{
				$.m_opKind = BinOpKind_MulAssign;
			}
	|	TokenKind_DivAssign
			{
				$.m_opKind = BinOpKind_DivAssign;
			}
	|	TokenKind_ModAssign
			{
				$.m_opKind = BinOpKind_ModAssign;
			}
	|	TokenKind_ShlAssign
			{
				$.m_opKind = BinOpKind_ShlAssign;
			}
	|	TokenKind_ShrAssign
			{
				$.m_opKind = BinOpKind_ShrAssign;
			}
	|	TokenKind_AndAssign
			{
				$.m_opKind = BinOpKind_AndAssign;
			}
	|	TokenKind_XorAssign
			{
				$.m_opKind = BinOpKind_XorAssign;
			}
	|	TokenKind_OrAssign
			{
				$.m_opKind = BinOpKind_OrAssign;
			}
	;

unary_expr<Value* $value>
	:	postfix_expr<$value>
	|	unary_operator_expr<$value>
	;

unary_operator_expr<Value* $value>
	leave
	{
		if (m_mode == Mode_Reaction && isBindableType($value->getType()))
			return addReactionBinding(*$value);
	}
	:	'+' unary_expr<$value>
			{
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_Plus, $value);
			}
	|	'-' unary_expr<$value>
			{
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_Minus, $value);
			}
	|	'~' unary_expr<$value>
			{
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_BwNot, $value);
			}
	|	'&' unary_expr<$value>
			{
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_Addr, $value);
			}
	|	'*' unary_expr<$value>
			{
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_Indir, $value);
			}
	|	'!' unary_expr<$value>
			{
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_LogNot, $value);
			}
	|	TokenKind_Inc unary_expr<$value>
			{
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_PreInc, $value);
			}
	|	TokenKind_Dec unary_expr<$value>
			{
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_PreDec, $value);
			}
	|	try_operator<$value>
	|	cast_operator<$value>
	|	TokenKind_New new_operator_type $t
			{
				return m_module->m_operatorMgr.newOperator(
					$t.m_type,
					$t.m_elementCountValue,
					&$t.m_argList,
					$value
					);
			}
		new_operator_curly_initializer<$value>?
	;

try_operator<Value* $value>
	local
	{
		TryExpr $tryExpr;
	}
	:	TokenKind_Try
			{
				m_module->m_controlFlowMgr.beginTryOperator(&$tryExpr);
			}
		unary_expr<$value>
			{
				return m_module->m_controlFlowMgr.endTryOperator(&$tryExpr, $value);
			}
	;

// cast_operator vs epsilon

cast_operator_rslv
	local
	{
		TypeSpecifier $typeSpecifier;
	}
	:	TokenKind_Dynamic? '('
		(
			type_specifier_sync |
			type_modifier_sync |
			qualified_type_name_rslv
		)
	;

resolver(cast_operator_rslv)
cast_operator<Value* $value>
	:	TokenKind_Dynamic $d? '(' type_name $t ')' unary_expr<$value>
			{
				OperatorDynamism dynamism = &$d ? OperatorDynamism_Dynamic : OperatorDynamism_Static;
				return m_module->m_operatorMgr.castOperator(dynamism, $value, $t.m_type);
			}
	;

struct
{
	Type* m_type;
	Value m_elementCountValue;
	sl::BoxList<Value> m_argList;
}
new_operator_type
	:	type_name_impl<&$.m_type, &$.m_elementCountValue>
	|	new_operator_type_w_constructor<&$.m_type, &$.m_argList>
	;

// can be left-factorized to avoid resolver

resolver(qualified_name TokenKind_Construct? '(', 2) // set higher priority than qualified_type_name
new_operator_type_w_constructor<Type** $type, sl::BoxList<Value>* $argList>
	:	qualified_type_name $t TokenKind_Construct? '(' expression_or_empty_list $a ')'
			{
				*$type = $t.m_type;
				sl::takeOver($argList, &$a.m_valueList);
			}
	;

new_operator_curly_initializer<Value* $value>
	enter
	{
		return m_module->m_operatorMgr.unaryOperator(UnOpKind_Indir, *$value, &m_curlyInitializerTargetValue);
	}
	:	curly_initializer
	;

postfix_expr<Value* $value>
	:	primary_expr<$value>
		postfix_operator<$value>*
	;

postfix_operator<Value* $value>
	leave
	{
		if (m_mode == Mode_Reaction && isBindableType($value->getType()))
			return addReactionBinding(*$value);
	}
	:	'(' $l
			{
				m_module->m_codeAssistMgr.pushArgumentTipIf($l.m_pos, *$value);
			}
		expression_or_empty_list
		')' $r
			{
				m_module->m_codeAssistMgr.popArgumentTipIf($r.m_pos);
				return m_module->m_operatorMgr.callOperator($value, &$2.m_valueList);
			}
	|	'~' '(' $l
			{
				m_module->m_codeAssistMgr.pushArgumentTipIf($l.m_pos, *$value);
			}
		expression_or_empty_list
		')' $r
			{
				m_module->m_codeAssistMgr.popArgumentTipIf($r.m_pos);
				return m_module->m_operatorMgr.closureOperator($value, &$3.m_valueList);
			}
	|	'[' expression_or_empty ']'
			{
				return m_module->m_operatorMgr.binaryOperator(BinOpKind_Idx, $value, $2.m_value);
			}
	|	TokenKind_Inc
			{
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_PostInc, $value);
			}
	|	TokenKind_Dec
			{
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_PostDec, $value);
			}
	|	'.'
			{
				generateAutoCompleteIf($1, *$value);
			}
		member_operator<$value>
	|	TokenKind_Ptr
			{
				generateAutoCompleteIf($1, *$value);
				return m_module->m_operatorMgr.unaryOperator(UnOpKind_Ptr, $value);
			}
		member_operator<$value>
	;

member_operator<Value* $value>
	:	TokenKind_Identifier $n
			{
				generateAutoCompleteIf($1, *$value);
				generateMemberInfoIf($1, *$value, $n.m_data.m_string);
				return m_module->m_operatorMgr.memberOperator($value, $n.m_data.m_string);
			}
	|	TokenKind_Get
			{
				return m_module->m_operatorMgr.getPropertyGetter($value);
			}
	|	TokenKind_Set
			{
				return m_module->m_operatorMgr.getPropertySetter($value);
			}
	;

// sizeof typeof bindingof etc operators should be here and not in unary_operator
// otherwise member operators could not be applied (typeof(int).m_size)

primary_expr<Value* $value>
	leave
	{
		if (m_mode == Mode_Reaction && isBindableType($value->getType()))
			return addReactionBinding(*$value);
	}
	:	'(' conditional_expr<$value> ')'
	|	literal<$value>
	|	TokenKind_BaseType
			{
				return getBaseType($1.m_data.m_integer - 1, $value);
			}
	|	TokenKind_Identifier
			{
				return lookupIdentifier($1, $value);
			}
	|	TokenKind_This
			{
				return m_module->m_operatorMgr.getThisValue($value);
			}
	|	TokenKind_Integer
			{
				$value->setConstInt64_u($1.m_data.m_int64_u, m_module);
			}
	|	TokenKind_Fp
			{
				$value->setConstDouble($1.m_data.m_double, m_module);
			}
	|	TokenKind_True
			{
				$value->setConstBool(true, m_module);
			}
	|	TokenKind_False
			{
				$value->setConstBool(false, m_module);
			}
	|	TokenKind_Null
			{
				$value->setNull(m_module);
			}
	|	TokenKind_Await expression $e
			{
				return m_module->m_operatorMgr.awaitOperator($e.m_value, $value);
			}
	|	TokenKind_SizeOf '(' type_name_or_expr $t ')'
			{
				return m_module->m_operatorMgr.sizeofOperator(OperatorDynamism_Static, $t.m_value, $value);
			}
	|	TokenKind_CountOf '(' type_name_or_expr $t ')'
			{
				return m_module->m_operatorMgr.countofOperator(OperatorDynamism_Static, $t.m_value, $value);
			}
	|	TokenKind_TypeOf '(' type_name_or_expr $t ')'
			{
				return m_module->m_operatorMgr.typeofOperator(OperatorDynamism_Static, $t.m_value, $value);
			}
	|	TokenKind_Dynamic TokenKind_SizeOf '(' expression $e ')'
			{
				return m_module->m_operatorMgr.sizeofOperator(OperatorDynamism_Dynamic, $e.m_value, $value);
			}
	|	TokenKind_Dynamic TokenKind_CountOf '(' expression $e ')'
			{
				return m_module->m_operatorMgr.countofOperator(OperatorDynamism_Dynamic, $e.m_value, $value);
			}
	|	TokenKind_Dynamic TokenKind_TypeOf '(' expression $e ')'
			{
				return m_module->m_operatorMgr.typeofOperator(OperatorDynamism_Dynamic, $e.m_value, $value);
			}
	|	TokenKind_OffsetOf '(' expression_0 $e ')'
			{
				return m_module->m_operatorMgr.offsetofOperator($e.m_value, $value);
			}
	|	TokenKind_BindingOf '(' conditional_expr<$value> ')'
			{
				return m_module->m_operatorMgr.getPropertyOnChanged($value);
			}
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct
{
	Value m_value;
}
type_name_or_expr
	:	type_name
			{
				$.m_value = $1.m_type;
			}
	|	expression_0
			{
				$.m_value = $1.m_value;
			}
	;

struct
{
	Literal m_literal;
}
literal<Value* $value>
	:	literal_atom<&$.m_literal>+ ('(' expression_or_empty_list $a ')')?
			{
				return finalizeLiteral(&$.m_literal, &$a ? &$a.m_valueList : NULL, $value);
			}
	;

literal_atom<Literal* $literal>
	:	TokenKind_Literal
			{
				$literal->m_binData.append($1.m_data.m_string.cp(), $1.m_data.m_string.getLength());
				$literal->m_isZeroTerminated = true;
			}
	|	TokenKind_BinLiteral
			{
				$literal->m_binData.append($1.m_data.m_binData, $1.m_data.m_binData.getCount());
				$literal->m_isZeroTerminated = false;
			}
	|	TokenKind_FmtLiteral expression TokenKind_FmtSpecifier $s?
			{
				sl::StringRef fmtSpecifier = &$s ? $s.m_data.m_string : sl::StringRef();
				return addFmtSite(
					$literal,
					$1.m_data.m_string,
					$2.m_value,
					$1.m_data.m_integer != 0,
					fmtSpecifier
					);
			}
	|	TokenKind_FmtLiteral TokenKind_FmtIndex
			{
				addFmtSite(
					$literal,
					$1.m_data.m_string,
					$2.m_data.m_integer
					);
			}
	|	TokenKind_FmtLiteral TokenKind_FmtSpecifier
			{
				addFmtSite(
					$literal,
					$1.m_data.m_string,
					$2.m_data.m_string
					);
			}
	;

//..............................................................................

start
curly_initializer
	local
	{
		CurlyInitializer $initializer;
	}
	enter
	{
		ASSERT(m_curlyInitializerTargetValue);
		$initializer.m_targetValue = m_curlyInitializerTargetValue;
	}
	:	'{' curly_initializer_item<&$initializer> (',' curly_initializer_item<&$initializer>)* '}'
			{
				if (!$initializer.m_count)
				{
					err::setFormatStringError("empty curly initializer");
					return false;
				}
			}
	;

nullable
curly_initializer_item<CurlyInitializer* $initializer>
	local
	{
		Value prevCurlyInitializerTargetValue;
	}
	:	curly_initializer_named_item<$initializer>
	|	curly_initializer_indexed_item<$initializer>
	|	epsilon
			{
				return skipCurlyInitializerItem($initializer);
			}
	;

resolver(TokenKind_Identifier '=') // conflict with expression:TokenKind_Identifier
curly_initializer_named_item<CurlyInitializer* $initializer>
	:	TokenKind_Identifier $n '='
			{
				return prepareCurlyInitializerNamedItem($initializer, $n.m_data.m_string);
			}
		(	curly_initializer
				{
					$initializer->m_count++;
				}
		|	expression $e
				{
					return assignCurlyInitializerItem($initializer, $e.m_value);
				}
		)
	;

curly_initializer_indexed_item<CurlyInitializer* $initializer>
	enter
	{
		return prepareCurlyInitializerIndexedItem($initializer);
	}
	:	expression $e
			{
				return assignCurlyInitializerItem($initializer, $e.m_value);
			}
	|	curly_initializer
			{
				$initializer->m_index++;
				$initializer->m_count++;
			}
	;

//..............................................................................
