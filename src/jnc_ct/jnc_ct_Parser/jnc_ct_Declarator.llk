//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

declarator_list<TypeSpecifier* $typeSpecifier>
	:	declarator<$typeSpecifier>
		declarator_list_terminator<$typeSpecifier, &$1.m_declarator>
	;

struct {
	Declarator m_declarator;
}
declarator<TypeSpecifier* $typeSpecifier>
	enter {
		$.m_declarator.setTypeSpecifier($typeSpecifier, m_module);
	}
	leave {
		postDeclarator(&$.m_declarator);
	}
	:	declarator_prefix<&$.m_declarator>*
		declarator_name<&$.m_declarator>
		declarator_suffix<&$.m_declarator>*
		declarator_constructor<&$.m_declarator>?
	;

struct {
	Declarator m_declarator;
}
special_void_method_declarator
	enter {
		$.m_declarator.setTypeSpecifier(NULL, m_module);
	}
	leave {
		postDeclarator(&$.m_declarator);
	}
	:	special_void_method_declarator_qualifier<&$.m_declarator>
			{
				$.m_declarator.m_attributeBlock = popAttributeBlock();
				$.m_declarator.m_doxyBlock = m_doxyParser.popBlock();

				postDeclaratorName(&$.m_declarator);
			}
		function_suffix<&$.m_declarator>
		special_void_method_declarator_terminator<&$.m_declarator>
	;

special_void_method_declarator_terminator<Declarator* $declarator>
	:	';'
			{
				return declare($declarator) && bodylessDeclaration();
			}
	|	TokenKind_Body
			{
				return declare($declarator) && setDeclarationBody($1);
			}

	;

declarator_list_terminator<
	TypeSpecifier* $typeSpecifier,
	Declarator* $declarator
	>
	:	declarator_w_curly_initializer<$typeSpecifier, $declarator>
			{
				return bodylessDeclaration();
			}
	|	declarator_wo_curly_initializer<$typeSpecifier, $declarator>
			{
				return bodylessDeclaration();
			}
	|	TokenKind_Body
			{
				return declare($declarator) && setDeclarationBody($1);
			}
	;

// a special grammar rule for curly-initializers (we don't require ';' after a curly-initializer)

resolver('=' ('{' | TokenKind_Body))
declarator_w_curly_initializer<
	TypeSpecifier* $typeSpecifier,
	Declarator* $declarator
	>
	:	'=' curly_initializer_pass1
			{
				sl::takeOver(&$declarator->m_initializer, &$2.m_tokenList);
				return declare($declarator);
			}
		(',' declarator_list<$typeSpecifier>)?
	;

declarator_wo_curly_initializer<
	TypeSpecifier* $typeSpecifier,
	Declarator* $declarator
	>
	:	('=' expression_pass1
			{
				sl::takeOver(&$declarator->m_initializer, &$2.m_tokenList);
			}
		)?
			{
				return declare($declarator);
			}
		(	',' declarator_list<$typeSpecifier>
		|	';'
		)
	;

//..............................................................................

declarator_name<Declarator* $declarator>
	leave {
		postDeclaratorName($declarator);
	}
	:	declarator_qualifier<$declarator>
			{
				$declarator->m_attributeBlock = popAttributeBlock();
				$declarator->m_doxyBlock = m_doxyParser.popBlock();
			}
		(
			'.' $dot
				{
					prepareQualifiedNameCodeAssistFallbackIf($dot, $declarator->getName());
				}
			declarator_qualifier<$declarator>
		)*
	;

declarator_qualifier<Declarator* $declarator>
	enter {
		$declarator->m_pos = m_tokenCursor->m_pos;
	}
	:	TokenKind_Identifier
			{
				prepareQualifiedNameCodeAssistFallbackIf($1, $declarator->getName());
				return $declarator->addName($1.m_data.m_string);
			}
	|	TokenKind_Get
			{
				return $declarator->addUnnamedMethod(FunctionKind_Getter);
			}
	|	special_void_method_declarator_qualifier<$declarator>
	;

special_void_method_declarator_qualifier<Declarator* $declarator>
	:	TokenKind_Construct
			{
				return $declarator->addUnnamedMethod(FunctionKind_Constructor);
			}
	|	TokenKind_StaticConstruct
			{
				return $declarator->addUnnamedMethod(FunctionKind_StaticConstructor);
			}
	|	TokenKind_Destruct
			{
				return $declarator->addUnnamedMethod(FunctionKind_Destructor);
			}
	|	TokenKind_Set
			{
				return $declarator->addUnnamedMethod(FunctionKind_Setter);
			}
	|	TokenKind_Operator operator_declarator_qualifier<$declarator>
	|	TokenKind_PostfixOperator postfix_operator_declarator_qualifier<$declarator>
	;

operator_declarator_qualifier<Declarator* $declarator>
	:	operator_name
			{
				return $declarator->addUnaryBinaryOperator($1.m_unOpKind, $1.m_binOpKind);
			}
	|	type_name
			{
				return $declarator->addCastOperator($1.m_type);
			}
	|	'(' ')'
			{
				return $declarator->addUnnamedMethod(FunctionKind_CallOperator);
			}
	|	TokenKind_Ellipsis
			{
				return $declarator->addUnnamedMethod(FunctionKind_OperatorVararg);
			}
	|	TokenKind_Cdecl TokenKind_Ellipsis
			{
				return $declarator->addUnnamedMethod(FunctionKind_OperatorCdeclVararg);
			}
	|	TokenKind_BindingOf
			{
				return $declarator->addUnnamedMethod(FunctionKind_Binder);
			}
	;

postfix_operator_declarator_qualifier<Declarator* $declarator>
	:	TokenKind_Inc
			{
				return $declarator->addUnaryBinaryOperator(UnOpKind_PostInc, BinOpKind_Undefined);
			}
	|	TokenKind_Dec
			{
				return $declarator->addUnaryBinaryOperator(UnOpKind_PostDec, BinOpKind_Undefined);
			}
	;

special_void_method_declarator_sync
	:	TokenKind_Construct
	|	TokenKind_StaticConstruct
	|	TokenKind_Destruct
	|	TokenKind_Set
	|	TokenKind_Operator
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct {
	UnOpKind m_unOpKind;
	BinOpKind m_binOpKind;
}
operator_name
	enter {
		$.m_unOpKind = UnOpKind_Undefined;
		$.m_binOpKind = BinOpKind_Undefined;
	}
	:	'~'
			{
				$.m_unOpKind = UnOpKind_BwNot;
			}
	|	'!'
			{
				$.m_unOpKind = UnOpKind_LogNot;
			}
	|	TokenKind_Inc
			{
				$.m_unOpKind = UnOpKind_Inc;
			}
	|	TokenKind_Dec
			{
				$.m_unOpKind = UnOpKind_Dec;
			}
	|	TokenKind_Ptr
			{
				$.m_unOpKind = UnOpKind_Ptr;
			}
	|	'+'
			{
				$.m_unOpKind = UnOpKind_Plus;
				$.m_binOpKind = BinOpKind_Add;
			}
	|	'-'
			{
				$.m_unOpKind = UnOpKind_Minus;
				$.m_binOpKind = BinOpKind_Sub;
			}
	|	'*'
			{
				$.m_unOpKind = UnOpKind_Indir;
				$.m_binOpKind = BinOpKind_Mul;
			}
	|	'/'
			{
				$.m_binOpKind = BinOpKind_Div;
			}
	|	'%'
			{
				$.m_binOpKind = BinOpKind_Mod;
			}
	|	TokenKind_Shl
			{
				$.m_binOpKind = BinOpKind_Shl;
			}
	|	TokenKind_Shr
			{
				$.m_binOpKind = BinOpKind_Shr;
			}
	|	'&'
			{
				$.m_unOpKind = UnOpKind_Addr;
				$.m_binOpKind = BinOpKind_BwAnd;
			}
	|	'^'
			{
				$.m_binOpKind = BinOpKind_BwXor;
			}
	|	'|'
			{
				$.m_binOpKind = BinOpKind_BwOr;
			}
	|	TokenKind_Eq
			{
				$.m_binOpKind = BinOpKind_Eq;
			}
	|	TokenKind_Ne
			{
				$.m_binOpKind = BinOpKind_Ne;
			}
	|	'<'
			{
				$.m_binOpKind = BinOpKind_Lt;
			}
	|	TokenKind_Le
			{
				$.m_binOpKind = BinOpKind_Le;
			}
	|	'>'
			{
				$.m_binOpKind = BinOpKind_Gt;
			}
	|	TokenKind_Ge
			{
				$.m_binOpKind = BinOpKind_Ge;
			}
	|	'='
			{
				$.m_binOpKind = BinOpKind_Assign;
			}
	|	TokenKind_RefAssign
			{
				$.m_binOpKind = BinOpKind_RefAssign;
			}
	|	TokenKind_AddAssign
			{
				$.m_binOpKind = BinOpKind_AddAssign;
			}
	|	TokenKind_SubAssign
			{
				$.m_binOpKind = BinOpKind_SubAssign;
			}
	|	TokenKind_MulAssign
			{
				$.m_binOpKind = BinOpKind_MulAssign;
			}
	|	TokenKind_DivAssign
			{
				$.m_binOpKind = BinOpKind_DivAssign;
			}
	|	TokenKind_ModAssign
			{
				$.m_binOpKind = BinOpKind_ModAssign;
			}
	|	TokenKind_ShlAssign
			{
				$.m_binOpKind = BinOpKind_ShlAssign;
			}
	|	TokenKind_ShrAssign
			{
				$.m_binOpKind = BinOpKind_ShrAssign;
			}
	|	TokenKind_AndAssign
			{
				$.m_binOpKind = BinOpKind_AndAssign;
			}
	|	TokenKind_XorAssign
			{
				$.m_binOpKind = BinOpKind_XorAssign;
			}
	|	TokenKind_OrAssign
			{
				$.m_binOpKind = BinOpKind_OrAssign;
			}
	|	TokenKind_AtAssign
			{
				$.m_binOpKind = BinOpKind_AtAssign;
			}
	|	TokenKind_LogAnd
			{
				$.m_binOpKind = BinOpKind_LogAnd;
			}
	|	TokenKind_LogOr
			{
				$.m_binOpKind = BinOpKind_LogOr;
			}
	|	'[' ']'
			{
				$.m_binOpKind = BinOpKind_Idx;
			}
	|	'@'
			{
				$.m_binOpKind = BinOpKind_At;
			}
	;

//..............................................................................

// prefix & suffix

declarator_prefix<Declarator* $declarator>
	:	'*'
			{
				$declarator->addPointerPrefix(m_module->m_pragmaMgr->m_pointerModifiers);
			}
		(type_modifier $m
			{
				return $declarator->addTypeModifier($m.m_typeModifier);
			}
		)*
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

declarator_suffix<Declarator* $declarator>
	:	array_suffix<$declarator>
	|	function_suffix<$declarator>
	|	bitfield_suffix<$declarator>
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

array_suffix<Declarator* $declarator>
	:	'[' ']'
			{
				$declarator->addArraySuffix(-1);
			}
	|	'[' expression_pass1 ']'
			{
				$declarator->addArraySuffix(&$2.m_tokenList);
			}
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// the infamous conflict of C++ constructible object declaration, e.g.: C c(a);

function_suffix_rslv
	:	'(' ')'
	|	'(' TokenKind_Ellipsis
	|	'(' (type_specifier | type_modifier)
	;

resolver(function_suffix_rslv)
function_suffix<Declarator* $declarator>
	local {
		DeclFunctionSuffix* $functionSuffix;
		StorageKind $prevStorageKind;
	}
	enter {
		$functionSuffix = $declarator->addFunctionSuffix();
		$prevStorageKind = m_storageKind;
	}
	leave {
		m_storageKind = $prevStorageKind;
	}
	:	'(' function_formal_argument_list<$functionSuffix>? ')' function_modifier<$functionSuffix>*
	;

function_formal_argument_list<DeclFunctionSuffix* $functionSuffix>
	:	function_formal_argument<$functionSuffix>
		(',' function_formal_argument<$functionSuffix>)*
	;

function_formal_argument<DeclFunctionSuffix* $functionSuffix>
	local {
		Declarator $declarator;
	}
	enter {
		m_storageKind = StorageKind_Undefined;
	}
	:	declaration_specifier_list $s
			{
				$declarator.setTypeSpecifier(&$s.m_typeSpecifier, m_module);
			}
		declarator_prefix<&$declarator>*
		declarator_name<&$declarator>?
		declarator_suffix<&$declarator>*
		('=' expression_pass1 $i
			{
				sl::takeOver(&$declarator.m_initializer, &$i.m_tokenList);
			}
		)?
			{
				return createFormalArg($functionSuffix, &$declarator) != NULL;
			}
	|	TokenKind_Ellipsis
			{
				return $functionSuffix->addFunctionTypeFlag(FunctionTypeFlag_VarArg);
			}
	;

function_modifier<DeclFunctionSuffix* $functionSuffix>
	:	TokenKind_Const
			{
				return $functionSuffix->getDeclarator()->setPostDeclaratorModifier(PostDeclaratorModifier_Const);
			}
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

resolver({ return false; }) // prefer conditional-expr over type-name, e.g.: p = new int : 3
bitfield_suffix<Declarator* $declarator>
	:	':' TokenKind_Integer
			{
				return $declarator->addBitFieldSuffix($2.m_data.m_integer);
			}
	;

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

declarator_constructor<Declarator* $declarator>
	:	TokenKind_Construct? arg_list_pass1
			{
				sl::takeOver(&$declarator->m_constructor, &$2.m_tokenList);
			}
	;

//..............................................................................
