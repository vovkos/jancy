//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// Like Ragel, Jancy-generated recognizers can be used for processing
// mixed-language documents. Developer can switch languages at will and just
// feed the data to the appropriate 'reswitch'.

//..............................................................................

// entry point

int main() {
	printf("main ()\n");

	enum Language {
		Foo, // the first language recognizes lexeme 'foo'
		Bar  // the second language recognizes lexeme 'bar'
	}

	Language language = Language.Foo;

	char s[] = "foo 'bar \\' bar' foo";

	char* p = s;
	char* end = p + countof(s) - 1;

	jnc.RegexState state(jnc.RegexExecFlags.AnchorDataBegin);

	while (p < end) {
		switch (language) {
		case Language.Foo:
			reswitch (state, p, end - p) {
			case "foo":
				printf("@%04llx: foo\n", state.m_match.m_offset);
				break;

			case "'":
				language = Language.Bar; // switch language
				break;

			case r"\s+":
				// ignore whitespace
				break;
			}
			break;

		case Language.Bar:
			reswitch (state, p, end - p) {
			case "bar":
				printf("%04llx: bar\n", state.m_match.m_offset);
				break;

			case r"\\'":
				// ignore escape-protected apostrophe
				break;

			case "'":
				language = Language.Foo; // switch language back
				break;

			case r"\s+":
				// ignore whitespace
				break;
			}
			break;

		default:
			assert(false);
		}

		if (!state.m_lastExecResult) {
			printf("recognition error\n");
			break;
		}

		p += state.m_match.m_length; // advance to the next lexeme
	}

	return 0;
}

//..............................................................................
