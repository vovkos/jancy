//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// Jancy enums conceal member identifiers within the enum namespace thus
// preventing the parent namespace pollution.

// To simplify porting of existing C/C++ code Jancy also offers 'exposed'
// enums, which behave just like traditional C/C++ enums and expose member
// identifiers.

// Yet another flavour of Jancy enums is the 'bitflag' enum, i.e. the enum
// designed to be used to describe bit flags. Bitflag enums differ from
// regular enums in the following aspects:
//   * Automatic value assignment goes 1, 2, 4, 8, i.e. in the power of 2 steps
//   * The bitwise OR operator '|' on two operands of matching bitflag enum
//     type yields the same bitflag enum type
//   * It's OK to assign zero to a bitflag enum

// By default the bitflag enums conceal member identifiers like normal enums
// do. The 'exposed' modifier can be applied to the bitflag enum to change
// that.

// All enums in Jancy can be derived from integer types to specify how many
// bytes will a particular enum occupy in memory and whether it will be treated
// as a signed or unsigned value.

// Enums in Jancy can also be derived from other enum types, thus inheriting
// all previously declared enum values.

//..............................................................................

enum Color {
	Red,    // = 0
	Orange,
	Yellow,
	Green      = 15,
	Blue,   // = 16
	Purple,
}

exposed enum State {
	State_Idle, // = 0
	State_Connecting,
	State_Connected,
	State_Disconnecting,
}

bitflag enum OpenFlags: uint8_t {
	ReadOnly,      // = 0x01
	Exclusive         = 0x20,
	DeleteOnClose, // = 0x40
}

bitflag enum OpenFlagsEx: OpenFlags {
	Asynchronous,  // = 0x80
}

enum PastelColor: Color {
	PastelRed,    // = 18
	PastelPurple,
}

//..............................................................................

// entry point

int main() {
	printf("main ()\n");

	// enum members must be qualified (unqualified names are not visible)

	Color color = Color.Purple;

	// derived enums inherit all enum values...

	PastelColor pastelColor = PastelColor.Blue;
	pastelColor = color; // ... can be implicitly downcasted
	pastelColor = PastelColor.PastelRed; // ... can be implicitly downcasted

	// cast int -> enum must be explicit

	// color = 0; // <-- error

	printf("color = %d\n", color);
	printf("pastelColor = %d\n", pastelColor);

	// exposed enum members need not be qualified...

	State state = State_Connecting;

	// ... but qualified names work also

	state = State.State_Disconnecting;

	// cast int -> exposed enum still must be explicit

	// state = 100; // <-- error

	printf("state = %d\n", state);

	// you can bitwise OR bitflag enum members together

	OpenFlags flags =
		OpenFlags.ReadOnly |
		OpenFlags.Exclusive |
		OpenFlags.DeleteOnClose;

	printf("flags = 0x%x\n", flags);

	// cast int -> bitflag enum must be explicit...

	// flags = 200; // <-- error

	// ...but it is OK to assign '0'

	flags = 0;

	OpenFlagsEx flagsEx = OpenFlagsEx.Asynchronous | OpenFlagsEx.ReadOnly;
	printf("flagsEx = 0x%x\n", flagsEx);
	return 0;
}

//..............................................................................
