//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// It's possible to perform recognition of a stream chunk by chunk.
// This is important when analyzing data received over network (e.g. over TCP).
// The traditional approach would be to buffer the complete "file" before even
// attempting recognition. With the stream-based approach, you can feed chunks 
// of data to the regex engine immediately as they arrive -- you will be 
// notified as soon as the end of a match is discovered

//..............................................................................

// entry point

int main() {
	printf("main()\n");

	// we need a jnc.RegexState object to store the state of DFA

	jnc.RegexState state(jnc.RegexExecFlags.AnchorDataBegin | jnc.RegexExecFlags.Stream);

	char const* stream = " foo bar 100 baz";
	char const* p = stream;
	char const* end = p + strlen(p);

	enum {
		ChunkSize = 1 // feed data to the regex byte-by-byte
	}

	while (p < end) {
		size_t leftover = end - p;
		size_t chunkSize = ChunkSize < leftover ? ChunkSize : leftover;

		reswitch (state, p, chunkSize) { 
		case "foo":
			printf("@%04x: foo\n", state.m_match.m_offset);
			break;
	
		case "bar":
			printf("@%04x: bar\n", state.m_match.m_offset);
			break;
	
		case r"\d+":
			printf("@%04x: decimal (%d bytes long)\n",
				state.m_match.m_offset,
				state.m_match.m_length
			);
			break;
	
		case r"\s+":
			// ignore whitespace
			break;
		}
	
		switch (state.m_lastExecResult) {
		case jnc.RegexExecResult.Match:
		case jnc.RegexExecResult.MatchOffsetsOnly:
			p = stream + state.m_match.m_endOffset;
			break;		
		
		case jnc.RegexExecResult.NoMatch:
			printf("recognition error\n");
			break2;

		case jnc.RegexExecResult.Continue:
			p += chunkSize;
			break;
		
		case jnc.RegexExecResult.ContinueBackward:
			assert(false); // shouldn't happen since we use jnc.RegexExecFlags.AnchorDataBegin
		}
	}

	return 0;
}

//..............................................................................
