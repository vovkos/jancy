//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_websocket.jncx"

void processSocketEvents(io.WebSocket* socket) {
	io.WebSocketEvents events = socket.m_activeEvents;
	printf("events: 0x%04x: %s\n", events, typeof(io.WebSocketEvents).getValueString(events));

	if (events & io.WebSocketEvents.IoError)
		printf("error: %s\n", socket.m_ioError.m_description);
}

int main() {
	io.SocketAddress address;
	address.parse("8088");

	io.WebSocket server;
	server.open(&address);
	server.listen();

	char buffer[512];

	printf("waiting for a connection...\n");

	io.WebSocketEvents events = server.blockingWait(
		io.WebSocketEvents.IoError |
		io.WebSocketEvents.IncomingConnection
	);

	processSocketEvents(server);

	if (!(events & io.WebSocketEvents.IncomingConnection))
		return -1;

	io.WebSocket* connection = server.accept(&address);
	printf("accepted connection from: %s\n", address.getString());

	printf("waiting for handshake...\n");

	events = connection.blockingWait(
		io.WebSocketEvents.IoError |
		io.WebSocketEvents.TcpDisconnected |
		io.WebSocketEvents.WebSocketHandshakeCompleted
	);

	processSocketEvents(connection);

	if (!(events & io.WebSocketEvents.WebSocketHandshakeCompleted))
		return -1;

	printf("handshake request: %p\n", connection.m_handshakeRequest);
	printf("handshake response: %p\n", connection.m_handshakeResponse);

	printf("headers: %s\n", connection.m_handshakeRequest.m_headers.format());

	for (;;) {
		printf("waiting for incoming data...\n");

		events = connection.blockingWait(
			io.WebSocketEvents.IoError |
			io.WebSocketEvents.TcpDisconnected |
			io.WebSocketEvents.IncomingData
		);

		processSocketEvents(connection);

		if (!(events & io.WebSocketEvents.IncomingData))
			return -1;

		size_t result = connection.read(buffer, sizeof(buffer) - 1);
		buffer[result] = 0; // ensure zero-termination
		printf("message: %s\n", buffer);

		connection.writeText(buffer, result);
	}
}
