//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// It's possible to perform recognition of a stream chunk by chunk.
// This is important when analyzing data received over network (e.g. over TCP).
// The traditional approach would be to buffer the complete "file" before even
// attempting recognition. With the stream-based approach, you can feed chunks 
// of data to the regex engine immediately as they arrive -- you will be 
// notified as soon as the end of a match is discovered

//..............................................................................

// entry point

int main() {
	printf("main()\n");

	string_t text = " foooooo bar 123";

	// a jnc.RegexState object to store the DFA state between invokations
	jnc.RegexState state(jnc.RegexExecFlags.Anchored);

	// set the EOF offset when you know it (not necessarily now)
	state.setEofOffset(text.m_length);

	char const* p = text.m_p;
	char const* end = p + text.m_length;
	while (p < end) {
		switch (state, string_t(p, 1)) { // feed data to the regex char-by-char
		case "foo+":
			printf(
				"@%04llx: foo (%d B): %s \n",
				$0.m_offset,
				$0.m_length,
				string_t(text.m_p + $0.m_offset, $0.m_length)
			);
			break;

		case "bar":
			printf("@%04llx: bar\n", $0.m_offset);
			break;

		case r"\d+":
			printf("@%04llx: decimal (%d B): %s\n",
				$0.m_offset,
				$0.m_length,
				string_t(text.m_p + $0.m_offset, $0.m_length)
			);
			break;

		case r"\s+":
			// ignore whitespace
			break;
		}

		switch (state.m_lastExecResult) {
		case jnc.RegexExecResult.Continue:
			p++;
			break;

		case jnc.RegexExecResult.Match:
			p = text.m_p + state.m_match.m_endOffset;
			break;

		case jnc.RegexExecResult.Mismatch:
			printf("recognition error\n");
			return -1;

		case jnc.RegexExecResult.ContinueBackward:
			assert(false); // shouldn't happen because of jnc.RegexExecFlags.Anchored
		}
	}

	return 0;
}

//..............................................................................
