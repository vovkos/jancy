//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// Jancy provides a way to extend the functionality of existing types with
// extension namespaces. Extension namespaces declare additional methods and
// properties, which have access to all the members of the type they extend.

//..............................................................................

class C1 {
	protected int m_x;

	construct(int x) {
		printf("C1.construct (%d)\n", x);
		m_x = x;
	}
}

//..............................................................................

extension C1Ext: C1 {
	// extension methods have access to protected data

	void foo() {
		printf("C1Ext.foo () { m_x = %d }\n", m_x);
	}

	void bar(int x);

	static void baz() {
		printf("C1Ext.baz ()\n");
	}

	int property m_prop;

	// fields, destructors and virtual methods cannot be added to extension
	// namespaces for obvious reasons: an extension should not alter a type
	// but rather extend it

	// int m_f;                      // <-- error
	// abstract v1 ();               // <-- error
	// int autoget property m_prop2; // <-- error

	// constructors and operators theoretically can be added, but this is not
	// currently supported -- only named methods and properties for now

	// construct (double x);    // <-- error
	// int operator += (int x); // <-- error
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// extension methods can be implemented outside of extension just like other
// member methods

void C1Ext.bar(int x) {
	printf("C1Ext.bar (%d) { m_x = %d }\n", x, m_x);
	m_x = x;

	// it's OK to refer to other extension methods, not just original ones

	foo();
}

int C1Ext.m_prop.get() {
	printf("C1Ext.m_prop.get () { m_x = %d }\n", m_x);
	return m_x;
}

void C1Ext.m_prop.set(int x) {
	printf("C1Ext.m_prop.set (%d) { m_x = %d }\n", x, m_x);
	m_x = x;
}

//..............................................................................

// notify the compiler we want to use this particular extension

using extension C1Ext;

// entry point

int main() {
	printf("main ()\n");

	C1 c(100);

	// invoke extension member methods and properties

	c.foo();
	c.bar(200);
	C1.baz();

	c.m_prop = 300;
	int x = c.m_prop;

	return 0;
}

//..............................................................................
