//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// Jancy features regex `switch` statement as a built-in support for creating
// protocol analyzers, programming language lexers and other recognizers.

// If you ever used tools like Lex, Flex, Ragel etc then you are already
// familiar with the idea. If not, then it is pretty simple, actually. First,
// you define a list of recognized lexemes in form of regular expressions. Then
// you specify which actions to execute when these lexemes are found in the
// input stream. Jancy compiler will then automatically build a DFA to
// recognize your language.

//..............................................................................

// entry point

int main() {
	printf("main()\n");

	string_t text = " foooooo bar 123 baz";
	while (text.m_length) {
		// `lexer switch` implies `jnc.RegexExecFlags.Anchored` which is most
		// natural for lexers. Without the `lexer` modifier, the regex `switch`
		// will go for a full match only (imply `jnc.RegexExecFlags.FullMatch`)

		lexer switch (text) {
		case "foo+":
			// $0 is the whole match, $1 is the first capturing group, etc
			printf($"foo: $0\n");
			break;

		case "bar":
			printf("bar\n");
			break;

		case r"\d+":
			printf($"decimal: $0\n");
			break;

		case r"\s+":
			// ignore whitespace
			break;

		default:
			printf("unrecognized lexeme: %s\n", text);
			break2;
		}

		text += $0.m_length; // effectively removes the matched lexeme
	}

	return 0;
}

//..............................................................................
