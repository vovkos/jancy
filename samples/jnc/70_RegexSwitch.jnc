//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// Jancy features 'regex switch' statement as a built-in support for creating
// protocol analyzers, programming language lexers and other recognizers.

// If you ever used tools like Lex, Flex, Ragel etc then you are already
// familiar with the idea. If not, then it is pretty simple, actually. First,
// you define a list of recognized lexemes in form of regular expressions. Then
// you specify which actions to execute when these lexemes are found in the
// input stream. Jancy compiler will then automatically build a DFA to
// recognize your language.

//..............................................................................

// entry point

int main() {
	printf("main()\n");

	string_t text = " foo bar 123 baz";
	while (text.m_length) {
		// by default, regex switch implies jnc.RegexExecFlag.FullMatch
		// for lexers like this one, we only want the start anchor
		[ RegexFlags = jnc.RegexExecFlags.Anchored ]
		lexer switch (text) {
		case "foo":
			// $0 is the whole match, $1 is the first capturing group, etc
			printf("@%04llx: foo\n", $0.m_offset);
			break;

		case "bar":
			printf("@%04llx: bar\n", $0.m_offset);
			break;

		case r"\d+":
			printf("@%04llx: %s\n", $0.m_offset, $0.m_text);
			break;

		case r"\s+":
			// ignore whitespace
			break;

		default:
			printf("unrecognized lexeme: %s\n", text);
			break2;
		}

		text += $0.m_length; // "shift" effectively removes the matched lexeme
	}

	return 0;
}

//..............................................................................
