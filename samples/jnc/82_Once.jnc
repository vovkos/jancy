//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

// Jancy features a nice and clean approach to the lazy initialization problem
// with the 'once' statement: just prefix any statement (including a compound
// statement '{ ... }') with 'once' or 'threadlocal once' and it will be executed
// once per each program run (or once per each thread run).

// Static or thread-local variable construction and initialization is also
// guaranteed to be executed once per program run (or once per thread run).

// Lazy initialization is guaranteed to be thread-safe. The compiler generates
// output code similar to boost::call_once ().

//..............................................................................

class C1 {
	int m_x;

	construct() {
		printf("C1.construct ()\n");
		m_x = rand() % 10;
	}
}

//..............................................................................

int foo() {
	printf("foo ()\n");
	return rand() % 10;
}

void initSomethingElse() {
	printf("initSomethingElse ()\n");
}

void baz(int x) {
	printf("baz (%d)\n", x);
}

void bar() {
	printf("bar ()\n");

	// static variable construction

	static C1 c;

	// static variable initialization

	static int x = foo();

	// static variable initialization with 'once' statement

	static int a[3];

	once {
		printf("foo.static once\n");
		for (size_t i = 0; i < countof(a); i++)
			a[i] = (int)i * 10;
	}

	// call initialization procedure once

	once initSomethingElse();

	// print values of static variables

	printf("c.m_x = %d\n", c.m_x);

	printf("x = %d\n", x);

	printf("a = { ");

	for (size_t i = 0; i < countof(a); i++)
		printf("%d, ", a [i]);

	printf("}\n");
}

//..............................................................................

// entry point

int main() {
	printf("main ()\n");

	bar();
	bar();
	bar();

	return 0;
}

//..............................................................................
