//..............................................................................
//
//  This file is part of the Jancy toolkit.
//
//  Jancy is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/jancy/license.txt
//
//..............................................................................

import "io_hid.jncx"
import "io_HidRd.jnc"
import "std_String.jnc"

//..............................................................................

void incIndent(std.StringBuilder* indent) {
	indent.append(' ', 4);
}

void decIndent(std.StringBuilder* indent) {
	indent.chop(4);
}

void printHidRdItem(
	char const* indent,
	io.HidReportField const* field,
	io.HidRdItemId id
) {
	if (field.isSet(id))
		printf(
			"%s%s: %d\n",
			indent,
			typeof(io.HidRdItemId).getValueString(id),
			field[id]
		);
}

void
printHidRdFieldArray(
	std.StringBuilder* indent,
	io.HidReport const* report,
	io.HidRdCollection const* collection
) {
	assert(report || collection);

	size_t count = report ? report.m_fieldCount : collection.m_fieldCount;
	for (size_t i = 0; i < count; i++) {
		io.HidReportField const* field = report ? report.m_fieldArray[i] : collection.m_fieldArray[i];
		if (field.m_isPadding) {
			printf("%sPadding: %d-bit\n", indent.m_p, field.m_bitCount);
			continue;
		}

		printf(
			"%sField: %s %d-bit\n",
	    	indent.m_p,
			typeof(io.HidReportType).getValueString(field.m_report.m_reportType),
			field.m_bitCount
		);

		incIndent(indent);

		if (field.m_valueFlags)
			printf(
				"%sFlags: %s\n",
				indent.m_p,
				typeof(io.HidRdValueFlags).getValueString(field.m_valueFlags)
			);

		printf(
			"%sUsagePage: %s\n",
			indent.m_p,
			field.m_usagePage.m_name
		);

		if (field.isSet(io.HidRdItemId.Usage)) {
			for (size_t i = 0; i < field.m_usageCount; i++) {
				uint_t usage = field.m_usageArray[i];
				printf(
					"%sUsage: %s\n",
					indent.m_p,
					field.m_usagePage.getUsageName(usage)
				);
			}
		}

		if (field.isSet(io.HidRdItemId.UsageMinimum))
			printf(
				"%sUsageMinimum: %s\n",
				indent.m_p,
				field.m_usagePage.getUsageName(field[io.HidRdItemId.UsageMinimum])
			);

		if (field.isSet(io.HidRdItemId.UsageMaximum))
			printf(
				"%sUsageMaximum: %s\n",
				indent.m_p,
				field.m_usagePage.getUsageName(field[io.HidRdItemId.UsageMaximum])
			);

		printHidRdItem(indent.m_p, field, io.HidRdItemId.LogicalMinimum);
		printHidRdItem(indent.m_p, field, io.HidRdItemId.LogicalMaximum);
		printHidRdItem(indent.m_p, field, io.HidRdItemId.PhysicalMinimum);
		printHidRdItem(indent.m_p, field, io.HidRdItemId.PhysicalMaximum);
		printHidRdItem(indent.m_p, field, io.HidRdItemId.ReportId);
		printHidRdItem(indent.m_p, field, io.HidRdItemId.ReportSize);
		printHidRdItem(indent.m_p, field, io.HidRdItemId.ReportCount);

		decIndent(indent);
	}
}

void printHidRdReports(io.HidRd const* rd) {
	printf("HID RD Reports%s\n", (rd.m_flags & io.HidRdFlags.HasReportId) ? " (with IDs)" : "");
	std.StringBuilder indent;
	incIndent(indent);
	for (uint_t i = io.HidReportType.Input; i <= io.HidReportType.Feature; i++) {
		io.HidReportType k = (io.HidReportType)i;

		size_t count = rd.m_reportCount[k];
		for (size_t j = 0; j < count; j++) {
			io.HidReport const* report = rd.m_reportArray[(io.HidReportType)i][j];

			printf(
				"%sReport: %s %d-bit (%d bytes)\n",
				indent.m_p,
				typeof(io.HidReportType).getValueString(report.m_reportType),
				report.m_bitCount,
				report.m_size
			);

			incIndent(&indent);

			if (rd.m_flags & io.HidRdFlags.HasReportId)
				printf(
					"%sReportId: %d\n",
					indent.m_p,
					report.m_reportId
				);

			printHidRdFieldArray(&indent, report, null);
			decIndent(&indent);
		}
	}
}

void printHidRdCollection(
	std.StringBuilder* indent,
	io.HidRdCollection const* collection
) {
	uint_t usage = collection.m_usage;

	printf(
		"%sCollection: %s (%s: %s)\n",
		indent.m_p,
		typeof(io.HidRdCollectionKind).getValueString(collection.m_collectionKind),
		collection.m_usagePage.m_name,
		collection.m_usagePage.getUsageName(usage)
	);

	incIndent(indent);
	printHidRdFieldArray(indent, null, collection);
	for (size_t i = 0; i < collection.m_collectionCount; i++)
		printHidRdCollection(indent, collection.m_collectionArray[i]);

	decIndent(indent);
}

void printHidRdCollections(io.HidRd const* rd) {
	printf("HID RD Collections%s\n", (rd.m_flags & io.HidRdFlags.HasReportId) ? " (with IDs)" : "");

	std.StringBuilder indent;
	incIndent(indent);
	for (size_t i = 0; i < rd.m_rootCollection.m_collectionCount; i++)
		printHidRdCollection(indent, rd.m_rootCollection.m_collectionArray[i]);

	printHidRdFieldArray(indent, null, rd.m_rootCollection);
}

int extractHidReportValue(
	void thin const* p, // must have at least 7 bytes extra
	size_t bitOffset,
	size_t bitCount
) {
	p += bitOffset / 8;
	int mask = (1 << bitCount) - 1;
	int value = (*(uint64_t thin const*)p >> (bitOffset & 7)) & mask;

	return bitCount >= 8 && (value & (1 << (bitCount - 1))) ? // negative
		value | ((int)-1 & ~mask) :
		value;
}

void
decodeHidReport(
	io.HidReport const* report,
	void const* p
) {
	size_t bitOffset = 0;

	for (size_t i = 0; i < report.m_fieldCount; i++) {
		io.HidReportField const* field = report.m_fieldArray[i];
		if (field.m_isPadding) {
			bitOffset += field.m_bitCount;
			continue;
		}

		size_t reportSize = field[io.HidRdItemId.ReportSize];
		size_t reportCount = field[io.HidRdItemId.ReportCount];

		for (size_t i = 0; i < reportCount; i++, bitOffset += reportSize) {
			int value = extractHidReportValue(p, bitOffset, reportSize);
			if (!value)
				continue; // ignore

			if (field.m_valueFlags & io.HidRdValueFlags.Variable) {
				uint_t usage = field.m_usageArray[i];
				printf("%s: %d\n", field.m_usagePage.getUsageName(usage), value);
			} else {
				uint_t usage = field[io.HidRdItemId.UsageMinimum] + value;
				printf("[%d]: %s\n", i, field.m_usagePage.getUsageName(usage));
			}
		}
	}
}

//..............................................................................
